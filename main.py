# --- START OF FILE main.txt ---

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main.py:
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –≤–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ context.chat_data
# - –î–æ–±–∞–≤–ª–µ–Ω Google Custom Search API –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
# - DuckDuckGo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ DDG: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ddgs.text() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ asyncio.to_thread()

import logging
import os
import asyncio
import signal
from urllib.parse import urljoin, urlencode
import base64
import pytesseract
from PIL import Image
import io
import pprint
import json
import aiohttp
import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    PicklePersistence # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_data =====
)
import google.generativeai as genai
from duckduckgo_search import DDGS
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')
# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
PERSISTENCE_FILE = "bot_persistence.pickle"
# =======================================================

for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (GOOGLE_CSE_ID, "GOOGLE_CSE_ID"),
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

# –ú–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    'gemini-2.0-flash-thinking-exp-01-21': '2.0 Flash Thinking (Exp)',
    'gemini-2.5-pro-preview-03-25': '2.5 Pro Preview',
    'gemini-2.5-pro-exp-03-25': '2.5 Pro (Exp)',
    'gemini-2.0-flash-001': '2.0 Flash',
}
DEFAULT_MODEL = 'gemini-2.0-flash-thinking-exp-01-21'

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
# user_search_enabled = {} # <-- –£–î–ê–õ–ï–ù–û
# user_selected_model = {} # <-- –£–î–ê–õ–ï–ù–û (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ chat_data)
# user_temperature = {}    # <-- –£–î–ê–õ–ï–ù–û (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ chat_data)
# ===========================================================

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_CONTEXT_CHARS = 95000
MAX_OUTPUT_TOKENS = 3000
DDG_MAX_RESULTS = 5
GOOGLE_SEARCH_MAX_RESULTS = 5

# –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)

SAFETY_SETTINGS_BLOCK_NONE = [
    {
        "category": HarmCategory.HARM_CATEGORY_HARASSMENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
]

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ chat_data =====
    context.chat_data['selected_model'] = DEFAULT_MODEL
    context.chat_data['search_enabled'] = True
    context.chat_data['temperature'] = 1.0
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    context.chat_data.setdefault('history', [])
    # ========================================================

    default_model_name = AVAILABLE_MODELS.get(DEFAULT_MODEL, DEFAULT_MODEL)
    start_message = (
        f"**{default_model_name}**."
        f"\n + –ø–æ–∏—Å–∫ Google (–æ—Å–Ω–æ–≤–Ω–æ–π) / DuckDuckGo (–∑–∞–ø–∞—Å–Ω–æ–π), —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR) –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
        "\n/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"
        "\n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        "\n/search_on  /search_off ‚Äî –≤–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫"
        "\n/temp X.Y ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (0.0-2.0)"
    )
    await update.message.reply_text(start_message, parse_mode='Markdown')

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['history'] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_data =====
    chat_id = update.effective_chat.id # chat_id –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –¥–ª—è –ª–æ–≥–æ–≤, –Ω–æ –Ω–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        temp = float(context.args[0])
        if not (0 <= temp <= 2):
            raise ValueError
        context.chat_data['temperature'] = temp
        await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
        logger.info(f"ChatID: {chat_id} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0")
    # ==========================================

async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_data =====
    context.chat_data['search_enabled'] = True
    await update.message.reply_text("üîç –ü–æ–∏—Å–∫ Google/DDG –≤–∫–ª—é—á—ë–Ω.")
    logger.info(f"ChatID: {update.effective_chat.id} | –ü–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    # ==========================================

async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_data =====
    context.chat_data['search_enabled'] = False
    await update.message.reply_text("üîá –ü–æ–∏—Å–∫ Google/DDG –æ—Ç–∫–ª—é—á—ë–Ω.")
    logger.info(f"ChatID: {update.effective_chat.id} | –ü–æ–∏—Å–∫ –û–¢–ö–õ–Æ–ß–ï–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.") # –î–æ–±–∞–≤–∏–º –ª–æ–≥
    # ==========================================

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_data =====
    chat_id = update.effective_chat.id # –ù—É–∂–µ–Ω –¥–ª—è –ª–æ–≥–æ–≤
    current_model = context.chat_data.get('selected_model', DEFAULT_MODEL)
    # ==========================================
    keyboard = []
    for m, name in AVAILABLE_MODELS.items():
         button_text = f"{'‚úÖ ' if m == current_model else ''}{name}"
         keyboard.append([InlineKeyboardButton(button_text, callback_data=m)])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id # –ù—É–∂–µ–Ω –¥–ª—è –ª–æ–≥–æ–≤
    selected = query.data
    if selected in AVAILABLE_MODELS:
        # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_data =====
        context.chat_data['selected_model'] = selected
        # ==========================================
        model_name = AVAILABLE_MODELS[selected]
        reply_text = f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{model_name}**"
        await query.edit_message_text(reply_text, parse_mode='Markdown')
        logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_name} ({selected})")
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ Google (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def perform_google_search(query: str, api_key: str, cse_id: str, num_results: int) -> list[str] | None:
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        'key': api_key,
        'cx': cse_id,
        'q': query,
        'num': num_results
    }
    encoded_params = urlencode(params)
    full_url = f"{search_url}?{encoded_params}"
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ Google Search API: {search_url}?key=...&cx=...&q={query}&num={num_results}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(full_url) as response:
                if response.status == 200:
                    data = await response.json()
                    items = data.get('items', [])
                    snippets = [item.get('snippet', '') for item in items if item.get('snippet')]
                    if snippets:
                        logger.info(f"Google Search: –ù–∞–π–¥–µ–Ω–æ {len(snippets)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                        return snippets
                    else:
                        logger.info("Google Search: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
                        return None
                elif response.status == 429:
                    logger.warning(f"Google Search: –û—à–∏–±–∫–∞ 429 - –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞!")
                    return None
                elif response.status == 403:
                     logger.error(f"Google Search: –û—à–∏–±–∫–∞ 403 - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–µ–Ω –ª–∏ Custom Search API.")
                     return None
                else:
                    error_text = await response.text()
                    logger.error(f"Google Search: –û—à–∏–±–∫–∞ API - –°—Ç–∞—Ç—É—Å {response.status}, –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                    return None
    except aiohttp.ClientError as e:
        logger.error(f"Google Search: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ - {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"Google Search: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ - {e}")
        return None
    except Exception as e:
        logger.error(f"Google Search: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}", exc_info=True)
        return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    original_user_message = update.message.text.strip() if update.message.text else ""
    if not original_user_message:
        return

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ chat_data =====
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ chat_data (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    context.chat_data.setdefault('selected_model', DEFAULT_MODEL)
    context.chat_data.setdefault('search_enabled', True)
    context.chat_data.setdefault('temperature', 1.0)
    context.chat_data.setdefault('history', [])

    model_id = context.chat_data['selected_model']
    temperature = context.chat_data['temperature']
    use_search = context.chat_data['search_enabled'] # –ß–∏—Ç–∞–µ–º –∏–∑ chat_data
    # ====================================================

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    search_context = ""
    final_user_prompt = original_user_message
    search_provider = None

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π =====
    logger.info(f"ChatID: {chat_id} | –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞: use_search = {use_search}")
    # ==========================================================================

    if use_search:
        logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω. –ó–∞–ø—Ä–æ—Å: '{original_user_message[:50]}...'")
        google_results = await perform_google_search(
            original_user_message, GOOGLE_API_KEY, GOOGLE_CSE_ID, GOOGLE_SEARCH_MAX_RESULTS
        )

        if google_results:
            search_provider = "Google"
            search_snippets = [f"- {snippet}" for snippet in google_results]
            search_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ {search_provider}:\n" + "\n".join(search_snippets)
            logger.info(f"ChatID: {chat_id} | –ù–∞–π–¥–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google: {len(search_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
        else:
            logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ Google –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–±—É–µ–º DuckDuckGo...")
            try:
                ddgs = DDGS()
                logger.debug(f"ChatID: {chat_id} | –ó–∞–ø—Ä–æ—Å –∫ DDGS().text('{original_user_message}', region='ru-ru', max_results={DDG_MAX_RESULTS}) —á–µ—Ä–µ–∑ asyncio.to_thread")
                results = await asyncio.to_thread(
                    ddgs.text,
                    original_user_message,
                    region='ru-ru',
                    max_results=DDG_MAX_RESULTS
                )
                logger.debug(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG:\n{pprint.pformat(results)}")

                if results:
                    search_snippets = [f"- {r.get('body', '')}" for r in results if r.get('body')]
                    if search_snippets:
                        search_provider = "DuckDuckGo (–∑–∞–ø–∞—Å–Ω–æ–π)"
                        search_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ {search_provider}:\n" + "\n".join(search_snippets)
                        logger.info(f"ChatID: {chat_id} | –ù–∞–π–¥–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG: {len(search_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
                    else:
                        logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–∞ (body).")
                else:
                    logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            except Exception as e_ddg:
                logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo: {e_ddg}", exc_info=True)

        if search_context:
            final_user_prompt = (
                f"{search_context}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"\"{original_user_message}\""
            )
    else:
        # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–ø–µ—Ä—å –î–û–õ–ñ–ù–ê –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö =====
        logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")
        # =================================================================

    logger.debug(f"ChatID: {chat_id} | –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini:\n{final_user_prompt}")
    search_log_msg = f"–ü–æ–∏—Å–∫: {'–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (' + search_provider + ')' if search_provider else ('–ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω' if use_search else '–û—Ç–∫–ª—é—á–µ–Ω')}"
    logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, {search_log_msg}")

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_data –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ =====
    chat_history = context.chat_data['history']
    # =====================================================
    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –µ—ë
    chat_history.append({"role": "user", "parts": [{"text": original_user_message}]})

    # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
    while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1:
        if len(chat_history) >= 2:
            removed_user = chat_history.pop(0)
            removed_model = chat_history.pop(0)
            logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)}")
        else:
            removed_message = chat_history.pop(0)
            logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed_message.get('role')}, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
        logger.info(f"ChatID: {chat_id} | ... –Ω–æ–≤–∞—è –æ–±—â–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")


    history_for_model = list(chat_history[:-1])
    history_for_model.append({"role": "user", "parts": [{"text": final_user_prompt}]})

    current_system_instruction = system_instruction_text
    tools = []
    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=current_system_instruction
        )
        response = model.generate_content(history_for_model)

        reply = response.text
        if not reply:
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason = feedback.block_reason if feedback else 'N/A'
                finish_reason_val = candidates_info[0].finish_reason if candidates_info else 'N/A'
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason and block_reason != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason})"
                else:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
            except AttributeError:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError).")
                 reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
            except Exception as e_inner:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}")
                reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."

        if reply:
             # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –û–°–ù–û–í–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é –≤ chat_data
             chat_history.append({"role": "model", "parts": [{"text": reply}]})

    except Exception as e:
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é {model_id}")
        error_message = str(e)
        try:
            if isinstance(e, genai.types.BlockedPromptException):
                 reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif isinstance(e, genai.types.StopCandidateException):
                 reply = f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            elif "400" in error_message and "API key not valid" in error_message:
                 reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
            elif "Deadline Exceeded" in error_message or "504" in error_message or "500" in error_message: # –î–æ–±–∞–≤–∏–ª 500
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Google ({error_message.splitlines()[0]}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." # –ë–æ–ª–µ–µ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è 5xx
            else:
                 reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"
        except AttributeError:
             logger.warning("genai.types –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BlockedPromptException/StopCandidateException, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
             if "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             elif "400" in error_message and "API key not valid" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
             elif "Deadline Exceeded" in error_message or "504" in error_message or "500" in error_message:
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Google ({error_message.splitlines()[0]}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             else:
                  reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"

    if reply:
        MAX_MESSAGE_LENGTH = 4096
        for i in range(0, len(reply), MAX_MESSAGE_LENGTH):
            await update.message.reply_text(reply[i:i + MAX_MESSAGE_LENGTH])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tesseract_available = False
    try:
        pytesseract.pytesseract.get_tesseract_version()
        tesseract_available = True
        logger.info("Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        common_paths = ['tesseract', '/usr/bin/tesseract', '/usr/local/bin/tesseract']
        found = False
        for path in common_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                pytesseract.pytesseract.tesseract_cmd = path
                try:
                    pytesseract.pytesseract.get_tesseract_version()
                    tesseract_available = True
                    logger.info(f"Tesseract –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
                    found = True
                    break
                except Exception:
                    continue
        if not found:
            logger.error(f"Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π. –û—à–∏–±–∫–∞: {e}. OCR –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
    try:
        photo_file = await update.message.photo[-1].get_file()
        file_bytes = await photo_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    user_caption = update.message.caption if update.message.caption else ""

    if tesseract_available:
        try:
            image = Image.open(io.BytesIO(file_bytes))
            extracted_text = pytesseract.image_to_string(image, lang='rus+eng')
            if extracted_text and extracted_text.strip():
                logger.info(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (OCR)")
                ocr_prompt = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n```\n{extracted_text.strip()}\n```\n"
                if user_caption:
                     user_prompt = f"{user_caption}\n{ocr_prompt}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º, —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
                else:
                     user_prompt = f"{ocr_prompt}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º."

                fake_message = type('obj', (object,), {
                    'text': user_prompt,
                    'reply_text': update.message.reply_text,
                    'chat_id': chat_id
                 })
                fake_update = type('obj', (object,), {
                    'effective_chat': update.effective_chat,
                    'message': fake_message
                })

                await handle_message(fake_update, context)
                return
            else:
                 logger.info(f"ChatID: {chat_id} | OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

        except pytesseract.TesseractNotFoundError:
             logger.error("Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ image_to_string! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ tesseract —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ (pytesseract.pytesseract.tesseract_cmd). OCR –æ—Ç–∫–ª—é—á–µ–Ω.")
             tesseract_available = False
        except Exception as e:
            logger.warning(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ OCR: {e}", exc_info=True)


    logger.info(f"ChatID: {chat_id} | –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ OCR)")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    MAX_IMAGE_BYTES = 4 * 1024 * 1024
    if len(file_bytes) > MAX_IMAGE_BYTES:
        logger.warning(f"ChatID: {chat_id} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({len(file_bytes)} –±–∞–π—Ç), –º–æ–∂–µ—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è.")
        if len(file_bytes) > MAX_IMAGE_BYTES * 1.5:
             await update.message.reply_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∂–∞—Ç–∏—è.")
             return

    b64_data = base64.b64encode(file_bytes).decode()
    prompt = user_caption if user_caption else "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    parts = [
        {"text": prompt},
        {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}}
    ]

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ chat_data =====
    model_id = context.chat_data.get('selected_model', DEFAULT_MODEL)
    temperature = context.chat_data.get('temperature', 1.0)
    # ================================================================

    if 'flash' not in model_id and 'pro' not in model_id and 'vision' not in model_id:
         vision_models = [m for m in AVAILABLE_MODELS if 'flash' in m or 'pro' in m or 'vision' in m]
         if vision_models:
             original_model_name = AVAILABLE_MODELS.get(model_id, model_id)
             model_id = vision_models[0]
             new_model_name = AVAILABLE_MODELS.get(model_id, model_id)
             logger.warning(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å {original_model_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_model_name}.")
             # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ –≤ chat_data, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–±—Ä–æ—Å–∏–ª–æ =====
             # context.chat_data['selected_model'] = model_id # –†–µ—à–∞–µ–º –Ω–µ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
             # ===========================================================================================
             await context.bot.send_message(chat_id=chat_id, text=f"‚ÑπÔ∏è –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é {new_model_name}.")
         else:
             logger.error(f"ChatID: {chat_id} | –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
             await update.message.reply_text("‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
             return

    logger.info(f"ChatID: {chat_id} | –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}")
    tools = []
    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        model = genai.GenerativeModel(
            model_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_id (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–π)
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=system_instruction_text
        )
        response = model.generate_content([{"role": "user", "parts": parts}])
        reply = response.text

        if not reply:
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason = feedback.block_reason if feedback else 'N/A'
                finish_reason_val = candidates_info[0].finish_reason if candidates_info else 'N/A'
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason and block_reason != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason})"
                else:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
            except AttributeError:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError).")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            except Exception as e_inner:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

    except Exception as e:
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        error_message = str(e)
        try:
            if "400 The model requires bild input" in error_message or "400 Request payload size exceeds the limit" in error_message:
                 reply = "‚ùå –û—à–∏–±–∫–∞: –õ–∏–±–æ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è."
            elif isinstance(e, genai.types.BlockedPromptException):
                 reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif isinstance(e, genai.types.StopCandidateException):
                 reply = f"‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            elif "400" in error_message and "API key not valid" in error_message:
                 reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
            elif "Deadline Exceeded" in error_message or "504" in error_message or "500" in error_message:
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Google ({error_message.splitlines()[0]}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"
        except AttributeError:
             logger.warning("genai.types –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BlockedPromptException/StopCandidateException, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
             if "400 The model requires bild input" in error_message or "400 Request payload size exceeds the limit" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –õ–∏–±–æ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è."
             elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             elif "400" in error_message and "API key not valid" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
             elif "Deadline Exceeded" in error_message or "504" in error_message or "500" in error_message:
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Google ({error_message.splitlines()[0]}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             else:
                 reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"

    if reply:
        MAX_MESSAGE_LENGTH = 4096
        for i in range(0, len(reply), MAX_MESSAGE_LENGTH):
            await update.message.reply_text(reply[i:i + MAX_MESSAGE_LENGTH])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not update.message.document:
        return
    doc = update.message.document
    allowed_mime_prefixes = ('text/', 'application/json', 'application/xml', 'application/csv', 'application/x-python', 'application/x-sh')
    allowed_mime_types = ('application/octet-stream',)

    if not doc.mime_type or (not any(doc.mime_type.startswith(prefix) for prefix in allowed_mime_prefixes) and doc.mime_type not in allowed_mime_types):
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, .txt, .py, .js, .csv, .json, .xml, .log –∏ —Ç.–ø.). –í–∞—à —Ç–∏–ø: `{doc.mime_type}`")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞: {doc.mime_type}, –ò–º—è: {doc.file_name}")
        return

    MAX_FILE_SIZE_MB = 10
    if doc.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª '{doc.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> {MAX_FILE_SIZE_MB} MB).")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {doc.file_name} ({doc.file_size} –±–∞–π—Ç)")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
    try:
        doc_file = await doc.get_file()
        file_bytes = await doc_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{doc.file_name}': {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    text = None
    detected_encoding = None
    encodings_to_try = ['utf-8', 'latin-1', 'cp1251']

    for encoding in encodings_to_try:
        try:
            text = file_bytes.decode(encoding)
            detected_encoding = encoding
            logger.info(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {encoding}.")
            break
        except UnicodeDecodeError:
            logger.debug(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ {encoding}.")
            continue
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{doc.file_name}' –∫–∞–∫ {encoding}: {e}")

    if text is None:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª '{doc.file_name}' –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: {encodings_to_try}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.")
        return

    MAX_FILE_CHARS = MAX_CONTEXT_CHARS // 3
    if len(text) > MAX_FILE_CHARS:
        truncated = text[:MAX_FILE_CHARS]
        warning_msg = f"\n\n(‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤)"
        logger.warning(f"ChatID: {chat_id} | –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ '{doc.file_name}' –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        truncated = text
        warning_msg = ""

    user_caption = update.message.caption if update.message.caption else ""
    file_name = doc.file_name or "—Ñ–∞–π–ª"

    if user_caption:
        user_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_name}' (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {detected_encoding}), —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{user_caption}\".\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"
    else:
        user_prompt = f"–í–æ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}' (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {detected_encoding}). –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º?\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"

    fake_message = type('obj', (object,), {
        'text': user_prompt,
        'reply_text': update.message.reply_text,
        'chat_id': chat_id
     })
    fake_update = type('obj', (object,), {
        'effective_chat': update.effective_chat,
        'message': fake_message
    })
    await handle_message(fake_update, context)


async def setup_bot_and_server(stop_event: asyncio.Event):
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ =====
    persistence = PicklePersistence(filepath=PERSISTENCE_FILE)
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).persistence(persistence).build()
    # ==============================================================

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("temp", set_temperature))
    application.add_handler(CommandHandler("search_on", enable_search))
    application.add_handler(CommandHandler("search_off", disable_search))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, f"/{GEMINI_WEBHOOK_PATH}")
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    # –í–∞–∂–Ω–æ: drop_pending_updates=True –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –ø–æ—Ç–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ False, –Ω–æ —Ç–æ–≥–¥–∞ –±–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await application.bot.set_webhook(webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    return application, run_web_server(application, stop_event)


async def run_web_server(application: Application, stop_event: asyncio.Event):
    app = aiohttp.web.Application()
    async def health_check(request):
        return aiohttp.web.Response(text="OK")
    app.router.add_get('/', health_check)

    app['bot_app'] = application
    webhook_path = f"/{GEMINI_WEBHOOK_PATH}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    logger.info(f"–í–µ–±—Ö—É–∫ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø—É—Ç–∏: {webhook_path}")

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    site = aiohttp.web.TCPSite(runner, "0.0.0.0", port)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        await stop_event.wait()
    finally:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiohttp!")
        return aiohttp.web.Response(status=500, text="Internal Server Error: Bot application not configured")

    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É PTB
        asyncio.create_task(application.process_update(update))
        return aiohttp.web.Response(text="OK", status=200)
    except json.JSONDecodeError as e:
         logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Telegram: {e}")
         raw_body = await request.text()
         logger.debug(f"–°—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {raw_body[:500]}...")
         return aiohttp.web.Response(text="Bad Request", status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        return aiohttp.web.Response(text="OK", status=200)


async def main():
    logging.getLogger('google.api_core').setLevel(logging.WARNING)
    logging.getLogger('google.generativeai').setLevel(logging.WARNING)
    logging.getLogger('duckduckgo_search').setLevel(logging.WARNING)
    logging.getLogger('PIL').setLevel(logging.INFO)
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ =====
    logging.getLogger('telegram.ext.persistence').setLevel(logging.INFO)
    # ========================================================

    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    def signal_handler():
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        if not stop_event.is_set():
            stop_event.set()
        else:
            logger.warning("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è.")

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, signal_handler)
        except NotImplementedError:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {sig}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ Windows.")


    application = None
    web_server_task = None
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        application, web_server_coro = await setup_bot_and_server(stop_event)
        web_server_task = asyncio.create_task(web_server_coro)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await stop_event.wait()

    except asyncio.CancelledError:
         logger.info("–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    finally:
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —à—Ç–∞—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        if web_server_task and not web_server_task.done():
             logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
             # –î–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É –∑–Ω–∞—Ç—å, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å (–æ–Ω –∂–¥–µ—Ç stop_event)
             if not stop_event.is_set(): stop_event.set() # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             try:
                 await asyncio.wait_for(web_server_task, timeout=15.0)
                 logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
             except asyncio.TimeoutError:
                 logger.warning("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω—è—é –∑–∞–¥–∞—á—É...")
                 web_server_task.cancel()
                 try:
                     await web_server_task
                 except asyncio.CancelledError:
                     logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                 except Exception as e_cancel:
                     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e_cancel}", exc_info=True)
             except asyncio.CancelledError:
                 logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
             except Exception as e_wait:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e_wait}", exc_info=True)

        if application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ (–≤–∫–ª—é—á–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)...")
            try:
                 # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: Shutdown —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å =====
                 await application.shutdown()
                 logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception as e_shutdown:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞: {e_shutdown}", exc_info=True)
        else:
            logger.warning("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –±—ã–ª –ø–æ—Ç–µ—Ä—è–Ω.")

        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        if tasks:
            logger.info(f"–û—Ç–º–µ–Ω—è—é {len(tasks)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
            [task.cancel() for task in tasks]
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
                logger.info("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã/–æ—Ç–º–µ–Ω–µ–Ω—ã.")
            except Exception as e_gather:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á: {e_gather}", exc_info=True)


        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)

# --- END OF FILE main.txt ---