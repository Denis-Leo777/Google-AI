# --- START OF REALLY x38 FULL CORRECTED main.py (RESTORED ASYNC BODIES) ---

import logging
import os
import asyncio
import signal # <-- –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
import time
import random
import google.genai as genai
import aiohttp.web # <-- –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–û–í ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–ú–ü–û–†–¢ –¢–ò–ü–û–í ---
# (–ò–º–ø–æ—Ä—Ç –∏ –∑–∞–≥–ª—É—à–∫–∏)
genai_types = None; Tool = None; GenerateContentConfig = None; GoogleSearch = None; Content = dict; Part = dict
class DummyFinishReasonEnum: FINISH_REASON_UNSPECIFIED = 0; STOP = 1; MAX_TOKENS = 2; SAFETY = 3; RECITATION = 4; OTHER = 5; _enum_map = {0: "UNSPECIFIED", 1: "STOP", 2: "MAX_TOKENS", 3: "SAFETY", 4: "RECITATION", 5: "OTHER"}
class DummyHarmCategoryEnum: HARM_CATEGORY_UNSPECIFIED = 0; HARM_CATEGORY_HARASSMENT = 7; HARM_CATEGORY_HATE_SPEECH = 8; HARM_CATEGORY_SEXUALLY_EXPLICIT = 9; HARM_CATEGORY_DANGEROUS_CONTENT = 10; _enum_map = {0: "UNSPECIFIED", 7: "HARASSMENT", 8: "HATE_SPEECH", 9: "SEXUALLY_EXPLICIT", 10: "DANGEROUS_CONTENT"}
class DummyHarmProbabilityEnum: HARM_PROBABILITY_UNSPECIFIED = 0; NEGLIGIBLE = 1; LOW = 2; MEDIUM = 3; HIGH = 4; _enum_map = {0: "UNSPECIFIED", 1: "NEGLIGIBLE", 2: "LOW", 3: "MEDIUM", 4: "HIGH"}
FinishReason = DummyFinishReasonEnum(); HarmCategory = DummyHarmCategoryEnum(); HarmProbability = DummyHarmProbabilityEnum()
ResourceExhausted=Exception; GoogleAPIError=Exception; FailedPrecondition=Exception; InvalidArgument=ValueError
try:
    from google.genai import types as genai_types; logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å google.genai.types.")
    try: Tool = genai_types.Tool; logger.info("–ù–∞–π–¥–µ–Ω genai_types.Tool")
    except AttributeError: logger.warning("genai_types.Tool –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤)
    try: HarmProbability = genai_types.HarmProbability; logger.info("–ù–∞–π–¥–µ–Ω genai_types.HarmProbability")
    except AttributeError: logger.warning("genai_types.HarmProbability –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
except ImportError as e: logger.error(f"!!! –ù–ï —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å google.genai.types: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏.")

from typing import Optional, Dict, Union, Any, Tuple, List
import urllib.parse

try: logger.info(f"!!!!!!!!!! –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è google-genai: {genai.__version__} !!!!!!!!!!")
except Exception as e: logger.error(f"!!!!!!!!!! –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ google-genai: {e} !!!!!!!!!!")
try: from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition, InvalidArgument; logger.info("–ò—Å–∫–ª—é—á–µ–Ω–∏—è google.api_core –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
except ImportError: logger.warning("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å google.api_core.exceptions.")
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
try: from google.protobuf.struct_pb2 import Struct; logger.info("Protobuf Struct –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError: logger.warning("!!! Protobuf –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω."); Struct = dict

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not TELEGRAM_BOT_TOKEN: logger.critical("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"); exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: logger.critical("–ö–ª—é—á Google API –Ω–µ –Ω–∞–π–¥–µ–Ω!"); exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
else: logger.info("–ö–ª—é—á GOOGLE_API_KEY –Ω–∞–π–¥–µ–Ω.")

try: gemini_client = genai.Client(api_key=GOOGLE_API_KEY); logger.info("–ö–ª–∏–µ–Ω—Ç google.genai.Client —Å–æ–∑–¥–∞–Ω.")
except Exception as e: logger.exception("!!! –ö–†–ò–¢. –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è google.genai.Client!"); exit("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini.")

AVAILABLE_MODELS = {'‚ö° Flash 2.0': 'models/gemini-2.0-flash-001', '‚ú® Pro 2.5': 'models/gemini-2.5-pro-exp-03-25'}
if not AVAILABLE_MODELS: exit("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ AVAILABLE_MODELS!")
DEFAULT_MODEL_ALIAS = '‚ú® Pro 2.5'
if DEFAULT_MODEL_ALIAS not in AVAILABLE_MODELS: DEFAULT_MODEL_ALIAS = next(iter(AVAILABLE_MODELS)); logger.warning(f"–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {DEFAULT_MODEL_ALIAS}")

google_search_tool = None; search_tool_type_used = "GoogleSearch (for 2.0+)"
if Tool is not None and GoogleSearch is not None:
    try: google_search_tool = Tool(google_search=GoogleSearch()); logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ '{search_tool_type_used}' —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e: logger.exception(f"!!! –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞: {e}"); google_search_tool = None; search_tool_type_used = "N/A (creation error)"
else: logger.error(f"!!! –ö–ª–∞—Å—Å—ã 'Tool' –∏–ª–∏ 'GoogleSearch' –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); google_search_tool = None; search_tool_type_used = "N/A (import error)"

user_selected_model: Dict[int, str] = {}; chat_histories: Dict[int, List[Dict[str, Any]]] = {}

system_instruction_text = (
    # ... (–¢–≤–æ–π –¥–ª–∏–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç) ...
    "–ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ google_search –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
)

def extract_response_text(response) -> Optional[str]:
    # (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try: return response.text
    except ValueError as e_val: # ...
    except AttributeError: # ...
    except Exception as e: logger.exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}"); return None

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–ö–æ–¥ start –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user = update.effective_user; chat_id = update.effective_chat.id
    if chat_id in user_selected_model: del user_selected_model[chat_id]
    if chat_id in chat_histories: del chat_histories[chat_id]
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è {user.id} –≤ {chat_id}.")
    actual_default_model = DEFAULT_MODEL_ALIAS
    search_status = "–≤–∫–ª—é—á–µ–Ω (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)" if google_search_tool else "–û–¢–ö–õ–Æ–ß–ï–ù"
    await update.message.reply_html(rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ë–æ—Ç Gemini (client) v38." f"\n\n–ú–æ–¥–µ–ª—å: <b>{actual_default_model}</b>" f"\nüîç –ü–æ–∏—Å–∫ Google: <b>{search_status}</b>." f"\n\n/model - —Å–º–µ–Ω–∏—Ç—å." f"\n/start - —Å–±—Ä–æ—Å–∏—Ç—å." f"\n\n–°–ø—Ä–∞—à–∏–≤–∞–π!", reply_to_message_id=update.message.message_id)

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–ö–æ–¥ select_model_command –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat_id = update.effective_chat.id; current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS); keyboard = []
    for alias in AVAILABLE_MODELS.keys(): keyboard.append([InlineKeyboardButton(f"‚úÖ {alias}" if alias == current_alias else alias, callback_data=alias)])
    if not keyboard: await update.message.reply_text("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π."); return
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–ö–æ–¥ select_model_callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    query = update.callback_query; await query.answer(); selected_alias = query.data; chat_id = query.message.chat_id; user_id = query.from_user.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias not in AVAILABLE_MODELS:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π alias: {selected_alias}")
        try: await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏.")
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {e}")
        return
    if selected_alias == current_alias:
        logger.info(f"{user_id} –ø–µ—Ä–µ–≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: {selected_alias}")
        try: await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É: {e}")
        return
    user_selected_model[chat_id] = selected_alias; logger.info(f"{user_id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å: {selected_alias}")
    reset_message = "";
    if chat_id in chat_histories: del chat_histories[chat_id]; logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞."); reset_message = "\n‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞."
    keyboard = [];
    for alias in AVAILABLE_MODELS.keys(): button_text = f"‚úÖ {alias}" if alias == selected_alias else alias; keyboard.append([InlineKeyboardButton(button_text, callback_data=alias)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    try: await query.edit_message_text(text=f"‚úÖ –ú–æ–¥–µ–ª—å: *{selected_alias}*!{reset_message}\n\n–ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"); await context.bot.send_message(chat_id=chat_id, text=f"–ú–æ–¥–µ–ª—å: *{selected_alias}*!{reset_message}", parse_mode=ParseMode.MARKDOWN)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–ö–æ–¥ handle_message —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ except –±–ª–æ–∫–∞–º–∏ –∏–∑ v37)
    if not update.message or not update.message.text: logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."); return
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id; message_id = update.message.message_id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({len(user_message)}): '{user_message[:80].replace(chr(10), ' ')}...'")
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    model_id = AVAILABLE_MODELS.get(selected_alias)
    if not model_id: logger.error(f"–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è '{selected_alias}'"); await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞.", reply_to_message_id=message_id); return
    final_text: Optional[str] = None; search_suggestions: List[str] = []; error_message: Optional[str] = None; start_time = time.monotonic()
    try:
        current_history = chat_histories.get(chat_id, [])
        api_contents = []
        try: user_part = Part(text=user_message) if Part is not dict else {'text': user_message}; api_contents = current_history + [{'role': 'user', 'parts': [user_part]}]
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ Part user: {e}"); api_contents = current_history + [{'role': 'user', 'parts': [{'text': user_message}]}]
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ '{model_id}'. –ò—Å—Ç–æ—Ä–∏—è: {len(current_history)} —Å–æ–æ–±—â.")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        config_obj = None; tools_list = [google_search_tool] if google_search_tool else None
        try:
             if GenerateContentConfig is not None: config_obj = GenerateContentConfig(system_instruction=system_instruction_text, tools=tools_list); logger.debug("GenerateContentConfig —Å–æ–∑–¥–∞–Ω.")
             else: logger.warning("GenerateContentConfig –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GenerateContentConfig: {e}")
        response = gemini_client.models.generate_content(model=model_id, contents=api_contents, config=config_obj)
        processing_time = time.monotonic() - start_time; logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç '{model_id}' –ø–æ–ª—É—á–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫.")
        final_text = extract_response_text(response)
        if final_text and not final_text.startswith("‚ö†Ô∏è"):
             try: model_part = Part(text=final_text) if Part is not dict else {'text': final_text}; history_to_update = chat_histories.get(chat_id, [])[:]; history_to_update.append({'role': 'user', 'parts': api_contents[-1]['parts']}); history_to_update.append({'role': 'model', 'parts': [model_part]}); chat_histories[chat_id] = history_to_update
             except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
             logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å {len(chat_histories[chat_id])} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        elif final_text and final_text.startswith("‚ö†Ô∏è"): error_message = final_text; final_text = None; logger.warning(f"–û—Ç–≤–µ—Ç –±—ã–ª –æ—à–∏–±–∫–æ–π, –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            if not error_message: error_message = "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç."
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        if hasattr(response, 'candidates') and response.candidates:
             try:
                 candidate = response.candidates[0]
                 grounding_metadata = getattr(candidate, 'grounding_metadata', None)
                 if grounding_metadata: web_queries = getattr(grounding_metadata, 'web_search_queries', [])
                 if web_queries: search_suggestions = list(web_queries); logger.info(f"–ù–∞–π–¥–µ–Ω—ã webSearchQueries ({len(search_suggestions)}): {search_suggestions}")
                 citation_metadata = getattr(candidate, 'citation_metadata', None)
                 if citation_metadata and hasattr(citation_metadata, 'citation_sources'):
                     sources = getattr(citation_metadata, 'citation_sources', []); urls = [s.uri for s in sources if hasattr(s, 'uri') and s.uri]
                     if urls: logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(urls)})."); [search_suggestions.append(url) for url in urls if url not in search_suggestions]
             except (AttributeError, IndexError): pass
    except InvalidArgument as e_arg:
        logger.error(f"–û—à–∏–±–∫–∞ InvalidArgument –¥–ª—è '{model_id}': {e_arg}")
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ '{selected_alias}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
    except ResourceExhausted as e_limit:
        logger.warning(f"–ò—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ API –¥–ª—è '{model_id}': {e_limit}")
        error_message = f"üòî –ú–æ–¥–µ–ª—å '{selected_alias}' —É—Å—Ç–∞–ª–∞ (–ª–∏–º–∏—Ç—ã)."
    except (GoogleAPIError, Exception) as e_other:
        logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API ('{model_id}'): {e_other}")
        error_message = f"üòµ –û—à–∏–±–∫–∞ ({type(e_other).__name__}) –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å '{selected_alias}'."
    reply_markup = None
    if search_suggestions:
        keyboard = []
        for suggestion in search_suggestions[:4]:
             if suggestion.startswith('http'):
                 try: domain = urllib.parse.urlparse(suggestion).netloc or suggestion[:30]+".."
                 except Exception: domain = suggestion[:30]+".."
                 keyboard.append([InlineKeyboardButton(f"üîó {domain}", url=suggestion)])
             else:
                 try: encoded = urllib.parse.quote_plus(suggestion); url = f"https://google.com/search?q={encoded}"; keyboard.append([InlineKeyboardButton(f"üîç {suggestion}", url=url)])
                 except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if keyboard: reply_markup = InlineKeyboardMarkup(keyboard); logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(keyboard)} —Å—Å—ã–ª–∫–∞–º–∏/–∑–∞–ø—Ä–æ—Å–∞–º–∏.")
    if final_text:
        max_length = 4096; bot_response = final_text
        if len(bot_response) > max_length: logger.warning(f"–û—Ç–≤–µ—Ç >{max_length}, –æ–±—Ä–µ–∑–∞–µ–º."); bot_response = bot_response[:max_length - 3] + "..."
        try: await update.message.reply_text(bot_response, reply_to_message_id=message_id, reply_markup=reply_markup); logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç ({len(bot_response)} —Å–∏–º–≤.).")
        except Exception as e: logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ Telegram: {e}");
    elif error_message:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_message}")
        try: await update.message.reply_text(error_message, reply_to_message_id=message_id)
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É Telegram: {e}")
    else:
        logger.warning(f"–ù–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –æ—à–∏–±–∫–∏.");
        try: await update.message.reply_text("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫. ü§∑", reply_to_message_id=message_id)
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback –æ—Ç–≤–µ—Ç: {e}")


# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –í–ï–ë-–°–ï–†–í–ï–†–ê ---
async def handle_ping(request: aiohttp.web.Request) -> aiohttp.web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∏–Ω–≥–∞."""
    peername = request.remote
    host = request.headers.get('Host', 'N/A')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω HTTP –ø–∏–Ω–≥ –æ—Ç {peername} –∫ —Ö–æ—Å—Ç—É {host}")
    return aiohttp.web.Response(text="OK", status=200)

async def run_web_server(port: int, stop_event: asyncio.Event):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä aiohttp."""
    # --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –¢–ï–õ–û –§–£–ù–ö–¶–ò–ò ---
    app = aiohttp.web.Application()
    app.router.add_get('/', handle_ping)
    runner = aiohttp.web.AppRunner(app)
    await runner.setup()
    site = aiohttp.web.TCPSite(runner, '0.0.0.0', port)
    try:
        await site.start()
        logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        await stop_event.wait() # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    except asyncio.CancelledError:
         logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e: logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    # --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –¢–ï–õ–ê ---

# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def main_async() -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."""
    # --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –¢–ï–õ–û –§–£–ù–ö–¶–ò–ò ---
    if 'gemini_client' not in globals() or not gemini_client: logger.critical("–ó–ê–ü–£–°–ö –ù–ï–í–û–ó–ú–û–ñ–ï–ù: –ö–ª–∏–µ–Ω—Ç Gemini –Ω–µ —Å–æ–∑–¥–∞–Ω."); return
    if not TELEGRAM_BOT_TOKEN: logger.critical("–ó–ê–ü–£–°–ö –ù–ï–í–û–ó–ú–û–ñ–ï–ù: –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    if not GOOGLE_API_KEY: logger.critical("–ó–ê–ü–£–°–ö –ù–ï–í–û–ó–ú–û–ñ–ï–ù: –ö–ª—é—á Google API –Ω–µ –Ω–∞–π–¥–µ–Ω."); return

    search_status = "–≤–∫–ª—é—á–µ–Ω" if google_search_tool else "–û–¢–ö–õ–Æ–ß–ï–ù"
    logger.info(f"–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Google ({search_tool_type_used}) –≥–ª–æ–±–∞–ª—å–Ω–æ {search_status}.")

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram...")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .read_timeout(30)
        .get_updates_read_timeout(30)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))

    port = int(os.environ.get("PORT", 8080))
    logger.info(f"–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {port}")

    stop_event = asyncio.Event()

    async with application:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
        await application.initialize()
        logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        web_server_task = asyncio.create_task(run_web_server(port, stop_event))
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram...")
        await application.start()

        logger.info("–ë–æ—Ç –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

        loop = asyncio.get_running_loop()
        sigs = (signal.SIGINT, signal.SIGTERM)
        for s in sigs:
            loop.add_signal_handler(
                s, lambda s=s: asyncio.create_task(shutdown(s, loop, stop_event, application))
            )

        await stop_event.wait()

        if not web_server_task.done():
             logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
             # await asyncio.wait_for(web_server_task, timeout=5.0) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç
    # --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –¢–ï–õ–ê ---

# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø SHUTDOWN ---
async def shutdown(signal, loop, stop_event: asyncio.Event, application: Application):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    # --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –¢–ï–õ–û –§–£–ù–ö–¶–ò–ò ---
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞ {signal.name}, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
    if not stop_event.is_set(): stop_event.set()
    if application._is_running:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Application...")
        await application.stop()
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram...")
        await application.shutdown()
        logger.info("Telegram Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    # --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –¢–ï–õ–ê ---

# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == '__main__':
    # --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –¢–ï–õ–û ---
    if 'gemini_client' in globals() and gemini_client:
        logger.info("–ö–ª–∏–µ–Ω—Ç Gemini —Å–æ–∑–¥–∞–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª asyncio.")
        try:
            asyncio.run(main_async())
        except (KeyboardInterrupt, SystemExit):
            logger.info("–¶–∏–∫–ª asyncio –ø—Ä–µ—Ä–≤–∞–Ω (KeyboardInterrupt/SystemExit).")
        except Exception as e:
            logger.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ!")
        finally:
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")
    else:
        logger.critical("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç Gemini –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
    # --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –¢–ï–õ–ê ---

# --- END OF REALLY x38 FULL CORRECTED main.py (RESTORED ASYNC BODIES) ---
