# --- START OF FULL CORRECTED main.py (Search with Snippets) ---

import logging
import os
import asyncio
import google.generativeai as genai
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç types
import time
import random
from typing import Optional, Dict, Union, Any, Tuple # –î–æ–±–∞–≤–∏–ª–∏ Tuple

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ü–æ–∏—Å–∫–∞ –∏ –ü–∞—Ä—Å–∏–Ω–≥–∞
import httpx # –î–æ–±–∞–≤–ª—è–µ–º
from bs4 import BeautifulSoup # –î–æ–±–∞–≤–ª—è–µ–º
try:
    from googlesearch import search as google_search_sync
except ImportError: google_search_sync = None
else:
    if not callable(google_search_sync): google_search_sync = None

# Gemini Function Calling —Ç–∏–ø—ã
from google.protobuf.struct_pb2 import Struct

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    '‚ö° Flash': 'gemini-2.0-flash-001',
    'üß† Pro Exp': 'gemini-2.5-pro-exp-03-25',
    'üñºÔ∏è Images': 'gemini-2.0-flash-exp-image-generation',
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search ---
google_search_tool = None
if google_search_sync:
    google_search_func = genai.protos.FunctionDeclaration(
        name="google_search",
        description="–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ–≥–æ–¥—ã, –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü.", # –£—Ç–æ—á–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        parameters=genai.protos.Schema(
            type=genai.protos.Type.OBJECT,
            properties={"query": genai.protos.Schema(type=genai.protos.Type.STRING, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")},
            required=["query"]
        )
    )
    google_search_tool = genai.protos.Tool(function_declarations=[google_search_func])
    logger.info("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –¥–ª—è Gemini –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
else:
    logger.warning("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –ù–ï –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω...")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–æ–¥–µ–ª–µ–π Gemini ---
LOADED_MODELS: Dict[str, genai.GenerativeModel] = {}
gemini_tools = [google_search_tool] if google_search_tool else None
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    # –°–ê–ú–ê–Ø –°–ò–õ–¨–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø
    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π... –æ—Å—Ç—Ä–æ—É–º–∏–µ. "
        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª–∏—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–±–æ—Ä—ã'), "
        "–ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, "
        "–¢–´ –û–ë–Ø–ó–ê–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç google_search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–ê–ú–û–ô –ê–ö–¢–£–ê–õ–¨–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ò–ó –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–• –û–ü–ò–°–ê–ù–ò–ô –°–¢–†–ê–ù–ò–¶. " # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏—è
        "–ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ google_search –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    )
    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower(): logger.warning(...); continue
        try:
            model = genai.GenerativeModel(
                model_id,
                generation_config={"temperature": 0.8 if 'Flash' in alias else 1, "top_p": 1, "top_k": 40, "max_output_tokens": 2048},
                system_instruction=system_instruction_text,
                tools=gemini_tools
            )
            LOADED_MODELS[alias] = model
            logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) ... —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e: logger.error(...)
    if not LOADED_MODELS: raise RuntimeError(...)
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS:
        try: DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS)); logger.warning(...)
        except StopIteration: raise RuntimeError(...)
except GoogleAPIError as e: logger.exception(...); exit(...)
except Exception as e: logger.exception(...); exit(...)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}
chat_histories: Dict[int, Any] = {}

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ Google (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø) ---
async def fetch_and_parse(url: str, client: httpx.AsyncClient) -> Tuple[Optional[str], Optional[str]]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'} # –ú–∞—Å–∫–∏—Ä—É–µ–º—Å—è –ø–æ–¥ –±—Ä–∞—É–∑–µ—Ä
        response = await client.get(url, timeout=7.0, follow_redirects=True, headers=headers) # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç, –¥–æ–±–∞–≤–∏–º User-Agent
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        title = soup.title.string.strip() if soup.title else None
        description = None
        meta_desc = soup.find('meta', attrs={'name': 'description'})
        if meta_desc and meta_desc.get('content'):
            description = meta_desc['content'].strip()
        else:
            first_p = soup.find('p')
            if first_p: description = first_p.get_text().strip()
        if description and len(description) > 150: description = description[:150] + "..."
        if title: logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω title –¥–ª—è {url}")
        return title, description
    except httpx.TimeoutException: logger.warning(f"!!!! –¢–∞–π–º–∞—É—Ç URL: {url}"); return None, None
    except httpx.RequestError as e: logger.warning(f"!!!! –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ URL {url}: {e}"); return None, None
    except Exception as e: logger.warning(f"!!!! –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {url}: {e}"); return None, None

async def perform_google_search(query: str, num_results: int = 3) -> str: # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 3
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏/—Å–Ω–∏–ø–ø–µ—Ç—ã –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    if not google_search_sync: return "–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    logger.info(f"!!!! –ù–∞—á–∞–ª–æ Google –ø–æ–∏—Å–∫–∞ (—Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º): '{query}'")
    formatted_results = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
    urls_to_fetch = []
    try:
        search_results = await asyncio.to_thread(google_search_sync, query, num_results=num_results, lang="ru")
        urls_to_fetch = list(search_results)
        if not urls_to_fetch: logger.warning(...); return formatted_results + "–ü–æ–∏—Å–∫ Google –Ω–µ –¥–∞–ª URL."
        logger.info(f"!!!! Google –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(urls_to_fetch)} URL.")
    except Exception as e: logger.exception(...); return formatted_results + f"–û—à–∏–±–∫–∞ Google –ø–æ–∏—Å–∫–∞: {e}"
    async with httpx.AsyncClient() as client:
        tasks = [fetch_and_parse(url, client) for url in urls_to_fetch]
        results = await asyncio.gather(*tasks, return_exceptions=True)
    processed_count = 0
    for i, result in enumerate(results):
        if isinstance(result, Exception) or result is None: logger.warning(...); continue
        title, description = result
        if title:
            processed_count += 1
            formatted_results += f"{processed_count}. {title}\n"
            if description: formatted_results += f"   - {description}\n"
            formatted_results += f"   URL: {urls_to_fetch[i]}\n\n"
    if processed_count == 0: logger.warning(...); formatted_results += "(–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç)"
    logger.info(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø GEMINI (–Ω–∞—á–∞–ª–æ): {formatted_results[:300]}...")
    return formatted_results[:2500] # –£–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞ Gemini ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º)
async def process_gemini_chat_turn(...) -> str: ...

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
# (start, select_model_command, select_model_callback, handle_message, test_search - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start(...) -> None: ...
async def select_model_command(...) -> None: ...
async def select_model_callback(...) -> None: ...
async def test_search(...) -> None: ...
async def handle_message(...) -> None: ...

# --- main ---
def main() -> None:
    if not LOADED_MODELS: logger.critical(...); return
    if not google_search_sync: logger.warning(...)
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    # ... (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) ...
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("testsearch", test_search))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

# --- END OF FULL CORRECTED main.py ---
