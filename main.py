# –ü–æ–ª–Ω—ã–π –∫–æ–¥ Telegram-–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä—ë—Ö –º–æ–¥–µ–ª–µ–π Gemini, –≤–∫–ª—é—á–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å gemini-2.0-flash-exp-image-generation.

import logging
import os
import asyncio
import signal
from urllib.parse import urljoin

import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import google.generativeai as genai

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('geminiwebhook')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "geminiwebhook")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = {
    'gemini-2.5-pro-exp-03-25': '2.5 Pro',
    'gemini-2.0-flash': '2.0 Flash',
    'gemini-2.0-flash-exp-image-generation': 'Image Gen'
}
DEFAULT_MODEL = 'gemini-2.5-pro-exp-03-25'

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_selected_model = {}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º–µ
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã." 
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤." 
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ." 
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤." 
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ: –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞." 
"–ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ." 
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞)." 
"–í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞." 
"–ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π." 
"–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞." 
"–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_selected_model[chat_id] = DEFAULT_MODEL
    await update.message.reply_text(
        f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ò–ò –æ—Ç Google - Gemini 2.5 Pro c Google-–ø–æ–∏—Å–∫–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ https://t.me/denisobovsyom"
        f"–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ø–∏—à–∏ /model –∏ –≤—ã–±–∏—Ä–∞–π 'Image Gen'."
    )

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ ' if m == current_model else ''}{name}", callback_data=m)]
        for m, name in AVAILABLE_MODELS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    selected = query.data
    if selected in AVAILABLE_MODELS:
        user_selected_model[chat_id] = selected
        await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {AVAILABLE_MODELS[selected]}")
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text.strip()
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {model_id}: {user_message}")

    try:
        model = genai.GenerativeModel(model_id)
        response = model.generate_content([{"role": "user", "parts": [{"text": user_message}]}])
        reply = response.text or "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."

    await update.message.reply_text(reply)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É
async def handle_image_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text.strip()
    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)

    if model_id != 'gemini-2.0-flash-exp-image-generation':
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    try:
        model = genai.GenerativeModel(model_id)
        response = model.generate_content([{"role": "user", "parts": [{"text": user_message}]}])
        image_data = response.candidates[0].content.parts[0].inline_data.data
        import base64
        image_bytes = base64.b64decode(image_data)
        await update.message.reply_photo(photo=image_bytes, caption="üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# –í–µ–±—Ö—É–∫: –ø–∏–Ω–≥
async def handle_ping(request: aiohttp.web.Request) -> aiohttp.web.Response:
    return aiohttp.web.Response(text="OK")

# –í–µ–±—Ö—É–∫: Telegram POST –∑–∞–ø—Ä–æ—Å
async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        asyncio.create_task(application.process_update(update))
        return aiohttp.web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return aiohttp.web.Response(status=500, text="Internal error")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def run_web_server(application: Application, stop_event: asyncio.Event):
    app = aiohttp.web.Application()
    app['bot_app'] = application
    app.router.add_get('/', handle_ping)
    app.router.add_post(f"/{GEMINI_WEBHOOK_PATH}", handle_telegram_webhook)

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()
    site = aiohttp.web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", "10000")))
    await site.start()
    await stop_event.wait()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫
async def setup_bot_and_server(stop_event: asyncio.Event):
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_image_prompt))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, GEMINI_WEBHOOK_PATH)
    await application.bot.set_webhook(webhook_url, drop_pending_updates=True)
    return application, run_web_server(application, stop_event)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    stop_event = asyncio.Event()

    try:
        application, web_server_task = loop.run_until_complete(setup_bot_and_server(stop_event))
        for s in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(s, lambda: stop_event.set())
        loop.run_until_complete(web_server_task)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    finally:
        loop.run_until_complete(application.shutdown())
        loop.close()
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
