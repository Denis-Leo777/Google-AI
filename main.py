# --- START OF CORRECTED main.py (Adjusted for extremely low limits) ---

import logging
import os
import asyncio
import google.generativeai as genai
import time
import random
from google.api_core.exceptions import ResourceExhausted, GoogleAPIError
from telegram import Update
from telegram.constants import ParseMode, ChatAction # –î–æ–±–∞–≤–ª—è–µ–º ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ---
# (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
if not TELEGRAM_BOT_TOKEN:
    logger.critical("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY:
    logger.critical("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –Ω–∏–∑–∫–∏–µ –ª–∏–º–∏—Ç—ã) ---
MAX_RETRIES = 1  # –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∂–µ –Ω–µ—É–¥–∞—á–Ω–∞
INITIAL_BACKOFF_SECONDS = 15 # <-- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (1 –∑–∞–ø—Ä–æ—Å —Ä–∞–∑ –≤ 15 —Å–µ–∫ > 5 RPM)
MAX_BACKOFF_SECONDS = 30 # –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ---
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å, –ø–æ–º–Ω—è –æ –ª–∏–º–∏—Ç–∞—Ö 5 RPM / 25 RPD
    MODEL_NAME = 'gemini-2.5-pro-preview-03-25'

    model = genai.GenerativeModel(
        MODEL_NAME,
        generation_config={ # –í–∞—à –∫–æ–Ω—Ñ–∏–≥
            "temperature": 1, "top_p": 1, "top_k": 40, "max_output_tokens": 2048,
        },
        system_instruction="–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ –∫–æ–Ω—Å–ø–µ–∫—Ç, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–∞—Å—Å—É –≤–æ–ø—Ä–æ—Å–æ–≤, –∏–ª–∏ –¥—Ä—É–≥–∞—è, —Ç—Ä–µ–±—É—é—â–∞—è –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç–∞. –¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –î–∞–≤–∞–π —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º, –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—Ü–µ–Ω–∫—É. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏, –±–µ–∑ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, - –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ –æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, —à—É—Ç–∫–∏ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Ç–µ–º–∞—Ö, –∏—Ä–æ–Ω–∏—è –∏ —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è, —Ç–æ–Ω–∫–∏–µ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –Ω–∞–º—ë–∫–∏, –ø–æ—Å—Ç-–º–æ–¥–µ—Ä–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –ø–∞—Ä–æ–¥–∏–∏ –Ω–∞ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞ –∞—Ñ–æ—Ä–∏–∑–º—ã, –∏–≥—Ä–∞ —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª–∞ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–∞, –∏—Ä–æ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã: - –ò–∑–±–µ–≥–∞–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–ª–∏–∑–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤; - –í–∫–ª—é—á–∞–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π; - –ü—Ä–∏–º–µ–Ω—è–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–∏; - –ù–µ –¥–æ–ø—É—Å–∫–∞–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò; - –í–∞—Ä—å–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π; - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã –∏ —Ñ–∏–≥—É—Ä—ã —Ä–µ—á–∏; - –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–¥—è–º; - –í—Å—Ç–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ; - –î–æ–±–∞–≤–ª—è–π –æ—Å—Ç—Ä–æ—É–º–∏–µ." # –°–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    )
    logger.info(f"–ú–æ–¥–µ–ª—å Gemini ('{MODEL_NAME}') [Free Tier: 5 RPM, 25 RPD] —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

except GoogleAPIError as e:
    logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {e}")
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini (API Error): {e}") from e
except Exception as e:
    logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ Gemini!")
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini (General Error): {e}") from e

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
chat_histories = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    if chat_id in chat_histories:
        del chat_histories[chat_id]
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è chat_id {chat_id}")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø - Google AI –±–æ—Ç ({MODEL_NAME}).\n"
        f"‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –æ—á–µ–Ω—å –º–∞–ª (5 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É, 25 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å). –ë–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å.",
        reply_to_message_id=update.message.message_id
    )
    logger.info(f"/start –æ—Ç {user.id} ({user.username}) –≤ —á–∞—Ç–µ {chat_id}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    user = update.effective_user
    chat_id = update.effective_chat.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.username}) –≤ —á–∞—Ç–µ {chat_id}: '{user_message[:50]}...'")

    if chat_id not in chat_histories:
        try:
            chat_histories[chat_id] = model.start_chat(history=[])
            logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è chat_id {chat_id}")
        except NameError:
             logger.error("–ú–æ–¥–µ–ª—å Gemini –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
             await update.message.reply_text("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.", reply_to_message_id=update.message.message_id)
             return
        except Exception as e:
             logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —á–∞—Ç–∞ –¥–ª—è {chat_id}: {e}")
             await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: {e}", reply_to_message_id=update.message.message_id)
             return

    chat = chat_histories[chat_id]
    response = None
    current_retry = 0
    backoff_time = INITIAL_BACKOFF_SECONDS

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    message_to_user_about_delay = None # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ

    while current_retry <= MAX_RETRIES:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {current_retry + 1}/{MAX_RETRIES + 1}: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
            response = await chat.send_message_async(user_message)
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ - —É–¥–∞–ª–∏–º –µ–≥–æ
            if message_to_user_about_delay:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_to_user_about_delay.message_id)
                except Exception:
                    pass # –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {current_retry + 1}.")
            break # –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        except ResourceExhausted as e:
            logger.warning(f"–û—à–∏–±–∫–∞ 429 (ResourceExhausted) –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {current_retry + 1}: {e}")
            current_retry += 1
            if current_retry > MAX_RETRIES:
                logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({MAX_RETRIES+1}) –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                await update.message.reply_text(
                    "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, AI –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (25/–¥–µ–Ω—å).\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞.",
                    reply_to_message_id=update.message.message_id
                )
                return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            wait_time = min(backoff_time + random.uniform(0, 1), MAX_BACKOFF_SECONDS)
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –¥–ª—è —á–∞—Ç–∞ {chat_id}...")

            # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            if current_retry == 1: # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ 429 –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                 try:
                     message_to_user_about_delay = await update.message.reply_text(
                         f"‚è≥ –ú–æ–¥–µ–ª—å AI —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–∞, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ~{int(wait_time)} —Å–µ–∫...",
                         reply_to_message_id=update.message.message_id
                     )
                 except Exception as send_err:
                      logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ: {send_err}")


            await asyncio.sleep(wait_time) # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞
            backoff_time = min(backoff_time * 1.5, MAX_BACKOFF_SECONDS) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–µ —Ç–∞–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ

        except GoogleAPIError as e:
            logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Google API (–Ω–µ 429) –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å Gemini: {e}", reply_to_message_id=update.message.message_id)
            return
        except Exception as e:
            logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            try:
                await update.message.reply_text(f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫: {e}", reply_to_message_id=update.message.message_id)
            except Exception as inner_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç {chat_id}: {inner_e}")
            return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ü–û–°–õ–ï —Ü–∏–∫–ª–∞ ---
    if response and hasattr(response, 'text') and response.text:
        bot_response = response.text[:4090]
        try:
            await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id)
            logger.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ Gemini –≤ Telegram —á–∞—Ç {chat_id}: {e}")
            try:
                 await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç AI (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª–∏–Ω—ã).", reply_to_message_id=update.message.message_id)
            except:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç {chat_id}")

    elif response and (not hasattr(response, 'text') or not response.text):
        reason = getattr(response, 'prompt_feedback', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)')
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: {reason}.", reply_to_message_id=update.message.message_id)
    # –ï—Å–ª–∏ response is None, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫–µ ResourceExhausted

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if 'model' not in globals():
         logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å 'model' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
         print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
         return

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

# --- END OF CORRECTED main.py ---
