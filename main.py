# --- START OF FULL CORRECTED main.py (Using google-genai package BUT google.generativeai module) ---

import logging
import os
import asyncio
# –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ú–û–î–£–õ–¨ google.generativeai, –∫–æ—Ç–æ—Ä—ã–π –°–¢–ê–í–ò–¢–°–Ø –ø–∞–∫–µ—Ç–æ–º google-genai
import google.generativeai as genai
# –¢–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ genai.types —Ç–µ–ø–µ—Ä—å
from google.generativeai import types as genai_types
import time
import random
from typing import Optional, Dict, Union, Any, Tuple, List
import urllib.parse

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—á–∞—Ç—å –≤–µ—Ä—Å–∏–∏
try: logger.info(f"!!!!!!!!!! –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è google-genai (–æ–∂–∏–¥–∞–µ—Ç—Å—è >=0.8): {genai.__version__} !!!!!!!!!!")
except Exception as e: logger.error(f"!!!!!!!!!! –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ genai: {e} !!!!!!!!!!")

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞)
try: from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
except ImportError: logger.warning("google.api_core.exceptions –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); ResourceExhausted=Exception; GoogleAPIError=Exception; FailedPrecondition=Exception

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Gemini —Ç–∏–ø—ã –¥–ª—è Struct (–ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ protos)
try: from google.protobuf.struct_pb2 import Struct
except ImportError: logger.warning("google.protobuf –Ω–µ –Ω–∞–π–¥–µ–Ω."); Struct = dict

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    '‚ö° Flash': 'models/gemini-1.5-flash-latest', # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ ID
    '‚ú® Pro 1.5': 'models/gemini-1.5-pro-latest',
    'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)': 'imagen-3.0-generate-002',
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–°–¢–†–û–ï–ù–ù–û–ì–û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search ---
google_search_tool = None; search_tool_type_used = None
try:
    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –≤ genai_types (–∏–∑ google.generativeai)
    if hasattr(genai_types, 'GoogleSearchRetrieval'): # –î–ª—è 1.5
         config = genai_types.GoogleSearchRetrieval()
         google_search_tool = genai_types.Tool(google_search_retrieval=config)
         search_tool_type_used = "GoogleSearchRetrieval (v1.5)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    elif hasattr(genai_types, 'GoogleSearch'): # –î–ª—è 2.0+
         config = genai_types.GoogleSearch()
         google_search_tool = genai_types.Tool(google_search=config)
         search_tool_type_used = "GoogleSearch (v2.0+)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    else: logger.error("!!! –ö–ª–∞—Å—Å—ã GoogleSearch/GoogleSearchRetrieval –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ genai_types.")
except Exception as e: logger.exception(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞: {e}")


# --- –ó–ê–ì–†–£–ó–ö–ê –∏ –ù–ê–°–¢–†–û–ô–ö–ê –ú–æ–¥–µ–ª–µ–π Gemini ---
LOADED_MODELS_ANY: Dict[str, Any] = {}; # –ò—Å–ø–æ–ª—å–∑—É–µ–º Any –¥–ª—è —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º genai.configure, –∫–∞–∫ –≤ –∫–≤–∏–∫—Å—Ç–∞—Ä—Ç–µ
    genai.configure(api_key=GOOGLE_API_KEY)
    logger.info("genai.configure –≤—ã–ø–æ–ª–Ω–µ–Ω.")

    system_instruction_text = ("...") # –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower(): logger.warning(f"'{alias}' –ø—Ä–æ–ø—É—â–µ–Ω–∞."); continue

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        current_tools = None; model_search_type = None
        if google_search_tool:
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –º–æ–¥–µ–ª–µ–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
             if '1.5' in model_id and search_tool_type_used == "GoogleSearchRetrieval (v1.5)":
                  current_tools = [google_search_tool]; model_search_type = search_tool_type_used
             elif ('2.0' in model_id or '2.5' in model_id) and search_tool_type_used == "GoogleSearch (v2.0+)":
                  current_tools = [google_search_tool]; model_search_type = search_tool_type_used
             else: logger.warning(f"–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è '{alias}'.")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º genai.GenerativeModel, –∫–∞–∫ –≤ –∫–≤–∏–∫—Å—Ç–∞—Ä—Ç–µ
            model = genai.GenerativeModel(
                model_name=model_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_name=
                system_instruction=system_instruction_text,
                tools=current_tools
                # generation_config –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∏–ª–∏ –≤ send_message
            )
            LOADED_MODELS_ANY[alias] = model
            logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search: {'Enabled ('+model_search_type+')' if current_tools else 'Disabled'}] –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e: logger.error(f"!!! –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ '{alias}': {e}")

    if not LOADED_MODELS_ANY: raise RuntimeError("–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π!")
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS_ANY:
        try: DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS_ANY)); logger.warning(f"–î–µ—Ñ–æ–ª—Ç: {DEFAULT_MODEL_ALIAS}")
        except StopIteration: raise RuntimeError("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π.")

except Exception as e: logger.exception("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!"); exit(...)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}; chat_histories: Dict[int, Any] = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞)
def extract_response_text(response) -> Optional[str]:
    try: return response.text
    except ValueError: logger.warning("ValueError text"); block_reason = getattr(...); ...; return None
    except AttributeError:
        logger.warning("–ù–µ—Ç .text, –ø—Ä–æ–±—É–µ–º parts.")
        try:
            if response.candidates and response.candidates[0].content.parts: parts_text = "".join(...); return parts_text if parts_text else None
            else: logger.warning("–ù–µ—Ç parts."); return None
        except Exception as e_inner: logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e_inner}"); return None

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
# start, select_model_command, select_model_callback (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é—Ç LOADED_MODELS_ANY)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ start) ...
    user = update.effective_user; chat_id = update.effective_chat.id; # ... (—Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è) ...
    if chat_id in user_selected_model: del user_selected_model[chat_id]; if chat_id in chat_histories: del chat_histories[chat_id]; logger.info(...)
    default_model_display_name = DEFAULT_MODEL_ALIAS; search_status = f"–≤–∫–ª—é—á–µ–Ω ({search_tool_type_used})" if google_search_tool else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await update.message.reply_html( f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! ... –ú–æ–¥–µ–ª—å: {default_model_display_name}... /model ... üîç –ü–æ–∏—Å–∫ Google {search_status}.", ...)

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ select_model_command) ...
    chat_id = update.effective_chat.id; current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS); keyboard = []
    for alias in LOADED_MODELS_ANY.keys(): keyboard.append(...)
    reply_markup = InlineKeyboardMarkup(keyboard); await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ:", ...)

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ select_model_callback —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º else) ...
    query = update.callback_query; await query.answer(); selected_alias = query.data; chat_id = query.message.chat_id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias not in LOADED_MODELS_ANY: await query.edit_message_text(...); return
    if selected_alias != current_alias:
        user_selected_model[chat_id] = selected_alias; logger.info(...)
        if chat_id in chat_histories: del chat_histories[chat_id]; logger.info(...)
        keyboard = [] # ... (—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏) ...
        reply_markup = InlineKeyboardMarkup(keyboard); await query.edit_message_text(...)
    else:
        try: await query.edit_message_reply_markup(...)
        except Exception as e: logger.warning(...); await context.bot.send_message(...)

# handle_message (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ genai.GenerativeModel –∏ ChatSession)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id; logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{user_message[:50]}...'")
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS); selected_model_object = LOADED_MODELS_ANY.get(selected_alias)
    if not selected_model_object: logger.error(...); await update.message.reply_text("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
    final_text: Optional[str] = None; search_suggestions: List[str] = []; error_message: Optional[str] = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º start_chat –æ—Ç genai.GenerativeModel
        if chat_id not in chat_histories:
            # –ü–µ—Ä–µ–¥–∞–µ–º tools —Ç—É—Ç? –ò–ª–∏ –æ–Ω–∏ —É–∂–µ –≤ –º–æ–¥–µ–ª–∏? –ü—Ä–æ–±—É–µ–º –ë–ï–ó.
            chat_histories[chat_id] = selected_model_object.start_chat(history=[])
            logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç {chat_id} —Å '{selected_alias}'")
        # chat_histories[chat_id] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ ChatSession
        current_chat_session = chat_histories[chat_id]
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å {selected_alias} (–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
        await context.bot.send_chat_action(...)

        # --- –ü–µ—Ä–µ–¥–∞—á–∞ generation_config –ø—Ä–∏ –≤—ã–∑–æ–≤–µ (–∫–∞–∫ –≤ –∫–≤–∏–∫—Å—Ç–∞—Ä—Ç–µ) ---
        generation_config = genai_types.GenerationConfig(
            temperature=0.8 if 'Flash' in selected_alias else 1,
            top_p=1,
            top_k=40,
            max_output_tokens=2048
            # tools=[google_search_tool] if google_search_tool else None # –ö–≤–∏–∫—Å—Ç–∞—Ä—Ç –¢–ê–ö –Ω–µ –¥–µ–ª–∞–ª –¥–ª—è —á–∞—Ç–∞...
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message_async –æ—Ç ChatSession
        # –ü–µ—Ä–µ–¥–∞–µ–º config —Å—é–¥–∞? –ò–ª–∏ tools? –ü—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–∏—Ö, —Ç.–∫. tools –∑–∞–¥–∞–Ω—ã –≤ –º–æ–¥–µ–ª–∏
        response = await current_chat_session.send_message_async(
            content=user_message
            # generation_config=generation_config # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Å—é–¥–∞
            )
        logger.info(f"[{selected_alias}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        final_text = extract_response_text(response)
        if final_text is None: raise ValueError(...) # –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ groundingMetadata (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞ –∂–µ)
        if response.candidates and hasattr(response.candidates[0], 'grounding_metadata') and response.candidates[0].grounding_metadata:
             metadata = response.candidates[0].grounding_metadata
             if hasattr(metadata, 'web_search_queries') and metadata.web_search_queries: search_suggestions = list(metadata.web_search_queries); logger.info(f"[{selected_alias}] !!!! –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {search_suggestions}")
             else: logger.info(f"[{selected_alias}] meta –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        else: logger.info(f"[{selected_alias}] –ù–ï–¢ grounding_metadata.")

    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π) ...
    except ResourceExhausted as e_limit: logger.warning(...); error_message = f"üòî '{selected_alias}' –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. /model"
    except FailedPrecondition as e_precondition: logger.error(...); error_message = f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è '{selected_alias}' —Å–±—Ä–æ—à–µ–Ω–∞."; if chat_id in chat_histories: del chat_histories[chat_id]
    except ValueError as e_blocked: logger.warning(...); error_message = f"‚ö†Ô∏è {e_blocked}"
    except (GoogleAPIError, Exception) as e_other: logger.exception(...); error_message = f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ '{selected_alias}': {e_other}"

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    # ... (–ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    reply_markup = None
    if search_suggestions: keyboard = []; # ... (—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞) ... ; if keyboard: reply_markup = InlineKeyboardMarkup(keyboard); logger.info(...)
    if final_text:
        bot_response = final_text[:4090]
        try: await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id, reply_markup=reply_markup); logger.info(...)
        except Exception as e: logger.exception(...); try: await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.", reply_to_message_id=update.message.message_id) except: pass
    elif error_message:
        try: await update.message.reply_text(error_message, reply_to_message_id=update.message.message_id); logger.info(...)
        except Exception as e: logger.error(...)
    else: logger.warning(...); if "–ò—Å—Ç–æ—Ä–∏—è" not in (...) and "–û—Ç–≤–µ—Ç" not in (...) : try: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.", reply_to_message_id=update.message.message_id) except: pass


# --- main ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not LOADED_MODELS_ANY: logger.critical("–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"); return
    if not google_search_tool: logger.warning(f"–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–∏–ø: {search_tool_type_used}).")
    else: logger.info(f"–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–∏–ø: {search_tool_type_used}).")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

# --- END OF FULL CORRECTED main.py ---
