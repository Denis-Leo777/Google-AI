# --- START OF REALLY x13 FULL CORRECTED main.py ---

import logging
import os
import asyncio
import google.genai as genai
import time
import random

# –ò–º–ø–æ—Ä—Ç types (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
try:
    from google.genai import types as genai_types
    print("INFO: –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω types –∏–∑ google.genai")
except ImportError:
    print("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å types –∏–∑ google.genai.")
    class DummyTypes: pass
    genai_types = DummyTypes()
except NameError:
    print("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å types –∏–∑ google.genai (NameError).")
    class DummyTypes: pass
    genai_types = DummyTypes()

from typing import Optional, Dict, Union, Any, Tuple, List
import urllib.parse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—á–∞—Ç—å –≤–µ—Ä—Å–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
try: logger.info(f"!!!!!!!!!! –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è google-genai: {genai.__version__} !!!!!!!!!!")
except Exception as e: logger.error(f"!!!!!!!!!! –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ google-genai: {e} !!!!!!!!!!")

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ google-api-core)
try:
    from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
    logger.info("–ò—Å–∫–ª—é—á–µ–Ω–∏—è google.api_core.exceptions —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
except ImportError:
    logger.warning("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å google.api_core.exceptions. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π Exception.")
    ResourceExhausted=Exception; GoogleAPIError=Exception; FailedPrecondition=Exception

# Telegram (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Protobuf Struct (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ protobuf)
try:
    from google.protobuf.struct_pb2 import Struct
    logger.info("google.protobuf.struct_pb2.Struct —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError:
    logger.warning("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å google.protobuf. –ò—Å–ø–æ–ª—å–∑—É–µ–º dict –≤–º–µ—Å—Ç–æ Struct.")
    Struct = dict

# –¢–æ–∫–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    logger.info("Google API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –≤ google.genai.")
except Exception as e:
    logger.exception("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google API –∫–ª—é—á–∞!")
    exit("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google API –∫–ª—é—á–∞.")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô --- –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    '‚ö° Flash 2.0': 'models/gemini-2.0-flash-001',
    '‚ú® Pro 2.5': 'models/gemini-2.5-pro-exp-03-25',
    'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)': 'models/imagen-3.0-generate-002', # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –Ω–æ –Ω–µ –≥—Ä—É–∑–∏–º
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash 2.0' # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–°–¢–†–û–ï–ù–ù–û–ì–û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search --- (–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
google_search_tool = None
search_tool_type_used = None
try:
    if hasattr(genai_types, 'GoogleSearchRetrieval'):
         google_search_retrieval_config = genai_types.GoogleSearchRetrieval()
         google_search_tool = genai_types.Tool(google_search_retrieval=google_search_retrieval_config)
         search_tool_type_used = "GoogleSearchRetrieval (v1.5)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è GoogleSearch –Ω–∞ –±—É–¥—É—â–µ–µ
    # elif hasattr(genai_types, 'GoogleSearch'):
    #      google_search_config = genai_types.GoogleSearch()
    #      google_search_tool = genai_types.Tool(google_search=google_search_config)
    #      search_tool_type_used = "GoogleSearch (v2.0+)"
    #      logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    else:
         logger.warning("!!! –ö–ª–∞—Å—Å—ã GoogleSearch/GoogleSearchRetrieval –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ genai_types. –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
except Exception as e:
    logger.exception(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞: {e}")
    google_search_tool = None

# --- –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ï–ô --- –£–¢–û–ß–ù–ï–ù–ê –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
LOADED_MODELS_ANY: Dict[str, Any] = {}
try:
    system_instruction_text = (
        # –¢–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        "–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤... –ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ google_search –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    )

    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower():
            logger.warning(f"–ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π '{alias}' ({model_id}) –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.")
            continue

        # –£–¢–û–ß–ù–ï–ù–û: –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –í–°–ï–ú –º–æ–¥–µ–ª—è–º
        current_tools = [google_search_tool] if google_search_tool else None
        tool_attempt_info = f"—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º '{search_tool_type_used}'" if current_tools else "–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{alias}' ({model_id}) {tool_attempt_info}...")

        try:
            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º (–µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω) –∏–ª–∏ –±–µ–∑ (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
            model = genai.GenerativeModel(
                model_name=model_id,
                system_instruction=system_instruction_text,
                tools=current_tools # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–∏–ª–∏ None)
            )
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª–æ–≥–∞
            search_status = "N/A" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if current_tools:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª–∞ –ª–∏ –º–æ–¥–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (—ç—Ç–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞, –Ω–µ 100% –≥–∞—Ä–∞–Ω—Ç–∏—è)
                # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ google-genai –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
                # –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç.
                search_status = f"Enabled ({search_tool_type_used})"
            else:
                search_status = "Disabled (not available)"

            LOADED_MODELS_ANY[alias] = model
            logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search: {search_status}] —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

        except (ValueError, FailedPrecondition, GoogleAPIError, Exception) as e:
            logger.error(f"!!! –û–®–ò–ë–ö–ê –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{alias}' ({model_id}) {tool_attempt_info}: {e}")

            # –£–¢–û–ß–ù–ï–ù–û: –ó–∞–ø–∞—Å–Ω–æ–π –ø–ª–∞–Ω - –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ü–†–ò –ü–û–ü–´–¢–ö–ï —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
            if current_tools and isinstance(e, (ValueError, FailedPrecondition, GoogleAPIError)): # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                 logger.warning(f"–ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å '{alias}' ({model_id}) –ë–ï–ó –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
                 try:
                     model = genai.GenerativeModel(
                         model_name=model_id,
                         system_instruction=system_instruction_text,
                         tools=None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º None
                     )
                     LOADED_MODELS_ANY[alias] = model
                     # –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ Disabled
                     logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search: Disabled (fallback)] —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞).")
                 except Exception as e_fallback:
                      # –ï—Å–ª–∏ –∏ –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                      logger.error(f"!!! –û–®–ò–ë–ö–ê –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{alias}' ({model_id}) –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e_fallback}")
                      logger.error(f"–ú–æ–¥–µ–ª—å '{alias}' –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            else:
                 # –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∏–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∏–ª–∏ —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥—Ä—É–≥–æ–π
                 logger.error(f"–ú–æ–¥–µ–ª—å '{alias}' –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ (–±–µ–∑ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞).")


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not LOADED_MODELS_ANY:
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        raise RuntimeError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞!")

    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS_ANY:
        try:
            DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS_ANY))
            logger.warning(f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{DEFAULT_MODEL_ALIAS}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞/–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è: '{DEFAULT_MODEL_ALIAS}'")
        except StopIteration:
            logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            raise RuntimeError("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã.")

except Exception as e:
    logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π!")
    # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º exit, –¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ main

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --- (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
user_selected_model: Dict[int, str] = {}
chat_histories: Dict[int, Any] = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ --- (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def extract_response_text(response) -> Optional[str]:
    # ... (—Ç–∞ –∂–µ —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã."""
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
        return response.text
    except ValueError:
        # –ß–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        logger.warning("ValueError –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ text (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç).")
        block_reason = None
        finish_reason = None
        safety_ratings = None

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏—á–∏–Ω–µ
        if hasattr(response, 'prompt_feedback') and response.prompt_feedback:
             block_reason = getattr(response.prompt_feedback, 'block_reason', None)
             safety_ratings = getattr(response.prompt_feedback, 'safety_ratings', None)
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º .name –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ enum
             block_reason_name = getattr(block_reason, 'name', block_reason)
             logger.warning(f"Prompt Feedback: Block Reason: {block_reason_name}, Safety Ratings: {safety_ratings}")

        # –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ API –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        if hasattr(response, 'candidates') and response.candidates:
            try:
                candidate = response.candidates[0]
                finish_reason = getattr(candidate, 'finish_reason', None)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º safety_ratings –∏ –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
                safety_ratings_candidate = getattr(candidate, 'safety_ratings', None)
                if safety_ratings_candidate: safety_ratings = safety_ratings_candidate # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—É—Ç

                # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_parts = []
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º .name –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ Enum, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                block_reason_name = getattr(block_reason, 'name', block_reason)
                finish_reason_name = getattr(finish_reason, 'name', finish_reason)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ UNSPECIFIED –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                if block_reason and block_reason != genai_types.BlockReason.BLOCK_REASON_UNSPECIFIED:
                    error_parts.append(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {block_reason_name}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ UNSPECIFIED –∏ –Ω–µ STOP (—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
                if finish_reason and finish_reason != genai_types.FinishReason.FINISH_REASON_UNSPECIFIED and finish_reason != genai_types.FinishReason.STOP:
                     error_parts.append(f"–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {finish_reason_name}")

                if safety_ratings:
                     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ (NEGLIGIBLE, HARM_PROBABILITY_UNSPECIFIED)
                     relevant_ratings = [f"{r.category.name}: {r.probability.name}"
                                         for r in safety_ratings if hasattr(r, 'probability') and r.probability not in (genai_types.HarmProbability.NEGLIGIBLE, genai_types.HarmProbability.HARM_PROBABILITY_UNSPECIFIED)]
                     if relevant_ratings:
                         error_parts.append(f"–§–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {', '.join(relevant_ratings)}")

                if error_parts:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–∏—á–∏–Ω–∞: {'. '.join(error_parts)}."
                else: # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
                     logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/–æ—à–∏–±–∫–∏ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ.")
                     return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç

            except (IndexError, AttributeError) as e_inner:
                 logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ candidates –¥–ª—è –¥–µ—Ç–∞–ª–µ–π ValueError: {e_inner}")
                 return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None

        else: # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ prompt_feedback, –Ω–∏ candidates
             logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –Ω–µ—Ç prompt_feedback –∏ candidates –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
             return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None

    except AttributeError:
        # –ï—Å–ª–∏ —É –æ—Ç–≤–µ—Ç–∞ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ .text
        logger.warning("–û—Ç–≤–µ—Ç –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ .text. –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ parts.")
        try:
            if response.candidates and response.candidates[0].content and response.candidates[0].content.parts:
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
                parts_text = "".join(p.text for p in response.candidates[0].content.parts if hasattr(p, 'text'))
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
                return parts_text.strip() if parts_text and parts_text.strip() else None
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ candidates –∏–ª–∏ parts –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
                return None
        except (AttributeError, IndexError, Exception) as e_inner:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ parts: {e_inner}")
            return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM --- (start, select_model_command, select_model_callback, handle_message –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... (–≤–µ—Å—å –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ...
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ start) ...
    pass # Placeholder

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ select_model_command) ...
    pass # Placeholder

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ select_model_callback) ...
    pass # Placeholder

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ handle_message) ...
    pass # Placeholder


# --- main --- (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def main() -> None:
    # ... (–∫–æ–¥ main) ...
    pass # Placeholder

if __name__ == '__main__':
    # ... (–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ main) ...
    pass # Placeholder

# --- END OF REALLY x13 FULL CORRECTED main.py ---
