# --- START OF FULL CORRECTED main.py (Adapting to google-genai Client pattern) ---

import logging
import os
import asyncio
# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢
import google.genai as genai
import time
import random
from typing import Optional, Dict, Union, Any, List
import urllib.parse

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—á–∞—Ç—å –≤–µ—Ä—Å–∏–∏
try: logger.info(f"!!!!!!!!!! –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è google-genai: {genai.__version__} !!!!!!!!!!")
except Exception as e: logger.error(f"!!!!!!!!!! –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ google-genai: {e} !!!!!!!!!!")

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python, —Ç.–∫. google.api_core –Ω–µ—Ç)
ResourceExhausted=Exception
GoogleAPIError=Exception
FailedPrecondition=Exception

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç protobuf, —Ç.–∫. –Ω–µ –∑–Ω–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ–Ω
# from google.protobuf.struct_pb2 import Struct

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ ID –º–æ–¥–µ–ª–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç google-genai.
    # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã 'models/'
    '‚ö° Flash 2.0': 'models/gemini-2.0-flash-001', # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ID –¥–ª—è 1.5 Flash
    '‚ú® Pro 2.5': 'models/gemini-2.5-pro-exp-03-25',   # –î–æ–±–∞–≤–∏–º 1.5 Pro
    # 'üß† Pro Exp': 'gemini-2.5-pro-exp-03-25', # –≠—Ç–æ—Ç ID –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º SDK
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash 2.0'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–°–¢–†–û–ï–ù–ù–û–ì–û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search ---
# –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: –í google-genai –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ—â–µ
google_search_tool = None
search_tool_type_used = None
try:
    # –ü—Ä–æ–±—É–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ API —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ generation_config –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ send_message_async
    # –û—Å—Ç–∞–≤–∏–º google_search_tool = None –ø–æ–∫–∞, –Ω–æ –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∑–∂–µ
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)...")
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if hasattr(genai.types, 'Tool') and hasattr(genai.types, 'GoogleSearchRetrieval'): # –ü—Ä–æ–±—É–µ–º 1.5 —Å—Ç–∏–ª—å
         google_search_retrieval_config = genai.types.GoogleSearchRetrieval()
         google_search_tool = genai.types.Tool(google_search_retrieval=google_search_retrieval_config)
         search_tool_type_used = "GoogleSearchRetrieval (v1.5 style)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    elif hasattr(genai.types, 'Tool') and hasattr(genai.types, 'GoogleSearch'): # –ü—Ä–æ–±—É–µ–º 2.0 —Å—Ç–∏–ª—å
         google_search_config = genai.types.GoogleSearch()
         google_search_tool = genai.types.Tool(google_search=google_search_config)
         search_tool_type_used = "GoogleSearch (v2.0+ style)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ genai.types.")

except NameError:
    logger.warning("–ú–æ–¥—É–ª—å genai.types –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ Tool.")
except Exception as e:
    logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞: {e}")


# --- –°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –∏ –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ï–ô ---
LOADED_MODELS: Dict[str, genai.GenerativeModel] = {} # –¢–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º! –ò—Å–ø—Ä–∞–≤–∏–º –Ω–∞ Any
LOADED_MODELS_ANY: Dict[str, Any] = {}
gemini_client = None
try:
    # –£–ë–ò–†–ê–ï–ú genai.configure
    # –°–û–ó–î–ê–ï–ú –ö–õ–ò–ï–ù–¢ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è)
    gemini_client = genai.Client()
    logger.info("–ö–ª–∏–µ–Ω—Ç google.genai —Å–æ–∑–¥–∞–Ω.")

    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π... –æ—Å—Ç—Ä–æ—É–º–∏–µ. "
        "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫." # –£–ø—Ä–æ—Å—Ç–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    )
    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower(): logger.warning(f"'{alias}' –ø—Ä–æ–ø—É—â–µ–Ω–∞."); continue
        try:
            # –ü–û–õ–£–ß–ê–ï–ú –ú–û–î–ï–õ–¨ –ß–ï–†–ï–ó –ö–õ–ò–ï–ù–¢
            # –í–æ–∑–º–æ–∂–Ω–æ, system_instruction –∏ tools –∑–∞–¥–∞—é—Ç—Å—è –∑–¥–µ—Å—å, –∏–ª–∏ –ø—Ä–∏ generate_content
            model = gemini_client.get_generative_model(
                model=model_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä model=
                # system_instruction=system_instruction_text # –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫?
                # tools=[google_search_tool] if google_search_tool else None # –ò–ª–∏ —Ç–∞–∫?
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
            LOADED_MODELS_ANY[alias] = model
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            model_search_tool = None
            if google_search_tool:
                 # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –≠–¢–û–ô –º–æ–¥–µ–ª–∏ (1.5 –∏–ª–∏ 2.0)
                 # –ü–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ
                 model_search_tool = google_search_tool
                 logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search tool: {search_tool_type_used if model_search_tool else 'None'}] –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç.")
            else:
                 logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search tool: Disabled] –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç.")

        except Exception as e: logger.error(f"!!! –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ '{alias}' —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç: {e}")

    if not LOADED_MODELS_ANY: raise RuntimeError("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç!")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS_ANY:
        try: DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS_ANY)); logger.warning(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è: {DEFAULT_MODEL_ALIAS}")
        except StopIteration: raise RuntimeError("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π.")

except Exception as e: logger.exception("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞/–º–æ–¥–µ–ª–µ–π!"); exit(...)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}
chat_histories: Dict[int, Any] = {} # –ò—Å–ø–æ–ª—å–∑—É–µ–º Any, —Ç.–∫. –Ω–µ –∑–Ω–∞–µ–º —Ç–∏–ø ChatSession

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
# –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
def extract_response_text(response) -> Optional[str]:
    try: return response.text
    except: logger.warning("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è .text"); try: return "".join(p.text for p in response.candidates[0].content.parts if hasattr(p, 'text')) if response.candidates and response.candidates[0].content.parts else None; except: return None

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–∏–ø–µ –ø–æ–∏—Å–∫–∞)
    user = update.effective_user; chat_id = update.effective_chat.id
    if chat_id in user_selected_model: del user_selected_model[chat_id]
    if chat_id in chat_histories: del chat_histories[chat_id]
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ")
    default_model_display_name = DEFAULT_MODEL_ALIAS
    search_status = "–ø–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è" if search_tool_type_used else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await update.message.reply_html( f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! ... –ú–æ–¥–µ–ª—å: {default_model_display_name}... /model ... üîç –ü–æ–∏—Å–∫ Google {search_status}.", reply_to_message_id=update.message.message_id)
    logger.info(f"/start –æ—Ç {user.id}")

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–ò—Å–ø–æ–ª—å–∑—É–µ–º LOADED_MODELS_ANY)
    chat_id = update.effective_chat.id; current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    keyboard = []; imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
    for alias in LOADED_MODELS_ANY.keys(): keyboard.append(...) # –°—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏
    if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS_ANY: keyboard.append(...) # –ò–Ω—Ñ–æ Imagen
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # (–ò—Å–ø–æ–ª—å–∑—É–µ–º LOADED_MODELS_ANY, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω else)
    query = update.callback_query; await query.answer(); selected_alias = query.data; chat_id = query.message.chat_id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias == "imagen_info": await context.bot.send_message(...); return
    if selected_alias not in LOADED_MODELS_ANY: await query.edit_message_text(...); return
    if selected_alias != current_alias:
        user_selected_model[chat_id] = selected_alias; logger.info(...)
        if chat_id in chat_histories: del chat_histories[chat_id]; logger.info(...)
        keyboard = []; imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)' # –°—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏
        for alias in LOADED_MODELS_ANY.keys(): keyboard.append(...)
        if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS_ANY: keyboard.append(...)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(...)
    else:
        try: await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
        except Exception as e: logger.warning(...); await context.bot.send_message(...)

# handle_message (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Client –∏ –≤–æ–∑–º–æ–∂–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É tools)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{user_message[:50]}...'")
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    selected_model_object = LOADED_MODELS_ANY.get(selected_alias)
    if not selected_model_object: logger.error(...); await update.message.reply_text("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return

    final_text: Optional[str] = None; search_suggestions: List[str] = []; error_message: Optional[str] = None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
        # –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: –º–µ—Ç–æ–¥ start_chat —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –º–æ–¥–µ–ª–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
        if chat_id not in chat_histories:
            chat_histories[chat_id] = selected_model_object.start_chat(history=[])
            logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç {chat_id} —Å '{selected_alias}'")
        current_chat_session = chat_histories[chat_id]

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å {selected_alias} (–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
        await context.bot.send_chat_action(...)

        # --- –ü–ï–†–ï–î–ê–ß–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –ü–†–ò –í–´–ó–û–í–ï ---
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞—Ç—å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π
        tools_to_pass = [google_search_tool] if google_search_tool else None

        # –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: send_message_async –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä tools
        response = await current_chat_session.send_message_async(
            content=user_message,
            tools=tools_to_pass # <--- –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–¥–µ—Å—å
            # –ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ generation_config?
            # generation_config=genai.types.GenerationConfig(tools=tools_to_pass) # –ü—Ä–∏–º–µ—Ä
        )
        logger.info(f"[{selected_alias}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞...")

        final_text = extract_response_text(response)
        if final_text is None: raise ValueError(...) # –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ groundingMetadata
        if response.candidates and hasattr(response.candidates[0], 'grounding_metadata') and response.candidates[0].grounding_metadata:
             metadata = response.candidates[0].grounding_metadata
             if hasattr(metadata, 'web_search_queries') and metadata.web_search_queries:
                  search_suggestions = list(metadata.web_search_queries); logger.info(f"[{selected_alias}] !!!! –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {search_suggestions}")
             else: logger.info(f"[{selected_alias}] meta –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        else: logger.info(f"[{selected_alias}] –ù–ï–¢ grounding_metadata.")

    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π) ...
    except ResourceExhausted as e_limit: logger.warning(...); error_message = f"üòî '{selected_alias}' –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. /model"
    except FailedPrecondition as e_precondition: logger.error(...); error_message = f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è '{selected_alias}' —Å–±—Ä–æ—à–µ–Ω–∞."; if chat_id in chat_histories: del chat_histories[chat_id]
    except ValueError as e_blocked: logger.warning(...); error_message = f"‚ö†Ô∏è {e_blocked}"
    except AttributeError as e_attr: logger.exception(f"!!! –û—à–∏–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ handle_message (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ google-genai?): {e_attr}"); error_message = f"–û—à–∏–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ –∫–æ–¥–µ: {e_attr}"
    except Exception as e_other: logger.exception(...); error_message = f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ '{selected_alias}': {e_other}"

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    reply_markup = None
    if search_suggestions: keyboard = []; # ... (–∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞) ... ; if keyboard: reply_markup = InlineKeyboardMarkup(keyboard); logger.info(...)
    if final_text:
        bot_response = final_text[:4090]
        try: await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id, reply_markup=reply_markup); logger.info(...)
        except Exception as e: logger.exception(...); try: await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.", reply_to_message_id=update.message.message_id) except: pass
    elif error_message:
        try: await update.message.reply_text(error_message, reply_to_message_id=update.message.message_id); logger.info(...)
        except Exception as e: logger.error(...)
    else: logger.warning(...); if "–ò—Å—Ç–æ—Ä–∏—è" not in (...) and "–û—Ç–≤–µ—Ç" not in (...) : try: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.", reply_to_message_id=update.message.message_id) except: pass

# --- main ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not LOADED_MODELS_ANY: logger.critical("–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"); return
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ –±–ª–æ–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

# --- END OF FULL CORRECTED main.py ---
