# --- START OF FILE main.txt ---

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main.py:
# - –î–æ–±–∞–≤–ª–µ–Ω Google Custom Search API –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
# - DuckDuckGo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ DDG: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ddgs.text() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ asyncio.to_thread()

import logging
import os
import asyncio # –ù—É–∂–Ω–æ –¥–ª—è asyncio.to_thread
import signal
from urllib.parse import urljoin, urlencode # –î–æ–±–∞–≤–ª–µ–Ω urlencode
import base64
import pytesseract
from PIL import Image
import io
import pprint
import json # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Google

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º aiohttp –¥–ª—è Google Search =====
import aiohttp
# ===========================================================
import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import google.generativeai as genai
# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç DDGS =====
from duckduckgo_search import DDGS # –û–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å
from google.generativeai.types import HarmCategory, HarmBlockThreshold
# ============================================

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY') # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Gemini –∏ Google Search
# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Search Engine ID =====
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID')
# ============================================================
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')

for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (GOOGLE_CSE_ID, "GOOGLE_CSE_ID"), # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é =====
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

# –ú–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    'gemini-2.0-flash-thinking-exp-01-21': '2.0 Flash Thinking (Exp)',
    'gemini-2.5-pro-preview-03-25': '2.5 Pro Preview',
    'gemini-2.5-pro-exp-03-25': '2.5 Pro (Exp)',
    'gemini-2.0-flash-001': '2.0 Flash',
}
DEFAULT_MODEL = 'gemini-2.0-flash-thinking-exp-01-21'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_enabled = {}
user_selected_model = {}
user_temperature = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_CONTEXT_CHARS = 95000
MAX_OUTPUT_TOKENS = 3000
DDG_MAX_RESULTS = 5 # –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å, —Ç.–∫. —ç—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
GOOGLE_SEARCH_MAX_RESULTS = 5 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Google

# –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)

SAFETY_SETTINGS_BLOCK_NONE = [
    {
        "category": HarmCategory.HARM_CATEGORY_HARASSMENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
]

# –ö–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_selected_model[chat_id] = DEFAULT_MODEL
    user_search_enabled[chat_id] = True
    user_temperature[chat_id] = 1.0
    default_model_name = AVAILABLE_MODELS.get(DEFAULT_MODEL, DEFAULT_MODEL)
    start_message = (
        f"**{default_model_name}**."
        f"\n + –ø–æ–∏—Å–∫ Google (–æ—Å–Ω–æ–≤–Ω–æ–π) / DuckDuckGo (–∑–∞–ø–∞—Å–Ω–æ–π), —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR) –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤." # –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        "\n/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"
        "\n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        "\n/search_on  /search_off ‚Äî –≤–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫"
        "\n/temp X.Y ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (0.0-2.0)" # –î–æ–±–∞–≤–∏–ª –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è temp
    )
    await update.message.reply_text(start_message, parse_mode='Markdown')

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['history'] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        temp = float(context.args[0])
        if not (0 <= temp <= 2):
            raise ValueError
        user_temperature[chat_id] = temp
        await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0")

async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = True
    await update.message.reply_text("üîç –ü–æ–∏—Å–∫ Google/DDG –≤–∫–ª—é—á—ë–Ω.") # –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = False
    await update.message.reply_text("üîá –ü–æ–∏—Å–∫ Google/DDG –æ—Ç–∫–ª—é—á—ë–Ω.") # –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    keyboard = []
    for m, name in AVAILABLE_MODELS.items():
         button_text = f"{'‚úÖ ' if m == current_model else ''}{name}"
         keyboard.append([InlineKeyboardButton(button_text, callback_data=m)])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    selected = query.data
    if selected in AVAILABLE_MODELS:
        user_selected_model[chat_id] = selected
        model_name = AVAILABLE_MODELS[selected]
        reply_text = f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{model_name}**"
        await query.edit_message_text(reply_text, parse_mode='Markdown')
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ Google =====
async def perform_google_search(query: str, api_key: str, cse_id: str, num_results: int) -> list[str] | None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Custom Search API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤."""
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        'key': api_key,
        'cx': cse_id,
        'q': query,
        'num': num_results
        # 'lr': 'lang_ru' # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # 'gl': 'ru'      # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É
    }
    encoded_params = urlencode(params)
    full_url = f"{search_url}?{encoded_params}"
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ Google Search API: {search_url}?key=...&cx=...&q={query}&num={num_results}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(full_url) as response:
                if response.status == 200:
                    data = await response.json()
                    items = data.get('items', [])
                    snippets = [item.get('snippet', '') for item in items if item.get('snippet')]
                    if snippets:
                        logger.info(f"Google Search: –ù–∞–π–¥–µ–Ω–æ {len(snippets)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                        return snippets
                    else:
                        logger.info("Google Search: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
                        return None # –ò–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ []? –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å DDG
                elif response.status == 429:
                    logger.warning(f"Google Search: –û—à–∏–±–∫–∞ 429 - –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞!")
                    return None
                elif response.status == 403:
                     logger.error(f"Google Search: –û—à–∏–±–∫–∞ 403 - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–µ–Ω –ª–∏ Custom Search API.")
                     return None
                else:
                    error_text = await response.text()
                    logger.error(f"Google Search: –û—à–∏–±–∫–∞ API - –°—Ç–∞—Ç—É—Å {response.status}, –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                    return None
    except aiohttp.ClientError as e:
        logger.error(f"Google Search: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ - {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"Google Search: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ - {e}")
        return None
    except Exception as e:
        logger.error(f"Google Search: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}", exc_info=True)
        return None
# ===============================================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    original_user_message = update.message.text.strip() if update.message.text else "" # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None
    if not original_user_message:
        return

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)
    use_search = user_search_enabled.get(chat_id, True)

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    search_context = ""
    final_user_prompt = original_user_message
    search_provider = None # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –∫–∞–∫–æ–π –ø–æ–∏—Å–∫ —Å—Ä–∞–±–æ—Ç–∞–ª

    if use_search:
        logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω. –ó–∞–ø—Ä–æ—Å: '{original_user_message[:50]}...'")

        # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google Search =====
        google_results = await perform_google_search(
            original_user_message, GOOGLE_API_KEY, GOOGLE_CSE_ID, GOOGLE_SEARCH_MAX_RESULTS
        )

        if google_results:
            search_provider = "Google"
            search_snippets = [f"- {snippet}" for snippet in google_results]
            search_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ {search_provider}:\n" + "\n".join(search_snippets)
            logger.info(f"ChatID: {chat_id} | –ù–∞–π–¥–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google: {len(search_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
        else:
            logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ Google –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–±—É–µ–º DuckDuckGo...")
            # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º DDG =====
            try:
                ddgs = DDGS()
                logger.debug(f"ChatID: {chat_id} | –ó–∞–ø—Ä–æ—Å –∫ DDGS().text('{original_user_message}', region='ru-ru', max_results={DDG_MAX_RESULTS}) —á–µ—Ä–µ–∑ asyncio.to_thread")
                results = await asyncio.to_thread(
                    ddgs.text,
                    original_user_message,
                    region='ru-ru',
                    max_results=DDG_MAX_RESULTS
                )
                logger.debug(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG:\n{pprint.pformat(results)}")

                if results:
                    search_snippets = [f"- {r.get('body', '')}" for r in results if r.get('body')]
                    if search_snippets:
                        search_provider = "DuckDuckGo (–∑–∞–ø–∞—Å–Ω–æ–π)"
                        search_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ {search_provider}:\n" + "\n".join(search_snippets)
                        logger.info(f"ChatID: {chat_id} | –ù–∞–π–¥–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG: {len(search_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
                    else:
                        logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–∞ (body).")
                else:
                    logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            except Exception as e_ddg:
                logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo: {e_ddg}", exc_info=True)
        # ========================================================

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –õ–Æ–ë–û–ì–û –ø–æ–∏—Å–∫–∞
        if search_context:
            final_user_prompt = (
                f"{search_context}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"\"{original_user_message}\""
            )
    else:
        logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")

    logger.debug(f"ChatID: {chat_id} | –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini:\n{final_user_prompt}")
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–π –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è =====
    search_log_msg = f"–ü–æ–∏—Å–∫: {'–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (' + search_provider + ')' if search_provider else ('–ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω' if use_search else '–û—Ç–∫–ª—é—á–µ–Ω')}"
    logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, {search_log_msg}")
    # =======================================================

    chat_history = context.chat_data.setdefault("history", [])
    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –µ—ë
    chat_history.append({"role": "user", "parts": [{"text": original_user_message}]})

    # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
    while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1:
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É USER+MODEL, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
        if len(chat_history) >= 2:
            removed_user = chat_history.pop(0)
            removed_model = chat_history.pop(0)
            logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)}")
        else: # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            removed_message = chat_history.pop(0)
            logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed_message.get('role')}, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
        logger.info(f"ChatID: {chat_id} | ... –Ω–æ–≤–∞—è –æ–±—â–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")


    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –±–µ–∑), –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —á–∏—Å—Ç–æ–π =====
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ–ª–∏
    history_for_model = list(chat_history[:-1]) # –ë–µ—Ä–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history_for_model.append({"role": "user", "parts": [{"text": final_user_prompt}]}) # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    # =========================================================================================================

    current_system_instruction = system_instruction_text
    tools = []
    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=current_system_instruction
        )
        # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º history_for_model =====
        response = model.generate_content(history_for_model)
        # ===============================================

        reply = response.text
        if not reply:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason = feedback.block_reason if feedback else 'N/A'
                finish_reason_val = candidates_info[0].finish_reason if candidates_info else 'N/A'
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason and block_reason != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason})"
                else:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
            except AttributeError:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError).")
                 reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
            except Exception as e_inner:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}")
                reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."

        # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –û–°–ù–û–í–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é =====
        if reply:
             chat_history.append({"role": "model", "parts": [{"text": reply}]})
        # =============================================================

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é {model_id}")
        error_message = str(e)
        try:
            if isinstance(e, genai.types.BlockedPromptException):
                 reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif isinstance(e, genai.types.StopCandidateException):
                 reply = f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message): # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ Exhausted
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            elif "400" in error_message and "API key not valid" in error_message:
                 reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
            elif "Deadline Exceeded" in error_message or "504" in error_message: # –î–æ–±–∞–≤–∏–ª 504
                 reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
            else:
                 reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"
        except AttributeError:
             logger.warning("genai.types –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BlockedPromptException/StopCandidateException, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
             if "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             elif "400" in error_message and "API key not valid" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
             elif "Deadline Exceeded" in error_message or "504" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
             else:
                  reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"

    if reply:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (Telegram –ª–∏–º–∏—Ç 4096)
        MAX_MESSAGE_LENGTH = 4096
        for i in range(0, len(reply), MAX_MESSAGE_LENGTH):
            await update.message.reply_text(reply[i:i + MAX_MESSAGE_LENGTH])


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handle_photo, handle_document) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tesseract_available = False
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã tesseract
        pytesseract.pytesseract.get_tesseract_version()
        tesseract_available = True
        logger.info("Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏, –µ—Å–ª–∏ get_tesseract_version –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        common_paths = ['tesseract', '/usr/bin/tesseract', '/usr/local/bin/tesseract']
        found = False
        for path in common_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                pytesseract.pytesseract.tesseract_cmd = path
                try:
                    pytesseract.pytesseract.get_tesseract_version()
                    tesseract_available = True
                    logger.info(f"Tesseract –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
                    found = True
                    break
                except Exception:
                    continue # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
        if not found:
            logger.error(f"Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π. –û—à–∏–±–∫–∞: {e}. OCR –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
    try:
        photo_file = await update.message.photo[-1].get_file()
        file_bytes = await photo_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    user_caption = update.message.caption if update.message.caption else ""

    if tesseract_available:
        try:
            image = Image.open(io.BytesIO(file_bytes))
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            extracted_text = pytesseract.image_to_string(image, lang='rus+eng')
            if extracted_text and extracted_text.strip():
                logger.info(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (OCR)")
                ocr_prompt = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n```\n{extracted_text.strip()}\n```\n"
                if user_caption:
                     user_prompt = f"{user_caption}\n{ocr_prompt}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º, —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
                else:
                     user_prompt = f"{ocr_prompt}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º."

                # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" –∞–ø–¥–µ–π—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è handle_message
                # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç message, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
                fake_message = type('obj', (object,), {
                    'text': user_prompt,
                    'reply_text': update.message.reply_text, # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
                    'chat_id': chat_id # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                 })
                fake_update = type('obj', (object,), {
                    'effective_chat': update.effective_chat, # –ü–µ—Ä–µ–¥–∞–µ–º —á–∞—Ç
                    'message': fake_message
                })

                await handle_message(fake_update, context)
                return # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            else:
                 logger.info(f"ChatID: {chat_id} | OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

        except pytesseract.TesseractNotFoundError:
             logger.error("Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ image_to_string! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ tesseract —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ (pytesseract.pytesseract.tesseract_cmd). OCR –æ—Ç–∫–ª—é—á–µ–Ω.")
             tesseract_available = False # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        except Exception as e:
            logger.warning(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ OCR: {e}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ OCR –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –∏–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞)
    logger.info(f"ChatID: {chat_id} | –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ OCR)")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ base64
    MAX_IMAGE_BYTES = 4 * 1024 * 1024 # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Gemini API –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    if len(file_bytes) > MAX_IMAGE_BYTES:
        logger.warning(f"ChatID: {chat_id} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({len(file_bytes)} –±–∞–π—Ç), –º–æ–∂–µ—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # from PIL import Image
        # img = Image.open(io.BytesIO(file_bytes))
        # img.thumbnail((1024, 1024)) # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 1024x1024 max
        # buffer = io.BytesIO()
        # img.save(buffer, format='JPEG') # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JPEG –¥–ª—è —Å–∂–∞—Ç–∏—è
        # file_bytes = buffer.getvalue()
        # logger.info(f"ChatID: {chat_id} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ –¥–æ {len(file_bytes)} –±–∞–π—Ç.")
        # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –±–æ–ª—å—à–æ–µ, –ª—É—á—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if len(file_bytes) > MAX_IMAGE_BYTES * 1.5: # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
             await update.message.reply_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∂–∞—Ç–∏—è.")
             return

    b64_data = base64.b64encode(file_bytes).decode()
    prompt = user_caption if user_caption else "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    parts = [
        {"text": prompt},
        {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}} # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º JPEG, —Ç.–∫. Telegram —á–∞—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç
    ]

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –ù–∞ –∞–ø—Ä–µ–ª—å 2024/2025 'gemini-pro' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, 'gemini-pro-vision' –∏–ª–∏ –Ω–æ–≤—ã–µ Flash/Pro - –¥–∞
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 'flash' –∏–ª–∏ 'pro' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è)
    if 'flash' not in model_id and 'pro' not in model_id and 'vision' not in model_id:
         # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π vision, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
         vision_models = [m for m in AVAILABLE_MODELS if 'flash' in m or 'pro' in m or 'vision' in m]
         if vision_models:
             original_model_name = AVAILABLE_MODELS.get(model_id, model_id)
             model_id = vision_models[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è –ø–æ–¥—Ö–æ–¥—è—â—É—é
             new_model_name = AVAILABLE_MODELS.get(model_id, model_id)
             logger.warning(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å {original_model_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_model_name}.")
             await context.bot.send_message(chat_id=chat_id, text=f"‚ÑπÔ∏è –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é {new_model_name}.")
         else:
             logger.error(f"ChatID: {chat_id} | –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
             await update.message.reply_text("‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
             return


    temperature = user_temperature.get(chat_id, 1.0) # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –ø–æ–Ω–∏–∂–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.4? –û—Å—Ç–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é.

    logger.info(f"ChatID: {chat_id} | –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}")
    tools = []
    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ, —Ç.–∫. model_id –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=system_instruction_text # –°–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º
        )
        response = model.generate_content([{"role": "user", "parts": parts}]) # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        reply = response.text

        if not reply:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason = feedback.block_reason if feedback else 'N/A'
                finish_reason_val = candidates_info[0].finish_reason if candidates_info else 'N/A'
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason and block_reason != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason})"
                else:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
            except AttributeError:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError).")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            except Exception as e_inner:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."


    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        error_message = str(e)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Gemini API
            if "400 The model requires bild input" in error_message or "400 Request payload size exceeds the limit" in error_message:
                 reply = "‚ùå –û—à–∏–±–∫–∞: –õ–∏–±–æ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è."
            elif isinstance(e, genai.types.BlockedPromptException):
                 reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif isinstance(e, genai.types.StopCandidateException):
                 reply = f"‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
            elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            elif "400" in error_message and "API key not valid" in error_message:
                 reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
            else:
                reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"
        except AttributeError:
             logger.warning("genai.types –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BlockedPromptException/StopCandidateException, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
             if "400 The model requires bild input" in error_message or "400 Request payload size exceeds the limit" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –õ–∏–±–æ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è."
             elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             elif "400" in error_message and "API key not valid" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
             else:
                 reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"

    if reply:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        MAX_MESSAGE_LENGTH = 4096
        for i in range(0, len(reply), MAX_MESSAGE_LENGTH):
            await update.message.reply_text(reply[i:i + MAX_MESSAGE_LENGTH])


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not update.message.document:
        return
    doc = update.message.document
    # –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö MIME —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    allowed_mime_prefixes = ('text/', 'application/json', 'application/xml', 'application/csv', 'application/x-python', 'application/x-sh')
    allowed_mime_types = ('application/octet-stream',) # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–∞–∫

    if not doc.mime_type or (not any(doc.mime_type.startswith(prefix) for prefix in allowed_mime_prefixes) and doc.mime_type not in allowed_mime_types):
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, .txt, .py, .js, .csv, .json, .xml, .log –∏ —Ç.–ø.). –í–∞—à —Ç–∏–ø: `{doc.mime_type}`")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞: {doc.mime_type}, –ò–º—è: {doc.file_name}")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
    MAX_FILE_SIZE_MB = 10
    if doc.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª '{doc.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> {MAX_FILE_SIZE_MB} MB).")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {doc.file_name} ({doc.file_size} –±–∞–π—Ç)")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
    try:
        doc_file = await doc.get_file()
        file_bytes = await doc_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{doc.file_name}': {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    text = None
    detected_encoding = None
    encodings_to_try = ['utf-8', 'latin-1', 'cp1251'] # –î–æ–±–∞–≤–ª—è–µ–º cp1251 –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤

    for encoding in encodings_to_try:
        try:
            text = file_bytes.decode(encoding)
            detected_encoding = encoding
            logger.info(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {encoding}.")
            break # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        except UnicodeDecodeError:
            logger.debug(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ {encoding}.")
            continue # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{doc.file_name}' –∫–∞–∫ {encoding}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –≤–¥—Ä—É–≥ –¥—Ä—É–≥–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

    if text is None:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª '{doc.file_name}' –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: {encodings_to_try}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.")
        return

    # MAX_FILE_CHARS —Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∞–Ω —Å MAX_CONTEXT_CHARS, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞, –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    MAX_FILE_CHARS = MAX_CONTEXT_CHARS // 3
    if len(text) > MAX_FILE_CHARS:
        truncated = text[:MAX_FILE_CHARS]
        warning_msg = f"\n\n(‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤)"
        logger.warning(f"ChatID: {chat_id} | –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ '{doc.file_name}' –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        truncated = text
        warning_msg = ""

    user_caption = update.message.caption if update.message.caption else ""
    file_name = doc.file_name or "—Ñ–∞–π–ª" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å

    if user_caption:
        user_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_name}' (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {detected_encoding}), —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{user_caption}\".\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"
    else:
        user_prompt = f"–í–æ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}' (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {detected_encoding}). –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º?\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"

    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∞–ø–¥–µ–π—Ç –¥–ª—è handle_message
    fake_message = type('obj', (object,), {
        'text': user_prompt,
        'reply_text': update.message.reply_text,
        'chat_id': chat_id
     })
    fake_update = type('obj', (object,), {
        'effective_chat': update.effective_chat,
        'message': fake_message
    })
    await handle_message(fake_update, context)


# --- –§—É–Ω–∫—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def setup_bot_and_server(stop_event: asyncio.Event):
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("temp", set_temperature))
    application.add_handler(CommandHandler("search_on", enable_search))
    application.add_handler(CommandHandler("search_off", disable_search))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–ª —à–∏—Ä–µ =====
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document)) # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≤–Ω—É—Ç—Ä–∏
    # ===================================================
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, f"/{GEMINI_WEBHOOK_PATH}")
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    await application.bot.set_webhook(webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    return application, run_web_server(application, stop_event)


async def run_web_server(application: Application, stop_event: asyncio.Event):
    app = aiohttp.web.Application()
    async def health_check(request):
        return aiohttp.web.Response(text="OK")
    app.router.add_get('/', health_check)

    app['bot_app'] = application
    webhook_path = f"/{GEMINI_WEBHOOK_PATH}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    logger.info(f"–í–µ–±—Ö—É–∫ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø—É—Ç–∏: {webhook_path}")

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    site = aiohttp.web.TCPSite(runner, "0.0.0.0", port)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        await stop_event.wait()
    finally:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiohttp!")
        return aiohttp.web.Response(status=500, text="Internal Server Error: Bot application not configured")

    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–µ–±—Ö—É–∫—É
        asyncio.create_task(application.process_update(update))
        return aiohttp.web.Response(text="OK", status=200)
    except json.JSONDecodeError as e:
         logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Telegram: {e}")
         # –ß–∏—Ç–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
         raw_body = await request.text()
         logger.debug(f"–°—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {raw_body[:500]}...") # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–ª–∞
         return aiohttp.web.Response(text="Bad Request", status=400) # –û—Ç–≤–µ—á–∞–µ–º Telegram –æ—à–∏–±–∫–æ–π
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        # –û—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return aiohttp.web.Response(text="OK", status=200)


async def main():
    # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫ Google/DDG, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    logging.getLogger('google.api_core').setLevel(logging.WARNING)
    logging.getLogger('google.generativeai').setLevel(logging.WARNING)
    logging.getLogger('duckduckgo_search').setLevel(logging.WARNING)
    logging.getLogger('PIL').setLevel(logging.INFO) # –õ–æ–≥–∏ PIL –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã

    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def signal_handler():
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        if not stop_event.is_set():
            stop_event.set()
        else:
            logger.warning("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è.")

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, signal_handler)
        except NotImplementedError:
            # Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç add_signal_handler –¥–ª—è SIGTERM
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {sig}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ Windows.")


    application = None
    web_server_task = None
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        application, web_server_coro = await setup_bot_and_server(stop_event)
        web_server_task = asyncio.create_task(web_server_coro)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await stop_event.wait() # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∂–¥–µ—Ç –∑–¥–µ—Å—å

    except asyncio.CancelledError:
         logger.info("–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    finally:
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —à—Ç–∞—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç application)
        if web_server_task and not web_server_task.done():
             logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–ø–æ—Å—ã–ª–∞—é —Å–æ–±—ã—Ç–∏–µ)...")
             # stop_event —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º,
             # —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —É–≤–∏–¥–µ—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è —Å–∞–º.
             # –î–∞–¥–∏–º –µ–º—É –≤—Ä–µ–º—è.
             try:
                 await asyncio.wait_for(web_server_task, timeout=15.0)
                 logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
             except asyncio.TimeoutError:
                 logger.warning("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω—è—é –∑–∞–¥–∞—á—É...")
                 web_server_task.cancel()
                 try:
                     await web_server_task # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                 except asyncio.CancelledError:
                     logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                 except Exception as e_cancel:
                     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e_cancel}", exc_info=True)
             except asyncio.CancelledError:
                 logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
             except Exception as e_wait:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e_wait}", exc_info=True)

        # 2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
        if application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞...")
            try:
                 await application.shutdown()
                 logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception as e_shutdown:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞: {e_shutdown}", exc_info=True)
        else:
            logger.warning("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –±—ã–ª –ø–æ—Ç–µ—Ä—è–Ω.")

        # 3. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤)
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        if tasks:
            logger.info(f"–û—Ç–º–µ–Ω—è—é {len(tasks)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
            [task.cancel() for task in tasks]
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
                logger.info("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã/–æ—Ç–º–µ–Ω–µ–Ω—ã.")
            except Exception as e_gather:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á: {e_gather}", exc_info=True)


        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)

# --- END OF FILE main.txt ---
