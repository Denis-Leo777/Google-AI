# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main.py —Å:
# - –ö–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 95 000 —Å–∏–º–≤–æ–ª–æ–≤
# - –í–∫–ª—é—á—ë–Ω–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Google Search (–º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å)
# - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π /temp 0.8
# - –û—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ /clear
# - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é: safety_settings=[] (—Ü–µ–Ω–∑—É—Ä–∞ —Å–Ω—è—Ç–∞)
# - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (—á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–¥–µ–ª–∏)
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤—ã–∑–æ–≤–æ–º Google Search (–∏–º–ø–æ—Ä—Ç –∏–∑ google.ai.generativelanguage)
# - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–µ—ë

import logging
import os
import asyncio
import signal
from urllib.parse import urljoin
import base64
import pytesseract
from PIL import Image
import io

import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import google.generativeai as genai

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Tool
try:
    from google.ai.generativelanguage_v1beta.types import Tool, GoogleSearchRetrieval
    logger.info("–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã Tool –∏ GoogleSearchRetrieval –∏–∑ google.ai.generativelanguage_v1beta.types")
except ImportError as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã Tool –∏ GoogleSearchRetrieval! –û—à–∏–±–∫–∞: {e}")
    logger.critical("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ google-generativeai, google-ai-generativelanguage, protobuf.")
    exit(1)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')

for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é =====
AVAILABLE_MODELS = {
    'gemini-2.5-pro-exp-03-25': '2.5 Pro (Exp)', # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è
    'gemini-2.0-flash': '2.0 Flash', # –°—Ç–∞–±–∏–ª—å–Ω–∞—è
    'gemini-2.0-flash-exp-image-generation': 'Image Gen (Exp)' # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
}
DEFAULT_MODEL = 'gemini-2.5-pro-exp-03-25' # –î–µ–ª–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π

# –ú–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç Google Search (–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–ª—é—á–∏—Ç)
MODELS_WITHOUT_SEARCH = {'gemini-2.5-pro-exp-03-25', 'gemini-2.0-flash-exp-image-generation'}
# ====================================================================

user_selected_model = {}
user_search_enabled = {} # –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ü–û–î–î–ï–†–ñ–ò–í–ê–Æ–©–ò–ï –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏
user_temperature = {}

MAX_CONTEXT_CHARS = 95000

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º–µ
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_selected_model[chat_id] = DEFAULT_MODEL
    user_search_enabled[chat_id] = True
    user_temperature[chat_id] = 1.0
    # context.chat_data['history'] = []

    default_model_name = AVAILABLE_MODELS.get(DEFAULT_MODEL, DEFAULT_MODEL)
    start_message = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å **{default_model_name}**."
        f" \n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Google-–ø–æ–∏—Å–∫–æ–º (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç), —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
        " \n/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏,"
        " \n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."
        " \n/temp <0-2> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)."
        " \n/search_on /search_off ‚Äî –≤–∫–ª/–≤—ã–∫–ª Google –ü–æ–∏—Å–∫ (–≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏)."
        " \n–ö–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞: t.me/denisobovsyom"
    )
    if DEFAULT_MODEL in MODELS_WITHOUT_SEARCH:
        start_message += f"\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_model_name}) **–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç** Google-–ø–æ–∏—Å–∫, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –Ω–µ—ë."

    await update.message.reply_text(start_message)

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['history'] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        temp = float(context.args[0])
        if not (0 <= temp <= 2):
            raise ValueError
        user_temperature[chat_id] = temp
        await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0")

async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_search_enabled[chat_id] = True
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    reply_text = "üîç Google-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á—ë–Ω."
    if current_model in MODELS_WITHOUT_SEARCH:
        reply_text += f"\n‚ö†Ô∏è –ù–æ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å ({AVAILABLE_MODELS.get(current_model, current_model)}) –µ–≥–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–ª—è –Ω–µ—ë."
    await update.message.reply_text(reply_text)

async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = False
    await update.message.reply_text("üîá Google-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω.")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    keyboard = []
    for m, name in AVAILABLE_MODELS.items():
         button_text = f"{'‚úÖ ' if m == current_model else ''}{name}"
         if m in MODELS_WITHOUT_SEARCH:
             button_text += " (üö´ –ü–æ–∏—Å–∫)" # –ü–æ–º–µ—Ç–∏–º –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø–æ–∏—Å–∫–∞
         keyboard.append([InlineKeyboardButton(button_text, callback_data=m)])

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    selected = query.data
    if selected in AVAILABLE_MODELS:
        user_selected_model[chat_id] = selected
        reply_text = f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {AVAILABLE_MODELS[selected]}"
        if selected in MODELS_WITHOUT_SEARCH:
            reply_text += "\n‚ö†Ô∏è Google-–ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ **–≤—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á—ë–Ω**."
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å –° –ø–æ–∏—Å–∫–æ–º, –Ω–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–∏—Å–∫–∞
            search_status = "–≤–∫–ª—é—á—ë–Ω" if user_search_enabled.get(chat_id, True) else "–≤—ã–∫–ª—é—á–µ–Ω"
            reply_text += f"\n‚ÑπÔ∏è Google-–ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å **{search_status}** (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏ /search_on /search_off)."
        await query.edit_message_text(reply_text)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text.strip()
    if not user_message:
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)

    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ =====
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –ø–æ–∏—Å–∫ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
    is_search_supported = model_id not in MODELS_WITHOUT_SEARCH
    # 2. –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, —Å–º–æ—Ç—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_search_supported:
        use_search = user_search_enabled.get(chat_id, True) # –£–≤–∞–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —é–∑–µ—Ä–∞
        search_log_reason = f"–ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–í–∫–ª' if use_search else '–í—ã–∫–ª'}"
    else:
        # 3. –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, –ø–æ–∏—Å–∫ –í–´–ö–õ–Æ–ß–ï–ù –≤—Å–µ–≥–¥–∞
        use_search = False
        search_log_reason = "–ú–æ–¥–µ–ª—å –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫"
    # =================================================

    logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, –ü–æ–∏—Å–∫: {'–î–ê' if use_search else '–ù–ï–¢'} ({search_log_reason})")

    chat_history = context.chat_data.setdefault("history", [])
    chat_history.append({"role": "user", "parts": [{"text": user_message}]})

    total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
    while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1:
        removed_message = chat_history.pop(0)
        total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
        logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed_message.get('role')}, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)}, —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")

    try:
        # –°–æ–∑–¥–∞–µ–º tools –¢–û–õ–¨–ö–û –µ—Å–ª–∏ use_search –∏—Å—Ç–∏–Ω–Ω–æ
        tools = [Tool(google_search_retrieval=GoogleSearchRetrieval())] if use_search else []

        model = genai.GenerativeModel(
            model_id,
            tools=tools, # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω
            safety_settings=[],
            generation_config={"temperature": temperature},
            system_instruction=system_instruction_text
        )
        response = model.generate_content(chat_history)
        reply = response.text

        if not reply:
            try:
                block_reason = response.prompt_feedback.block_reason
                finish_reason = response.candidates[0].finish_reason if response.candidates else 'UNKNOWN'
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Block Reason: {block_reason}, Finish Reason: {finish_reason}")
                reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: {block_reason or finish_reason}"
            except Exception:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –ø—Ä–∏—á–∏–Ω—É –≤—ã—è—Å–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."

        chat_history.append({"role": "model", "parts": [{"text": reply}]})

    except Exception as e:
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}"

    await update.message.reply_text(reply)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
    photo_file = await update.message.photo[-1].get_file()
    file_bytes = await photo_file.download_as_bytearray()
    user_caption = update.message.caption

    # –ü–æ–ø—ã—Ç–∫–∞ OCR
    try:
        image = Image.open(io.BytesIO(file_bytes))
        extracted_text = pytesseract.image_to_string(image, lang='rus+eng')
        if extracted_text and extracted_text.strip():
            logger.info(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {extracted_text[:100]}...")
            ocr_prompt = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n```\n{extracted_text.strip()}\n```\n"
            if user_caption:
                 user_prompt = f"{user_caption}\n{ocr_prompt}–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º, —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
            else:
                 user_prompt = f"{ocr_prompt}–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º."

            fake_update = type('obj', (object,), {
                'effective_chat': update.effective_chat,
                'message': type('obj', (object,), {
                    'text': user_prompt,
                    'reply_text': update.message.reply_text
                })
            })
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ handle_message, –æ–Ω —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å –ø–æ–∏—Å–∫–æ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
            await handle_message(fake_update, context)
            return
    except Exception as e:
        logger.warning(f"ChatID: {chat_id} | OCR –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    b64_data = base64.b64encode(file_bytes).decode()
    prompt = user_caption if user_caption else "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    parts = [
        {"text": prompt},
        {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}}
    ]

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)

    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_message) =====
    is_search_supported = model_id not in MODELS_WITHOUT_SEARCH
    if is_search_supported:
        use_search = user_search_enabled.get(chat_id, True)
        search_log_reason = f"–ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–í–∫–ª' if use_search else '–í—ã–∫–ª'}"
    else:
        use_search = False
        search_log_reason = "–ú–æ–¥–µ–ª—å –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫"
    # =================================================

    logger.info(f"ChatID: {chat_id} | –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, –ü–æ–∏—Å–∫: {'–î–ê' if use_search else '–ù–ï–¢'} ({search_log_reason})")

    try:
        # –°–æ–∑–¥–∞–µ–º tools –¢–û–õ–¨–ö–û –µ—Å–ª–∏ use_search –∏—Å—Ç–∏–Ω–Ω–æ
        tools = [Tool(google_search_retrieval=GoogleSearchRetrieval())] if use_search else []

        model = genai.GenerativeModel(
            model_id,
            tools=tools, # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω
            safety_settings=[],
            generation_config={"temperature": temperature},
            system_instruction=system_instruction_text
        )
        response = model.generate_content([{"role": "user", "parts": parts}])
        reply = response.text

        if not reply:
            try:
                block_reason = response.prompt_feedback.block_reason
                finish_reason = response.candidates[0].finish_reason if response.candidates else 'UNKNOWN'
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Block Reason: {block_reason}, Finish Reason: {finish_reason}")
                reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: {block_reason or finish_reason}"
            except Exception:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–∏—á–∏–Ω—É –≤—ã—è—Å–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

    except Exception as e:
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

    await update.message.reply_text(reply)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not update.message.document:
        return
    doc = update.message.document
    if not doc.mime_type or not doc.mime_type.startswith('text/'):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt, .py, .csv –∏ —Ç.–ø.).")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {doc.mime_type}")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
    doc_file = await doc.get_file()
    file_bytes = await doc_file.download_as_bytearray()
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    try:
        text = file_bytes.decode("utf-8")
    except UnicodeDecodeError:
        try:
            text = file_bytes.decode("latin-1")
            logger.warning(f"ChatID: {chat_id} | –§–∞–π–ª –Ω–µ –≤ UTF-8, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω latin-1.")
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8 –∏–ª–∏ Latin-1.")
            return

    MAX_FILE_CHARS = 30000
    if len(text) > MAX_FILE_CHARS:
        truncated = text[:MAX_FILE_CHARS]
        warning_msg = f"\n\n(‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤)"
        logger.warning(f"ChatID: {chat_id} | –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ '{doc.file_name}' –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        truncated = text
        warning_msg = ""

    user_caption = update.message.caption

    if user_caption:
        user_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}', —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{user_caption}\".\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"
    else:
        user_prompt = f"–í–æ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '{doc.file_name}'. –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º?\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"

    fake_update = type('obj', (object,), {
        'effective_chat': update.effective_chat,
        'message': type('obj', (object,), {
            'text': user_prompt,
            'reply_text': update.message.reply_text
        })
    })
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ handle_message, –æ–Ω —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å –ø–æ–∏—Å–∫–æ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    await handle_message(fake_update, context)


async def setup_bot_and_server(stop_event: asyncio.Event):
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("temp", set_temperature))
    application.add_handler(CommandHandler("search_on", enable_search))
    application.add_handler(CommandHandler("search_off", disable_search))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.TEXT, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, f"/{GEMINI_WEBHOOK_PATH}")
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    await application.bot.set_webhook(webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    return application, run_web_server(application, stop_event)


async def run_web_server(application: Application, stop_event: asyncio.Event):
    app = aiohttp.web.Application()
    async def health_check(request):
        return aiohttp.web.Response(text="OK")
    app.router.add_get('/', health_check)

    app['bot_app'] = application
    webhook_path = f"/{GEMINI_WEBHOOK_PATH}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    logger.info(f"–í–µ–±—Ö—É–∫ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø—É—Ç–∏: {webhook_path}")

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    site = aiohttp.web.TCPSite(runner, "0.0.0.0", port)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        await stop_event.wait()
    finally:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiohttp!")
        return aiohttp.web.Response(status=500, text="Internal Server Error: Bot application not configured")

    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        asyncio.create_task(application.process_update(update))
        return aiohttp.web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        return aiohttp.web.Response(text="OK", status=200)


async def main():
    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, stop_event.set)

    application = None
    web_server_task = None
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        application, web_server_coro = await setup_bot_and_server(stop_event)
        web_server_task = asyncio.create_task(web_server_coro)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await stop_event.wait()

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    finally:
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if web_server_task and not web_server_task.done():
             logger.info("–û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
             try:
                 await asyncio.wait_for(web_server_task, timeout=10.0)
             except asyncio.TimeoutError:
                 logger.warning("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω—è—é –∑–∞–¥–∞—á—É...")
                 web_server_task.cancel()
                 try:
                     await web_server_task
                 except asyncio.CancelledError:
                     logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                 except Exception as e:
                     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏/–æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

        if application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞...")
            await application.shutdown()
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –±—ã–ª –ø–æ—Ç–µ—Ä—è–Ω.")

        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)
