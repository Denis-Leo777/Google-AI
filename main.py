# --- START OF FULL WEBHOOK-READY CODE ---

import logging
import os
import asyncio
import signal
import time
import random
import google.genai as genai
import aiohttp.web
import sys
from typing import Optional, Dict, Union, Any, List
import urllib.parse

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–û–í ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–ú–ü–û–†–¢ –¢–ò–ü–û–í GEMINI ---
try:
    from google.genai import types as genai_types
    logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å google.genai.types.")
    Tool = genai_types.Tool
    GenerateContentConfig = genai_types.GenerateContentConfig
    GoogleSearch = genai_types.GoogleSearch
    Content = genai_types.Content
    Part = genai_types.Part
    FinishReason = genai_types.FinishReason
    HarmCategory = genai_types.HarmCategory
    HarmProbability = genai_types.HarmProbability
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≤ Gemini: {e}")
    exit(1)

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

if not TELEGRAM_BOT_TOKEN or not GOOGLE_API_KEY:
    logger.critical("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GEMINI ---
try:
    gemini_client = genai.Client(api_key=GOOGLE_API_KEY)
    logger.info("–ö–ª–∏–µ–Ω—Ç Gemini —Å–æ–∑–¥–∞–Ω.")
except Exception as e:
    logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini!")
    exit(1)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    '‚ö° Flash 2.0': 'models/gemini-2.0-flash-001',
    '‚ú® Pro 2.5': 'models/gemini-2.5-pro-exp-03-25'
}
DEFAULT_MODEL_ALIAS = '‚ú® Pro 2.5'
user_selected_model: Dict[int, str] = {}
chat_histories: Dict[int, List[Dict[str, Any]]] = {}

# --- –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ---
system_instruction_text = (
    "–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –î–∞–≤–∞–π —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º, –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—Ü–µ–Ω–∫—É."
    "–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏, –Ω–æ –±–µ–∑ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–æ–≤. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ –ø–∏—à–µ—à—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç–µ–º–µ."
    "–ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ –∫–æ–Ω—Å–ø–µ–∫—Ç, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–∞—Å—Å—É –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞, –∏–ª–∏ –¥—Ä—É–≥–∞—è, —Ç—Ä–µ–±—É—é—â–∞—è –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç–∞, —Ç–æ –æ—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤."
    "–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ –æ—Ç—Å—ã–ª–∫–∏, —à—É—Ç–∫–∏ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Ç–µ–º–∞—Ö, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥ –∏ –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –±–µ–∑–æ–±–∏–¥–Ω–∞—è –∏—Ä–æ–Ω–∏—è –∏ —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è, –ø–∞—Ä–æ–¥–∏–∏ –Ω–∞ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞ –∞—Ñ–æ—Ä–∏–∑–º—ã, –∏–≥—Ä–∞ —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª–∞ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–∞, –∏—Ä–æ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ç–æ–Ω–∫–∏–µ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç-–º–æ–¥–µ—Ä–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
    "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò, –∏–∑–±–µ–≥–∞–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–ª–∏–∑–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, –≤–∫–ª—é—á–∞–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π, –ø—Ä–∏–º–µ–Ω—è–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–∏, –≤–∞—Ä—å–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã –∏ —Ñ–∏–≥—É—Ä—ã —Ä–µ—á–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–¥—è–º, –≤—Å—Ç–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –¥–æ–±–∞–≤–ª—è–π –æ—Å—Ç—Ä–æ—É–º–∏–µ."
    "–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏, —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É(–∏) –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –≤–µ—Ä—Å–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –∫–∞–∫ —à–∞–≥ –≤–ø–µ—Ä–µ–¥ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–æ–π –±—ã–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞). –í–Ω–µ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏. –ù–ï –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —Å–º–µ–∂–Ω—ã–µ —á–∞—Å—Ç–∏, –ù–ï —É–¥–∞–ª—è–π –Ω–∏—á–µ–≥–æ, –ù–ï –º–µ–Ω—è–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–æ–º–Ω–µ–Ω–∏–π, —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–∞–∑—É. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—è–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –æ—à–∏–±–∫–∞, –¥–æ–±–∞–≤—å —ç—Ç–æ –≤ '–∫—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫' –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª—é–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏—Ö '–±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫'."
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –∫–æ–¥) –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç (–∫–æ–¥). –ù–µ –ø—ã—Ç–∞–π—Å—è '—É–ª—É—á—à–∏—Ç—å' –∏–ª–∏ '–ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å' –µ–≥–æ —á–∞—Å—Ç–∏, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—Å–∏–ª."
    "–í –¥–∏–∞–ª–æ–≥–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –≤—Å–µ–≥–¥–∞ —è–≤–Ω–æ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Ä–µ—Ç—Å—è –∑–∞ –æ—Å–Ω–æ–≤—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è '–ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—á–µ–π' –∏–ª–∏ '–ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π'."
)

# --- –ò–ú–ü–û–†–¢–´ TELEGRAM ---
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    TypeHandler
)

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    if chat_id in user_selected_model:
        del user_selected_model[chat_id]
    if chat_id in chat_histories:
        del chat_histories[chat_id]
    
    search_status = "–≤–∫–ª—é—á–µ–Ω" if GoogleSearch else "–û–¢–ö–õ–Æ–ß–ï–ù"
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ë–æ—Ç Gemini (Webhook) v1.0"
        f"\n\n–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{DEFAULT_MODEL_ALIAS}</b>"
        f"\nüîç –ü–æ–∏—Å–∫ Google: <b>{search_status}</b>"
        f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π /model –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏",
        reply_to_message_id=update.message.message_id
    )

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    keyboard = [[InlineKeyboardButton(f"‚úÖ {alias}" if alias == current_alias else alias, callback_data=alias)] 
               for alias in AVAILABLE_MODELS]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    selected_alias = query.data
    chat_id = query.message.chat_id
    
    if selected_alias not in AVAILABLE_MODELS:
        await query.edit_message_text(text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        return
    
    user_selected_model[chat_id] = selected_alias
    if chat_id in chat_histories:
        del chat_histories[chat_id]
    
    await query.edit_message_text(
        text=f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{selected_alias}*\n–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞!",
        parse_mode=ParseMode.MARKDOWN
    )

def extract_response_text(response) -> Optional[str]:
    try:
        return response.text
    except AttributeError:
        try:
            if response.candidates and response.candidates[0].content.parts:
                return "".join(p.text for p in response.candidates[0].content.parts)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"
    return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return
    
    user_message = update.message.text
    chat_id = update.effective_chat.id
    message_id = update.message.message_id
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    model_id = AVAILABLE_MODELS.get(selected_alias)
    
    if not model_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏")
        return

    try:
        response = gemini_client.generate_content(
        model=model_id,
        contents=[{"role": "user", "parts": [{"text": user_message}]}],  # –ó–∞–∫—Ä—ã–ª `contents` –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        system_instruction={"parts": [{"text": system_instruction_text}]}
        )

        reply_text = extract_response_text(response)
        
        if not reply_text:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
        await update.message.reply_text(
            reply_text,
            reply_to_message_id=message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_to_message_id=message_id
        )

# --- –í–ï–ë–•–£–ö–ò –ò –°–ï–†–í–ï–† ---
async def handle_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return aiohttp.web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return aiohttp.web.Response(status=500)

async def handle_ping(request: aiohttp.web.Request) -> aiohttp.web.Response:
    return aiohttp.web.Response(text="PONG", status=200)

async def run_web_server(app: aiohttp.web.Application, port: int):
    runner = aiohttp.web.AppRunner(app)
    await runner.setup()
    site = aiohttp.web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
async def setup_application() -> Application:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("model", select_model_command),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
        CallbackQueryHandler(select_model_callback),
        TypeHandler(Update, lambda update, ctx: logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}"))
    ]
    
    for handler in handlers:
        application.add_handler(handler)

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"https://google-ai-ugl9.onrender.com/{TELEGRAM_BOT_TOKEN}"
    await application.bot.set_webhook(webhook_url)
    logger.info(f"–í–µ–±—Ö—É–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {webhook_url}")
    
    return application

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def main():
    application = await setup_application()
    web_app = aiohttp.web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    web_app.router.add_post(f"/{TELEGRAM_BOT_TOKEN}", handle_webhook)
    web_app.router.add_get("/", handle_ping)
    
    # –ü–æ—Ä—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
    port = int(os.environ.get("PORT", 8080))
    server_task = asyncio.create_task(run_web_server(web_app, port))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    stop_event = asyncio.Event()
    
    def signal_handler(sig):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal.Signals(sig).name}")
        stop_event.set()
    
    for s in (signal.SIGINT, signal.SIGTERM):
        asyncio.get_event_loop().add_signal_handler(s, lambda s=s: signal_handler(s))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    await stop_event.wait()
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    await application.stop()
    await application.shutdown()
    await server_task
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:")

# --- END OF FULL WEBHOOK-READY CODE ---
