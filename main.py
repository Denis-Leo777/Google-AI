# --- START OF FULL CORRECTED main.py (Updated Models List + Imagen Warning) ---

import logging
import os
import asyncio
import google.generativeai as genai
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç types, —Ç.–∫. ChatSession —Ç–∞–º –Ω–µ—Ç –≤ v0.7.1
import time
import random
from typing import Optional, Dict, Union, Any # –î–æ–±–∞–≤–∏–ª–∏ Any

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ Google
try:
    from googlesearch import search as google_search_sync
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ googlesearch-python –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...")
    google_search_sync = None
else:
    if not callable(google_search_sync):
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º googlesearch...")
        google_search_sync = None

# Gemini Function Calling —Ç–∏–ø—ã
from google.protobuf.struct_pb2 import Struct

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = {
    '‚ö° Flash': 'gemini-2.0-flash-001', # –í–∞—à–µ –∏–º—è
    'üß† Pro Exp': 'gemini-2.5-pro-exp-03-25', # –í–∞—à–µ –∏–º—è
    'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)': 'imagen-3.0-generate-002', # –î–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ –ù–ï –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —á–∞—Ç–∞!
}
# –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ '‚ö° Flash' –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
DEFAULT_MODEL_ALIAS = '‚ö° Flash'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search –¥–ª—è Gemini ---
google_search_tool = None
if google_search_sync:
    google_search_func = genai.protos.FunctionDeclaration(
        name="google_search",
        description="–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–∏—Å–∫–∞ Google...",
        parameters=genai.protos.Schema(
            type=genai.protos.Type.OBJECT,
            properties={"query": genai.protos.Schema(type=genai.protos.Type.STRING, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")},
            required=["query"]
        )
    )
    google_search_tool = genai.protos.Tool(function_declarations=[google_search_func])
    logger.info("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –¥–ª—è Gemini –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
else:
    logger.warning("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –ù–ï –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω...")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–æ–¥–µ–ª–µ–π Gemini ---
LOADED_MODELS: Dict[str, genai.GenerativeModel] = {}
gemini_tools = [google_search_tool] if google_search_tool else None
try:
    genai.configure(api_key=GOOGLE_API_KEY)

    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤... "
        "–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π... –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç google_search..."
    )

    for alias, model_id in AVAILABLE_MODELS.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Imagen –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ GenerativeModel
        if 'imagen' in model_id.lower():
             logger.warning(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) –ø—Ä–æ–ø—É—â–µ–Ω–∞, —Ç.–∫. —ç—Ç–æ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ç–µ–∫—É—â–∏–º —á–∞—Ç-–±–æ—Ç–æ–º.")
             continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏

        try:
            model = genai.GenerativeModel(
                model_id,
                generation_config={"temperature": 0.8 if 'Flash' in alias else 1, "top_p": 1, "top_k": 40, "max_output_tokens": 2048},
                system_instruction=system_instruction_text,
                tools=gemini_tools
            )
            LOADED_MODELS[alias] = model
            logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search: {'Enabled' if gemini_tools else 'Disabled'}] —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
            logger.error(f"!!! –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ '{alias}' ({model_id}): {e}")

    if not LOADED_MODELS:
         raise RuntimeError("–ù–∏ –æ–¥–Ω–∞ *—Ç–µ–∫—Å—Ç–æ–≤–∞—è* –º–æ–¥–µ–ª—å Gemini –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS:
        # –ï—Å–ª–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        try:
            DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS))
            logger.warning(f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{DEFAULT_MODEL_ALIAS}' –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '{DEFAULT_MODEL_ALIAS}'")
        except StopIteration:
             # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ LOADED_MODELS –ø—É—Å—Ç, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
             raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç.–∫. –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


except GoogleAPIError as e:
    logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {e}")
    exit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini (API Error): {e}")
except Exception as e:
    logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π Gemini!")
    exit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini (General Error): {e}")

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}
# –£–ë–†–ê–ù TYPE HINT –¥–ª—è ChatSession
chat_histories: Dict[int, Any] = {}

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ Google ---
# (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def perform_google_search(query: str, num_results: int = 5) -> str:
    if not google_search_sync: return "–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Google –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    try:
        search_results = await asyncio.to_thread(google_search_sync, query, num_results=num_results, stop=num_results, lang="ru")
        results_list = list(search_results)
        if not results_list: return "–ü–æ–∏—Å–∫ Google –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        formatted_results = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n" + "".join(f"{i}. {r}\n" for i, r in enumerate(results_list, 1))
        logger.info(f"–ü–æ–∏—Å–∫ Google –ø–æ '{query}' –≤–µ—Ä–Ω—É–ª {len(results_list)} —Å—Å—ã–ª–æ–∫.")
        return formatted_results[:1500]
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ Google '{query}': {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ Google: {e}"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞ Gemini ---
# (–ò—Å–ø–æ–ª—å–∑—É–µ–º genai.protos.Part –∏ genai.protos.FunctionResponse –¥–ª—è v0.7.1)
async def process_gemini_chat_turn(
    chat_session, # –£–±—Ä–∞–Ω type hint
    model_name: str,
    initial_content, # –£–±—Ä–∞–Ω type hint
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int
) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ö–æ–¥ –¥–∏–∞–ª–æ–≥–∞ —Å Gemini, –≤–∫–ª—é—á–∞—è Function Calling (–¥–ª—è v0.7.1)."""
    current_message_or_response = initial_content
    is_function_response = isinstance(current_message_or_response, genai.protos.FunctionResponse) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ FunctionResponse

    for attempt in range(5):
        logger.info(f"[{model_name}] –ò—Ç–µ—Ä–∞—Ü–∏—è {attempt+1}. –û—Ç–ø—Ä–∞–≤–∫–∞ {'–û–¢–í–ï–¢–ê –ù–ê –§–£–ù–ö–¶–ò–Æ' if is_function_response else '–°–û–û–ë–©–ï–ù–ò–Ø'}.")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

        content_to_send = current_message_or_response # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –í–ê–ñ–ù–û: –î–ª—è v0.7.1 –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º FunctionResponse
        if is_function_response:
             logger.info(f"[{model_name}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FunctionResponse –∫–∞–∫ –µ—Å—Ç—å: {current_message_or_response.name}")
             # content_to_send –æ—Å—Ç–∞–µ—Ç—Å—è current_message_or_response (—Ç–∏–ø–∞ FunctionResponse)
        else:
            logger.info(f"[{model_name}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞): {str(content_to_send)[:100]}...")

        try:
            logger.info(f"[{model_name}] !!! –ù–ê–ß–ê–õ–û –≤—ã–∑–æ–≤–∞ send_message_async...")
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–ª–∏ FunctionResponse
            response = await chat_session.send_message_async(content=content_to_send)
            logger.info(f"[{model_name}] !!! –ó–ê–í–ï–†–®–ï–ù–ò–ï –≤—ã–∑–æ–≤–∞ send_message_async.")

            if response.candidates and response.candidates[0].content.parts:
                part = response.candidates[0].content.parts[0] # –≠—Ç–æ –±—É–¥–µ—Ç protos.Part
                logger.info(f"[{model_name}] –ü–û–õ–£–ß–ï–ù–ê –ß–ê–°–¢–¨ –û–¢–í–ï–¢–ê: {part}")

                if hasattr(part, 'function_call') and part.function_call and part.function_call.name == "google_search":
                    function_call = part.function_call
                    logger.info(f"[{model_name}] !!!! –û–ë–ù–ê–†–£–ñ–ï–ù –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò google_search.")

                    if not google_search_tool:
                         logger.error(f"[{model_name}] !!! –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                         s_err = Struct(); s_err.update({"content": "–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."})
                         current_message_or_response = genai.protos.FunctionResponse(name="google_search", response=s_err)
                         continue

                    args = {key: value for key, value in function_call.args.items()}
                    query = args.get("query")
                    logger.info(f"[{model_name}] –ò–∑–≤–ª–µ—á–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{query}'")

                    if query:
                        logger.info(f"[{model_name}] !!! –ù–ê–ß–ê–õ–û –≤—ã–∑–æ–≤–∞ perform_google_search...")
                        search_result = await perform_google_search(query)
                        logger.info(f"[{model_name}] !!! –ó–ê–í–ï–†–®–ï–ù–ò–ï –≤—ã–∑–æ–≤–∞ perform_google_search...")
                        s_res = Struct(); s_res.update({"content": search_result})
                        current_message_or_response = genai.protos.FunctionResponse(name="google_search", response=s_res)
                        logger.info(f"[{model_name}] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω FunctionResponse –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                        continue
                    else: # –ù–µ—Ç query
                         logger.warning(f"[{model_name}] !!! –í—ã–∑–æ–≤ google_search –±–µ–∑ 'query'.")
                         s_err = Struct(); s_err.update({"content": "–û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä 'query' –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."})
                         current_message_or_response = genai.protos.FunctionResponse(name="google_search", response=s_err)
                         continue

                else: # –ù–µ function call
                    try:
                        logger.info(f"[{model_name}] –≠—Ç–æ –Ω–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...")
                        final_text = response.text
                        logger.info(f"[{model_name}] –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
                        return final_text
                    except ValueError as e: # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                         logger.warning(f"[{model_name}] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞?): {e}")
                         reason = getattr(response.prompt_feedback, 'block_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if hasattr(response, 'prompt_feedback') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                         raise ValueError(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {model_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}") from e
                    except AttributeError: # –ù–µ—Ç .text
                        logger.warning(f"[{model_name}] !!! –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ .text")
                        try:
                            final_text = "".join(p.text for p in response.parts if hasattr(p, 'text'))
                            if final_text: logger.info(f"[{model_name}] –¢–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω –∏–∑ —á–∞—Å—Ç–µ–π."); return final_text
                            else: raise Exception("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ .parts")
                        except Exception as e_inner: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç") from e_inner

            else: # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                 logger.warning(f"[{model_name}] !!! –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤/—á–∞—Å—Ç–µ–π.")
                 reason = getattr(response.prompt_feedback, 'block_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if hasattr(response, 'prompt_feedback') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                 if reason != 'BLOCK_REASON_UNSPECIFIED': raise ValueError(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç {model_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}")
                 raise Exception(f"–ú–æ–¥–µ–ª—å {model_name} –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

        except (ResourceExhausted, FailedPrecondition, GoogleAPIError) as e:
             logger.error(f"[{model_name}] !!! –û—à–∏–±–∫–∞ API: {e}")
             raise e
        except ValueError as ve: # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
             logger.error(f"[{model_name}] !!! –û—à–∏–±–∫–∞ ValueError (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞?): {ve}")
             raise ve
        except Exception as e:
             logger.exception(f"[{model_name}] !!! –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
             raise e

    logger.error(f"[{model_name}] !!! –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ({attempt+1}) –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π.")
    raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}.")


# --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–´–ë–û–†–ê –ú–û–î–ï–õ–ò ---
async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    chat_id = update.effective_chat.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)

    keyboard = []
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –£–°–ü–ï–®–ù–û –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ LOADED_MODELS
    for alias in LOADED_MODELS.keys():
        text = f"‚úÖ {alias}" if alias == current_alias else alias
        keyboard.append([InlineKeyboardButton(text, callback_data=alias)])

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è Imagen, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
    if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS:
         keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞)", callback_data="imagen_info")])


    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫

    selected_alias = query.data
    chat_id = query.message.chat_id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Imagen
    if selected_alias == "imagen_info":
        await context.bot.send_message(chat_id=chat_id, text="–ú–æ–¥–µ–ª—å Imagen –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return

    if selected_alias not in LOADED_MODELS:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return

    if selected_alias != current_alias:
        user_selected_model[chat_id] = selected_alias
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ '{selected_alias}'")
        if chat_id in chat_histories:
            del chat_histories[chat_id]
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏.")

        keyboard = []
        for alias in LOADED_MODELS.keys():
            text = f"‚úÖ {alias}" if alias == selected_alias else alias
            keyboard.append([InlineKeyboardButton(text, callback_data=alias)])
        # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ-–∫–Ω–æ–ø–∫—É Imagen —Å–Ω–æ–≤–∞
        imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
        if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS:
             keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞)", callback_data="imagen_info")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{selected_alias}*\n"
                 f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é
        try: # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
             await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
        except: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
             await context.bot.send_message(chat_id=chat_id, text=f"–ú–æ–¥–µ–ª—å *{selected_alias}* —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.", parse_mode=ParseMode.MARKDOWN)


# --- –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; chat_id = update.effective_chat.id
    if chat_id in user_selected_model: del user_selected_model[chat_id]
    if chat_id in chat_histories: del chat_histories[chat_id]
    logger.info(f"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {chat_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π DEFAULT_MODEL_ALIAS –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    default_model_display_name = DEFAULT_MODEL_ALIAS

    search_status = "–≤–∫–ª—é—á–µ–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)" if google_search_tool else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø - Gemini –±–æ—Ç.\n"
        f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model_display_name}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏.\n"
        f"üîç –ü–æ–∏—Å–∫ Google {search_status}.",
        reply_to_message_id=update.message.message_id
    )
    logger.info(f"/start –æ—Ç {user.id}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{user_message[:50]}...'")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    selected_model_object = LOADED_MODELS.get(selected_alias)

    if not selected_model_object:
        logger.error(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å '{selected_alias}' –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö!")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π
        selected_alias = DEFAULT_MODEL_ALIAS
        selected_model_object = LOADED_MODELS.get(DEFAULT_MODEL_ALIAS)
        if not selected_model_object:
            await update.message.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–∏ –æ–¥–Ω–∞ —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å AI –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
        else:
             await update.message.reply_text(f"–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {selected_alias}")
             user_selected_model[chat_id] = selected_alias

    final_text: Optional[str] = None; error_message: Optional[str] = None

    try: # --- –ü–æ–ø—ã—Ç–∫–∞ —Å –í–´–ë–†–ê–ù–ù–û–ô –º–æ–¥–µ–ª—å—é ---
        if chat_id not in chat_histories:
            chat_histories[chat_id] = selected_model_object.start_chat(history=[])
            logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è {chat_id} —Å –º–æ–¥–µ–ª—å—é '{selected_alias}'")
        current_chat_session = chat_histories[chat_id]

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –º–æ–¥–µ–ª—å—é: {selected_alias}")
        final_text = await process_gemini_chat_turn(
            current_chat_session, selected_alias, user_message, context, chat_id
        )

    except ResourceExhausted as e_limit:
        logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –∏—Å—á–µ—Ä–ø–∞–ª–∞ –∫–≤–æ—Ç—É: {e_limit}")
        error_message = f"üòî –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å '{selected_alias}' —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –µ–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /model."
    except FailedPrecondition as e_precondition:
        logger.error(f"–ú–æ–¥–µ–ª—å '{selected_alias}' FailedPrecondition: {e_precondition}. –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏.")
        error_message = f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—å—é '{selected_alias}' —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π. –Ø –µ–µ —Å–±—Ä–æ—Å–∏–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        if chat_id in chat_histories: del chat_histories[chat_id]
    except ValueError as e_blocked:
        logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {e_blocked}")
        error_message = f"‚ö†Ô∏è {e_blocked}"
    except (GoogleAPIError, Exception) as e_other:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ–ª—å—é '{selected_alias}': {e_other}")
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª—å—é '{selected_alias}': {e_other}"

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    if final_text:
        bot_response = final_text[:4090]
        try:
            await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç '{selected_alias}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user.id}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            try: await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç AI.", reply_to_message_id=update.message.message_id)
            except Exception: pass
    elif error_message:
        try:
            await update.message.reply_text(error_message, reply_to_message_id=update.message.message_id)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {error_message[:100]}...")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ '{error_message[:100]}...': {e}")
    else:
        logger.warning(f"–ù–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è {chat_id}.")
        if "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞" not in (error_message or "") and "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏" not in (error_message or "") :
             try: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_to_message_id=update.message.message_id)
             except Exception: pass


# --- main ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not LOADED_MODELS:
         logger.critical("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!"); print("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã."); return
    if not google_search_sync:
         logger.warning("–ó–∞–ø—É—Å–∫ –ë–ï–ó –ø–æ–∏—Å–∫–∞ Google.")

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

# --- END OF FULL CORRECTED main.py ---
