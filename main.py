# --- START OF REALLY REALLY TRULY HONESTLY FULL CORRECTED main.py (No '...' placeholders ANYWHERE) ---

import logging
import os
import asyncio
import google.generativeai as genai
import time
import random
from typing import Optional, Dict, Union, Any, Tuple

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ü–æ–∏—Å–∫–∞ –∏ –ü–∞—Ä—Å–∏–Ω–≥–∞
import httpx
from bs4 import BeautifulSoup
try:
    from googlesearch import search as google_search_sync
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ googlesearch-python –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...")
    google_search_sync = None
else:
    if not callable(google_search_sync):
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º googlesearch...")
        google_search_sync = None

# Gemini Function Calling —Ç–∏–ø—ã
from google.protobuf.struct_pb2 import Struct

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    '‚ö° Flash': 'gemini-2.0-flash-001',
    'üß† Pro Exp': 'gemini-2.5-pro-exp-03-25',
    'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)': 'imagen-3.0-generate-002',
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search ---
google_search_tool = None
if google_search_sync:
    google_search_func = genai.protos.FunctionDeclaration(
        name="google_search",
        description="–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ–≥–æ–¥—ã, –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü.",
        parameters=genai.protos.Schema(
            type=genai.protos.Type.OBJECT,
            properties={"query": genai.protos.Schema(type=genai.protos.Type.STRING, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")},
            required=["query"]
        )
    )
    google_search_tool = genai.protos.Tool(function_declarations=[google_search_func])
    logger.info("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –¥–ª—è Gemini –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
else:
    logger.warning("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –ù–ï –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω...")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–æ–¥–µ–ª–µ–π Gemini ---
LOADED_MODELS: Dict[str, genai.GenerativeModel] = {}
gemini_tools = [google_search_tool] if google_search_tool else None
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    # –°–ê–ú–ê–Ø –°–ò–õ–¨–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø
    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ –∫–æ–Ω—Å–ø–µ–∫—Ç, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–∞—Å—Å—É –≤–æ–ø—Ä–æ—Å–æ–≤, –∏–ª–∏ –¥—Ä—É–≥–∞—è, —Ç—Ä–µ–±—É—é—â–∞—è –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç–∞. "
        "–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
        "–î–∞–≤–∞–π —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º, –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—Ü–µ–Ω–∫—É. "
        "–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏, –±–µ–∑ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, - –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ. "
        "–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ –æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, —à—É—Ç–∫–∏ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Ç–µ–º–∞—Ö, –∏—Ä–æ–Ω–∏—è –∏ —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è, "
        "—Ç–æ–Ω–∫–∏–µ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –Ω–∞–º—ë–∫–∏, –ø–æ—Å—Ç-–º–æ–¥–µ—Ä–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, "
        "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –ø–∞—Ä–æ–¥–∏–∏ –Ω–∞ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞ –∞—Ñ–æ—Ä–∏–∑–º—ã, –∏–≥—Ä–∞ —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª–∞ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–∞, –∏—Ä–æ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º. "
        "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã: –∏–∑–±–µ–≥–∞–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–ª–∏–∑–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤; –≤–∫–ª—é—á–∞–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π; "
        "–ø—Ä–∏–º–µ–Ω—è–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–∏; –Ω–µ –¥–æ–ø—É—Å–∫–∞–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò; –≤–∞—Ä—å–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, "
        "–∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π; –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã –∏ —Ñ–∏–≥—É—Ä—ã —Ä–µ—á–∏; "
        "–∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–¥—è–º; –≤—Å—Ç–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ; –¥–æ–±–∞–≤–ª—è–π –æ—Å—Ç—Ä–æ—É–º–∏–µ. "
        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª–∏—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–±–æ—Ä—ã'), "
        "–ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, "
        "–¢–´ –û–ë–Ø–ó–ê–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç google_search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–ê–ú–û–ô –ê–ö–¢–£–ê–õ–¨–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ò–ó –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–• –û–ü–ò–°–ê–ù–ò–ô –°–¢–†–ê–ù–ò–¶. "
        "–ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ google_search –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    )
    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower():
             logger.warning(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).")
             continue
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô generation_config
            model = genai.GenerativeModel(
                model_id,
                generation_config={
                    "temperature": 0.8 if 'Flash' in alias else 1,
                    "top_p": 1,
                    "top_k": 40,
                    "max_output_tokens": 2048
                },
                system_instruction=system_instruction_text,
                tools=gemini_tools
            )
            LOADED_MODELS[alias] = model
            logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search: {'Enabled' if gemini_tools else 'Disabled'}] —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"!!! –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ '{alias}' ({model_id}): {e}")
    if not LOADED_MODELS: raise RuntimeError("–ù–∏ –æ–¥–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS:
        try: DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS)); logger.warning(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL_ALIAS}")
        except StopIteration: raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
except GoogleAPIError as e: logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {e}"); exit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini (API Error): {e}")
except Exception as e: logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π Gemini!"); exit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini (General Error): {e}")

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}
chat_histories: Dict[int, Any] = {}

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ Google (—Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º) ---
async def fetch_and_parse(url: str, client: httpx.AsyncClient) -> Tuple[Optional[str], Optional[str]]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = await client.get(url, timeout=7.0, follow_redirects=True, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        title = soup.title.string.strip() if soup.title else None
        description = None
        meta_desc = soup.find('meta', attrs={'name': 'description'})
        if meta_desc and meta_desc.get('content'):
            description = meta_desc['content'].strip()
        else:
            first_p = soup.find('p')
            if first_p: description = first_p.get_text().strip()
        if description and len(description) > 150: description = description[:150] + "..."
        if title: logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω title –¥–ª—è {url}")
        return title, description
    except httpx.TimeoutException: logger.warning(f"!!!! –¢–∞–π–º–∞—É—Ç URL: {url}"); return None, None
    except httpx.RequestError as e: logger.warning(f"!!!! –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ URL {url}: {e}"); return None, None
    except Exception as e: logger.warning(f"!!!! –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {url}: {e}"); return None, None

async def perform_google_search(query: str, num_results: int = 3) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏/—Å–Ω–∏–ø–ø–µ—Ç—ã –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    if not google_search_sync: return "–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    logger.info(f"!!!! –ù–∞—á–∞–ª–æ Google –ø–æ–∏—Å–∫–∞ (—Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º): '{query}'")
    formatted_results = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
    urls_to_fetch = []
    try:
        search_results = await asyncio.to_thread(google_search_sync, query, num_results=num_results, lang="ru")
        urls_to_fetch = list(search_results)
        if not urls_to_fetch: logger.warning(f"!!!! Google –ø–æ–∏—Å–∫ –ø–æ '{query}' –Ω–µ –¥–∞–ª URL."); return formatted_results + "–ü–æ–∏—Å–∫ Google –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        logger.info(f"!!!! Google –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(urls_to_fetch)} URL.")
    except Exception as e: logger.exception(f"!!!! –û–®–ò–ë–ö–ê –Ω–∞ —ç—Ç–∞–ø–µ Google –ø–æ–∏—Å–∫–∞ '{query}': {e}"); return formatted_results + f"–û—à–∏–±–∫–∞ Google –ø–æ–∏—Å–∫–∞: {e}"
    async with httpx.AsyncClient() as client:
        tasks = [fetch_and_parse(url, client) for url in urls_to_fetch]
        results = await asyncio.gather(*tasks, return_exceptions=True)
    processed_count = 0
    for i, result in enumerate(results):
        if isinstance(result, Exception) or result is None: logger.warning(f"!!!! –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL #{i+1}: {result}"); continue
        title, description = result
        if title:
            processed_count += 1
            formatted_results += f"{processed_count}. {title}\n"
            if description: formatted_results += f"   - {description}\n"
            formatted_results += f"   URL: {urls_to_fetch[i]}\n\n"
    if processed_count == 0: logger.warning(f"!!!! –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è '{query}'."); formatted_results += "(–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç)"
    logger.info(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø GEMINI (–Ω–∞—á–∞–ª–æ): {formatted_results[:300]}...")
    return formatted_results[:2500]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞ Gemini ---
async def process_gemini_chat_turn(
    chat_session, model_name: str, initial_content, context: ContextTypes.DEFAULT_TYPE, chat_id: int
) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ö–æ–¥ –¥–∏–∞–ª–æ–≥–∞ —Å Gemini, –≤–∫–ª—é—á–∞—è Function Calling (–¥–ª—è v0.7.1)."""
    current_message_or_response = initial_content
    is_function_response = isinstance(current_message_or_response, genai.protos.FunctionResponse)

    for attempt in range(5):
        logger.info(f"[{model_name}] –ò—Ç–µ—Ä–∞—Ü–∏—è {attempt+1}. –û—Ç–ø—Ä–∞–≤–∫–∞ {'–û–¢–í–ï–¢–ê –ù–ê –§–£–ù–ö–¶–ò–Æ' if is_function_response else '–°–û–û–ë–©–ï–ù–ò–Ø'}.")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        content_to_send = current_message_or_response
        if is_function_response: logger.info(f"[{model_name}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FunctionResponse: {current_message_or_response.name}")
        else: logger.info(f"[{model_name}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É: {str(content_to_send)[:100]}...")
        try:
            logger.info(f"[{model_name}] !!! –ù–ê–ß–ê–õ–û –≤—ã–∑–æ–≤–∞ send_message_async...")
            response = await chat_session.send_message_async(content=content_to_send)
            logger.info(f"[{model_name}] !!! –ó–ê–í–ï–†–®–ï–ù–ò–ï –≤—ã–∑–æ–≤–∞ send_message_async.")
            if response.candidates and response.candidates[0].content.parts:
                part = response.candidates[0].content.parts[0]
                logger.info(f"[{model_name}] –ü–û–õ–£–ß–ï–ù–ê –ß–ê–°–¢–¨: {part}")
                if hasattr(part, 'function_call') and part.function_call and part.function_call.name == "google_search":
                    function_call = part.function_call
                    logger.info(f"[{model_name}] !!!! –û–ë–ù–ê–†–£–ñ–ï–ù –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò google_search.")
                    if not google_search_tool:
                         logger.error(f"[{model_name}] !!! –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                         s_err = Struct(); s_err.update({"content": "–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."})
                         current_message_or_response = genai.protos.FunctionResponse(name="google_search", response=s_err)
                         continue
                    args = {key: value for key, value in function_call.args.items()}
                    query = args.get("query")
                    logger.info(f"[{model_name}] –ò–∑–≤–ª–µ—á–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{query}'")
                    if query:
                        logger.info(f"[{model_name}] !!! –ù–ê–ß–ê–õ–û –≤—ã–∑–æ–≤–∞ perform_google_search...")
                        search_result = await perform_google_search(query)
                        logger.info(f"[{model_name}] !!! –ó–ê–í–ï–†–®–ï–ù–ò–ï –≤—ã–∑–æ–≤–∞ perform_google_search...")
                        s_res = Struct(); s_res.update({"content": search_result})
                        current_message_or_response = genai.protos.FunctionResponse(name="google_search", response=s_res)
                        logger.info(f"[{model_name}] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω FunctionResponse –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                        continue
                    else:
                         logger.warning(f"[{model_name}] !!! –í—ã–∑–æ–≤ google_search –±–µ–∑ 'query'.")
                         s_err = Struct(); s_err.update({"content": "–û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä 'query' –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."})
                         current_message_or_response = genai.protos.FunctionResponse(name="google_search", response=s_err)
                         continue
                else: # –ù–µ function call
                    try:
                        logger.info(f"[{model_name}] –≠—Ç–æ –Ω–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...")
                        final_text = response.text
                        logger.info(f"[{model_name}] –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
                        return final_text
                    except ValueError as e:
                         reason = getattr(response.prompt_feedback, 'block_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if hasattr(response, 'prompt_feedback') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                         raise ValueError(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {model_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}") from e
                    except AttributeError:
                        logger.warning(f"[{model_name}] !!! –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ .text")
                        try:
                            final_text = "".join(p.text for p in response.parts if hasattr(p, 'text'))
                            if final_text: logger.info(f"[{model_name}] –¢–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω –∏–∑ —á–∞—Å—Ç–µ–π."); return final_text
                            else: raise Exception("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ .parts")
                        except Exception as e_inner: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç") from e_inner
            else: # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                 reason = getattr(response.prompt_feedback, 'block_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if hasattr(response, 'prompt_feedback') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                 if reason != 'BLOCK_REASON_UNSPECIFIED': raise ValueError(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç {model_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}")
                 raise Exception(f"–ú–æ–¥–µ–ª—å {model_name} –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        except (ResourceExhausted, FailedPrecondition, GoogleAPIError) as e: logger.error(f"[{model_name}] !!! –û—à–∏–±–∫–∞ API: {e}"); raise e
        except ValueError as ve: logger.error(f"[{model_name}] !!! –û—à–∏–±–∫–∞ ValueError (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞?): {ve}"); raise ve
        except Exception as e: logger.exception(f"[{model_name}] !!! –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}"); raise e
    logger.error(f"[{model_name}] !!! –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ({attempt+1}) –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π."); raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è {model_name}.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; chat_id = update.effective_chat.id
    if chat_id in user_selected_model: del user_selected_model[chat_id]
    if chat_id in chat_histories: del chat_histories[chat_id]
    logger.info(f"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {chat_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
    default_model_display_name = DEFAULT_MODEL_ALIAS
    search_status = "–≤–∫–ª—é—á–µ–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)" if google_search_tool else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø - Gemini –±–æ—Ç.\n"
        f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model_display_name}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏.\n"
        f"üîç –ü–æ–∏—Å–∫ Google {search_status}.",
        reply_to_message_id=update.message.message_id
    )
    logger.info(f"/start –æ—Ç {user.id}")

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    keyboard = []
    for alias in LOADED_MODELS.keys():
        text = f"‚úÖ {alias}" if alias == current_alias else alias
        keyboard.append([InlineKeyboardButton(text, callback_data=alias)])
    imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
    if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS:
         keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞)", callback_data="imagen_info")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    selected_alias = query.data
    chat_id = query.message.chat_id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias == "imagen_info":
        await context.bot.send_message(chat_id=chat_id, text="–ú–æ–¥–µ–ª—å Imagen –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —á–∞—Ç–∞.")
        return
    if selected_alias not in LOADED_MODELS:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    if selected_alias != current_alias:
        user_selected_model[chat_id] = selected_alias
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ '{selected_alias}'")
        if chat_id in chat_histories:
            del chat_histories[chat_id]
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞.")
        keyboard = []
        for alias in LOADED_MODELS.keys():
            text = f"‚úÖ {alias}" if alias == selected_alias else alias
            keyboard.append([InlineKeyboardButton(text, callback_data=alias)])
        imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
        if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS:
             keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞)", callback_data="imagen_info")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{selected_alias}*\n‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        try: await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
        except: await context.bot.send_message(chat_id=chat_id, text=f"–ú–æ–¥–µ–ª—å *{selected_alias}* —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.", parse_mode=ParseMode.MARKDOWN)

async def test_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = " ".join(context.args)
    chat_id = update.effective_chat.id
    if not query: await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /testsearch"); return
    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {chat_id}: '{query}'")
    await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: '{query}'...")
    try:
        search_result = await perform_google_search(query)
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {chat_id} –≤–µ—Ä–Ω—É–ª: {search_result[:200]}...")
        await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n{search_result[:4000]}", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è {chat_id}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{user_message[:50]}...'")
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    selected_model_object = LOADED_MODELS.get(selected_alias)
    if not selected_model_object:
        logger.error(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å '{selected_alias}' –¥–ª—è {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        selected_alias = DEFAULT_MODEL_ALIAS; selected_model_object = LOADED_MODELS.get(DEFAULT_MODEL_ALIAS)
        if not selected_model_object: await update.message.reply_text("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); return
        else: await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å {selected_alias}"); user_selected_model[chat_id] = selected_alias
    final_text: Optional[str] = None; error_message: Optional[str] = None
    try:
        if chat_id not in chat_histories: chat_histories[chat_id] = selected_model_object.start_chat(history=[]); logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç {chat_id} —Å '{selected_alias}'")
        current_chat_session = chat_histories[chat_id]; logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å –º–æ–¥–µ–ª—å—é: {selected_alias}")
        final_text = await process_gemini_chat_turn(current_chat_session, selected_alias, user_message, context, chat_id)
    except ResourceExhausted as e_limit: logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –∫–≤–æ—Ç–∞: {e_limit}"); error_message = f"üòî –ú–æ–¥–µ–ª—å '{selected_alias}' –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. /model"
    except FailedPrecondition as e_precondition:
        logger.error(f"–ú–æ–¥–µ–ª—å '{selected_alias}' FailedPrecondition: {e_precondition}. –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏.")
        error_message = f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—å—é '{selected_alias}' —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π. –Ø –µ–µ —Å–±—Ä–æ—Å–∏–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        if chat_id in chat_histories:
            del chat_histories[chat_id] # –û—Ç—Å—Ç—É–ø
    except ValueError as e_blocked: logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {e_blocked}"); error_message = f"‚ö†Ô∏è {e_blocked}"
    except (GoogleAPIError, Exception) as e_other: logger.exception(f"–û—à–∏–±–∫–∞ '{selected_alias}': {e_other}"); error_message = f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ '{selected_alias}': {e_other}"
    if final_text:
        bot_response = final_text[:4090]
        try:
            await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç '{selected_alias}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user.id}")
        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            try:
                await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç AI.", reply_to_message_id=update.message.message_id) # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            except Exception:
                pass # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    elif error_message:
        try:
            await update.message.reply_text(error_message, reply_to_message_id=update.message.message_id)
            logger.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {error_message[:100]}...")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É '{error_message[:100]}...': {e}")
    else:
        logger.warning(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –æ—à–∏–±–∫–∏ –¥–ª—è {chat_id}.")
        if "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞" not in (error_message or "") and "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏" not in (error_message or "") :
            try: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_to_message_id=update.message.message_id)
            except Exception: pass

# --- main ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not LOADED_MODELS: logger.critical("–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"); return
    if not google_search_sync: logger.warning("–ó–∞–ø—É—Å–∫ –ë–ï–ó –ø–æ–∏—Å–∫–∞ Google.")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("testsearch", test_search))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

# --- END OF REALLY REALLY TRULY HONESTLY FULL CORRECTED main.py ---
