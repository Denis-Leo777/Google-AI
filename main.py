# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main.py —Å:
# - –ö–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 95 000 —Å–∏–º–≤–æ–ª–æ–≤
# - –í–∫–ª—é—á—ë–Ω–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Google Search (–º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å)
# - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π /temp 0.8
# - –û—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ /clear
# - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é: safety_settings=[] (—Ü–µ–Ω–∑—É—Ä–∞ —Å–Ω—è—Ç–∞)
# - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (—á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–¥–µ–ª–∏)
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤—ã–∑–æ–≤–æ–º Google Search –¥–ª—è google-generativeai v0.8+

import logging
import os
import asyncio
import signal
from urllib.parse import urljoin
import base64
import pytesseract
from PIL import Image
import io

import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import google.generativeai as genai
# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è Tool =====
from google.generativeai.types import Tool, GoogleSearchRetrieval
# ==========================================================

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')

for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

AVAILABLE_MODELS = {
    'gemini-2.5-pro-exp-03-25': '2.5 Pro',
    'gemini-2.0-flash': '2.0 Flash',
    'gemini-2.0-flash-exp-image-generation': 'Image Gen'
}
DEFAULT_MODEL = 'gemini-2.5-pro-exp-03-25'

user_selected_model = {}
user_search_enabled = {}
user_temperature = {}

MAX_CONTEXT_CHARS = 95000

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º–µ (—Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é)
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_selected_model[chat_id] = DEFAULT_MODEL
    user_search_enabled[chat_id] = True
    user_temperature[chat_id] = 1.0
    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–µ—Å—å, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø–æ —Ñ–∞–∫—Ç—É =====
    # context.chat_data['history'] = [] # –ù–µ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–¥–µ—Å—å
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª—å—é –ò–ò –æ—Ç Google - Gemini 2.5 Pro —Å Google-–ø–æ–∏—Å–∫–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —é–º–æ—Ä–æ–º) –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
        " \n/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ 'Image Gen')," # –î–æ–±–∞–≤–∏–ª Image Gen –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        " \n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."
        " \n/temp <0-2> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)."
        " \n/search_on /search_off ‚Äî –≤–∫–ª/–≤—ã–∫–ª Google –ü–æ–∏—Å–∫." # –î–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
        " \n–ö–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞: t.me/denisobovsyom" # –ü–æ–¥–ø—Ä–∞–≤–∏–ª –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç
    )

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ =====
    context.chat_data['history'] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        temp = float(context.args[0])
        if not (0 <= temp <= 2): # Gemini Pro –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 2.0
            raise ValueError
        user_temperature[chat_id] = temp
        await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0")

async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = True
    await update.message.reply_text("üîç Google-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á—ë–Ω")

async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = False
    await update.message.reply_text("üîá Google-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ ' if m == current_model else ''}{name}", callback_data=m)]
        for m, name in AVAILABLE_MODELS.items()
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    selected = query.data
    if selected in AVAILABLE_MODELS:
        user_selected_model[chat_id] = selected
        await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {AVAILABLE_MODELS[selected]}")
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text.strip()
    if not user_message: # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)
    use_search = user_search_enabled.get(chat_id, True)

    logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, –ü–æ–∏—Å–∫: {use_search}")

    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å—Ç–æ—Ä–∏—è –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, –æ–Ω –±—É–¥–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏ =====
    chat_history = context.chat_data.setdefault("history", [])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_history.append({"role": "user", "parts": [{"text": user_message}]})

    # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –°–¢–†–û–ì–û –ø–æ —Å–∏–º–≤–æ–ª–∞–º, —É–¥–∞–ª—è—è —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text")) # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç
    while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1: # –û—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ)
        removed_message = chat_history.pop(0) # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
        logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed_message.get('role')}, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)}, —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")

    try:
        # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è tools =====
        tools = [Tool(google_search_retrieval=GoogleSearchRetrieval())] if use_search else []

        # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞—ë–º system_instruction –Ω–∞–ø—Ä—è–º—É—é =====
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=[], # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ü–µ–Ω–∑—É—Ä—ã
            generation_config={"temperature": temperature},
            system_instruction=system_instruction_text
        )
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ user/model –∏—Å—Ç–æ—Ä–∏—é
        response = model.generate_content(chat_history)
        reply = response.text

        if not reply:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                block_reason = response.prompt_feedback.block_reason
                finish_reason = response.candidates[0].finish_reason if response.candidates else 'UNKNOWN'
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Block Reason: {block_reason}, Finish Reason: {finish_reason}")
                reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: {block_reason or finish_reason}"
            except Exception:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –ø—Ä–∏—á–∏–Ω—É –≤—ã—è—Å–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "model", "parts": [{"text": reply}]})

    except Exception as e:
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}" # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    await update.message.reply_text(reply)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO) # –ò–ª–∏ TYPING?
    photo_file = await update.message.photo[-1].get_file()
    file_bytes = await photo_file.download_as_bytearray()
    user_caption = update.message.caption # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ

    # –ü–æ–ø—ã—Ç–∫–∞ OCR
    try:
        image = Image.open(io.BytesIO(file_bytes))
        extracted_text = pytesseract.image_to_string(image, lang='rus+eng') # –£–∫–∞–∂–µ–º —è–∑—ã–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if extracted_text and extracted_text.strip():
            logger.info(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {extracted_text[:100]}...")
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ò –ø–æ–¥–ø–∏—Å—å, –æ–±—ä–µ–¥–∏–Ω–∏–º. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
            ocr_prompt = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n```\n{extracted_text.strip()}\n```\n"
            if user_caption:
                 user_prompt = f"{user_caption}\n{ocr_prompt}–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º, —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
            else:
                 user_prompt = f"{ocr_prompt}–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—ë–º."

            # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ handle_message
            # –≠—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Å—Ç—ã–ª—å–Ω–æ, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –ª–æ–≥–∏–∫—É handle_message (–∏—Å—Ç–æ—Ä–∏—è, –æ–±—Ä–µ–∑–∫–∞ –∏ —Ç.–¥.)
            fake_update = type('obj', (object,), {
                'effective_chat': update.effective_chat,
                'message': type('obj', (object,), {
                    'text': user_prompt,
                    'reply_text': update.message.reply_text # –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª —Ä–µ–ø–ª–∞–µ–º
                })
            })
            await handle_message(fake_update, context)
            return # –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    except Exception as e:
        logger.warning(f"ChatID: {chat_id} | OCR –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ OCR –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª

    # –ï—Å–ª–∏ OCR –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    b64_data = base64.b64encode(file_bytes).decode()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    prompt = user_caption if user_caption else "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    parts = [
        {"text": prompt},
        {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}} # TODO: –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å mime_type –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏?
    ]

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)
    use_search = user_search_enabled.get(chat_id, True)

    # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è tools =====
    tools = [Tool(google_search_retrieval=GoogleSearchRetrieval())] if use_search else []

    logger.info(f"ChatID: {chat_id} | –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, –ü–æ–∏—Å–∫: {use_search}")

    try:
        # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞—ë–º system_instruction –Ω–∞–ø—Ä—è–º—É—é =====
        # –ó–∞–º–µ—Ç–∫–∞: –ù–µ —É–≤–µ—Ä–µ–Ω, –Ω–∞ 100%, –∫–∞–∫ system_instruction –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ *—Å–∞–º–æ–≥–æ* –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
        # –Ω–æ –æ–Ω —Ç–æ—á–Ω–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ *—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç* –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=[],
            generation_config={"temperature": temperature},
            system_instruction=system_instruction_text
        )
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—Ç–æ—Ä–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        response = model.generate_content([{"role": "user", "parts": parts}])
        reply = response.text

        if not reply:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                block_reason = response.prompt_feedback.block_reason
                finish_reason = response.candidates[0].finish_reason if response.candidates else 'UNKNOWN'
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Block Reason: {block_reason}, Finish Reason: {finish_reason}")
                reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: {block_reason or finish_reason}"
            except Exception:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–∏—á–∏–Ω—É –≤—ã—è—Å–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

    except Exception as e:
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

    await update.message.reply_text(reply)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not update.message.document:
        return
    doc = update.message.document
    # –ü—Ä–æ–≤–µ—Ä–∏–º mime_type, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —á–∏—Ç–∞—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å zip
    if not doc.mime_type or not doc.mime_type.startswith('text/'):
         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, pdf —Å –ø–æ–º–æ—â—å—é –¥–æ–ø. –±–∏–±–ª–∏–æ—Ç–µ–∫
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt, .py, .csv –∏ —Ç.–ø.).")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {doc.mime_type}")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT) # –ò–ª–∏ TYPING?
    doc_file = await doc.get_file()
    file_bytes = await doc_file.download_as_bytearray()
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, –ø–æ—Ç–æ–º –∫–∞–∫ common latin-1
        text = file_bytes.decode("utf-8")
    except UnicodeDecodeError:
        try:
            text = file_bytes.decode("latin-1") # –ò–ª–∏ cp1251 –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤?
            logger.warning(f"ChatID: {chat_id} | –§–∞–π–ª –Ω–µ –≤ UTF-8, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω latin-1.")
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8 –∏–ª–∏ Latin-1.")
            return

    # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã API –∏ Telegram
    # MAX_CONTEXT_CHARS –∑–¥–µ—Å—å –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç.–∫. —ç—Ç–æ –ª–∏–º–∏—Ç –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ —Å–∞–º —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞.
    MAX_FILE_CHARS = 30000 # –ù–∞–ø—Ä–∏–º–µ—Ä, 30–∫ —Å–∏–º–≤–æ–ª–æ–≤
    if len(text) > MAX_FILE_CHARS:
        truncated = text[:MAX_FILE_CHARS]
        warning_msg = f"\n\n(‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤)"
        logger.warning(f"ChatID: {chat_id} | –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ '{doc.file_name}' –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        truncated = text
        warning_msg = ""

    user_caption = update.message.caption # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É

    if user_caption:
        user_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}', —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{user_caption}\".\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"
    else:
        user_prompt = f"–í–æ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '{doc.file_name}'. –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º?\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```\n{truncated}\n```{warning_msg}"

    # –°–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–∫–æ—Å—Ç—ã–ª—å" —Å —Ñ–µ–π–∫–æ–≤—ã–º update, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ handle_message
    fake_update = type('obj', (object,), {
        'effective_chat': update.effective_chat,
        'message': type('obj', (object,), {
            'text': user_prompt,
            'reply_text': update.message.reply_text
        })
    })
    await handle_message(fake_update, context)


async def setup_bot_and_server(stop_event: asyncio.Event):
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("temp", set_temperature))
    application.add_handler(CommandHandler("search_on", enable_search))
    application.add_handler(CommandHandler("search_off", disable_search))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–ï–†–ï–î —Ç–µ–∫—Å—Ç–æ–≤—ã–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Document.TEXT, handle_document)) # –Ø–≤–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑ MessageHandler –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # ===== –£–î–ê–õ–ï–ù–û: –õ–∏—à–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä handle_image_prompt, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É =====
    # application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_image_prompt))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, f"/{GEMINI_WEBHOOK_PATH}") # –î–æ–±–∞–≤–∏–ª / –ø–µ—Ä–µ–¥ –ø—É—Ç–µ–º –≤–µ–±—Ö—É–∫–∞
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    await application.bot.set_webhook(webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True) # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
    return application, run_web_server(application, stop_event)


async def run_web_server(application: Application, stop_event: asyncio.Event):
    app = aiohttp.web.Application()
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∂–∏–≤–æ—Å—Ç–∏ –¥–ª—è Render
    async def health_check(request):
        return aiohttp.web.Response(text="OK")
    app.router.add_get('/', health_check) # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ Render'–æ–º

    # –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram
    app['bot_app'] = application
    webhook_path = f"/{GEMINI_WEBHOOK_PATH}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    logger.info(f"–í–µ–±—Ö—É–∫ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø—É—Ç–∏: {webhook_path}")

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000")) # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–≤–æ–π PORT
    site = aiohttp.web.TCPSite(runner, "0.0.0.0", port)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        # Keep the server running until stop_event is set
        await stop_event.wait()
    finally:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiohttp!")
        return aiohttp.web.Response(status=500, text="Internal Server Error: Bot application not configured")

    try:
        data = await request.json()
        # logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç: {data}") # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
        update = Update.de_json(data, application.bot)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ø–¥–µ–π—Ç–∞ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç—å Telegram (200 OK)
        # –∏ –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–æ–≤, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ–ª–≥–æ–π
        asyncio.create_task(application.process_update(update))
        # –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ –º—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å
        return aiohttp.web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π Telegram, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–ø–∞–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —Ä–∞–∑ —É–∂ –º—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å
        return aiohttp.web.Response(text="OK", status=200) # –û—Ç–≤–µ—á–∞–µ–º –û–ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


async def main():
    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, stop_event.set)

    application = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ
    web_server_task = None
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        application, web_server_coro = await setup_bot_and_server(stop_event)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –∑–∞–¥–∞—á—É asyncio
        web_server_task = asyncio.create_task(web_server_coro)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∂–¥–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
        await stop_event.wait()

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    finally:
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if web_server_task and not web_server_task.done():
             # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è (–µ—Å–ª–∏ –æ–Ω –∂–¥–µ—Ç stop_event)
             # stop_event —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–∏–≥–Ω–∞–ª–∞
             # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–µ—Ä–≤–µ—Ä–∞
             logger.info("–û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
             try:
                 await asyncio.wait_for(web_server_task, timeout=10.0) # –î–∞–µ–º 10 —Å–µ–∫ –Ω–∞ —à—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
             except asyncio.TimeoutError:
                 logger.warning("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω—è—é –∑–∞–¥–∞—á—É...")
                 web_server_task.cancel()
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏/–æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

        if application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞...")
            await application.shutdown()
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –±—ã–ª –ø–æ—Ç–µ—Ä—è–Ω.")

        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)
