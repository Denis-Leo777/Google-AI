import logging
import os
import asyncio
import signal
import time
import secrets
import json
from urllib.parse import urljoin

import aiohttp.web
import telegram.ext
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

import google.genai as genai  # –Ω–æ–≤—ã–π API, GenerativeModel –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–û–í ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô –ò –ö–õ–ò–ï–ù–¢–ê ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
if not TELEGRAM_BOT_TOKEN:
    logger.critical("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"); exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY:
    logger.critical("–ö–ª—é—á Google API –Ω–µ –Ω–∞–π–¥–µ–Ω!"); exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not WEBHOOK_HOST:
    logger.critical("WEBHOOK_HOST –Ω–µ —É–∫–∞–∑–∞–Ω!"); exit("WEBHOOK_HOST –Ω–µ —É–∫–∞–∑–∞–Ω")

try:
    gemini_client = genai.Client(api_key=GOOGLE_API_KEY)
    logger.info("–ö–ª–∏–µ–Ω—Ç google.genai.Client —Å–æ–∑–¥–∞–Ω.")
except Exception as e:
    logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini!")
    exit("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini.")

# –ú–æ–¥–µ–ª–∏ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
AVAILABLE_MODELS = {
    '‚ö° Flash 2.0': 'models/gemini-2.0-flash-001',
    '‚ú® Pro 2.5': 'models/gemini-2.5-pro-exp-03-25'
}
DEFAULT_MODEL_ALIAS = '‚ú® Pro 2.5'
if DEFAULT_MODEL_ALIAS not in AVAILABLE_MODELS:
    DEFAULT_MODEL_ALIAS = next(iter(AVAILABLE_MODELS))
    logger.warning(f"–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {DEFAULT_MODEL_ALIAS}")

user_selected_model = {}  # chat_id -> alias
chat_histories = {}       # chat_id -> list —Å–æ–æ–±—â–µ–Ω–∏–π

system_instruction_text = (
    "–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –î–∞–≤–∞–π —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º, –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—Ü–µ–Ω–∫—É." 
    "–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏, –Ω–æ –±–µ–∑ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–æ–≤." 
    "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ –ø–∏—à–µ—à—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç–µ–º–µ." 
    "–ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ –∫–æ–Ω—Å–ø–µ–∫—Ç, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–∞—Å—Å—É –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞, –∏–ª–∏ –¥—Ä—É–≥–∞—è, —Ç—Ä–µ–±—É—é—â–∞—è –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç–∞, —Ç–æ –æ—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1500 –∑–Ω–∞–∫–æ–≤." 
    "–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ –æ—Ç—Å—ã–ª–∫–∏, —à—É—Ç–∫–∏ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Ç–µ–º–∞—Ö, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥ –∏ –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –±–µ–∑–æ–±–∏–¥–Ω–∞—è –∏—Ä–æ–Ω–∏—è –∏ —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è, –ø–∞—Ä–æ–¥–∏–∏ –Ω–∞ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞ –∞—Ñ–æ—Ä–∏–∑–º—ã, –∏–≥—Ä–∞ —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª–∞ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–∞, –∏—Ä–æ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ç–æ–Ω–∫–∏–µ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç-–º–æ–¥–µ—Ä–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä." 
    "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò, –∏–∑–±–µ–≥–∞–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–ª–∏–∑–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, –≤–∫–ª—é—á–∞–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π, –ø—Ä–∏–º–µ–Ω—è–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–∏, –≤–∞—Ä—å–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã –∏ —Ñ–∏–≥—É—Ä—ã —Ä–µ—á–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–¥—è–º, –≤—Å—Ç–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –¥–æ–±–∞–≤–ª—è–π –æ—Å—Ç—Ä–æ—É–º–∏–µ." 
    "–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏, —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É(–∏) –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –≤–µ—Ä—Å–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –∫–∞–∫ —à–∞–≥ –≤–ø–µ—Ä–µ–¥ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–æ–π –±—ã–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞)." 
    "–í–Ω–µ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏. –ù–ï –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —Å–º–µ–∂–Ω—ã–µ —á–∞—Å—Ç–∏, –ù–ï —É–¥–∞–ª—è–π –Ω–∏—á–µ–≥–æ, –ù–ï –º–µ–Ω—è–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–æ–º–Ω–µ–Ω–∏–π, —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–∞–∑—É. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—è–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –æ—à–∏–±–∫–∞, –¥–æ–±–∞–≤—å —ç—Ç–æ –≤ '–∫—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫' –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª—é–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏—Ö '–±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫'." 
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –∫–æ–¥) –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç (–∫–æ–¥). –ù–µ –ø—ã—Ç–∞–π—Å—è '—É–ª—É—á—à–∏—Ç—å' –∏–ª–∏ '–ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å' –µ–≥–æ —á–∞—Å—Ç–∏, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—Å–∏–ª." 
    "–í –¥–∏–∞–ª–æ–≥–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –≤—Å–µ–≥–¥–∞ —è–≤–Ω–æ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Ä–µ—Ç—Å—è –∑–∞ –æ—Å–Ω–æ–≤—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è '–ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—á–µ–π' –∏–ª–∏ '–ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π'." 
    "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –∏–¥–µ–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–æ–∏—Ö –∑–∞–¥–∞—á –∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏—Ö."
)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; chat_id = update.effective_chat.id
    user_selected_model.pop(chat_id, None)
    chat_histories.pop(chat_id, None)
    search_status = "–≤–∫–ª—é—á–µ–Ω (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"  # —É–ø—Ä–æ—â–µ–Ω–æ
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ë–æ—Ç Gemini v70 (Webhook).\n\n–ú–æ–¥–µ–ª—å: <b>{DEFAULT_MODEL_ALIAS}</b>\nüîç –ü–æ–∏—Å–∫: <b>{search_status}</b>.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /model –¥–ª—è —Å–º–µ–Ω—ã, /start –¥–ª—è —Å–±—Ä–æ—Å–∞.\n\n–°–ø—Ä–∞—à–∏–≤–∞–π!"
    )

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    keyboard = [[InlineKeyboardButton(f"‚úÖ {alias}" if alias == current_alias else alias, callback_data=alias)]
                for alias in AVAILABLE_MODELS.keys()]
    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π.")
        return
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    selected_alias = query.data; chat_id = query.message.chat_id; user_id = query.from_user.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias not in AVAILABLE_MODELS:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π alias: {selected_alias}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏.")
        return
    if selected_alias == current_alias:
        logger.info(f"{user_id} –ø–µ—Ä–µ–≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: {selected_alias}")
        await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
        return
    user_selected_model[chat_id] = selected_alias
    chat_histories.pop(chat_id, None)
    logger.info(f"{user_id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å: {selected_alias}")
    keyboard = [[InlineKeyboardButton(f"‚úÖ {alias}" if alias == selected_alias else alias, callback_data=alias)]
                for alias in AVAILABLE_MODELS.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await query.edit_message_text(text=f"‚úÖ –ú–æ–¥–µ–ª—å: *{selected_alias}*! \n–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\n\n–ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"–ú–æ–¥–µ–ª—å: *{selected_alias}*!\n–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", parse_mode=ParseMode.MARKDOWN)

# --- –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message or not update.message.text:
            logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."); return
        user_message = update.message.text.strip()
        chat_id = update.effective_chat.id
        message_id = update.message.message_id
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {chat_id}: '{user_message[:80]}'")
        selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
        model_id = AVAILABLE_MODELS.get(selected_alias)
        if not model_id:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è '{selected_alias}'")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞.", reply_to_message_id=message_id)
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        current_history = chat_histories.get(chat_id, [])
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è API: role –∏ parts (—Ç–µ–∫—Å—Ç)
            user_part = {'text': user_message}
            api_contents = current_history + [{'role': 'user', 'parts': [user_part]}]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
            api_contents = current_history + [{'role': 'user', 'parts': [{'text': user_message}]}]

        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ '{model_id}', –∏—Å—Ç–æ—Ä–∏—è: {len(current_history)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Ç.–ø.
        tools_list = None  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –∏–ª–∏ –∏–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∏—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        generation_config_for_api = {}  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–æ–¥–µ temperature, max_output_tokens, –∏ —Ç.–¥.

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        system_instruction_content = {'parts': [{'text': system_instruction_text}]} if system_instruction_text else None

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
        response = gemini_client.models.generate_content(
            model=model_id,
            contents=api_contents,
            generation_config=(generation_config_for_api if generation_config_for_api else None),
            tools=tools_list,
            system_instruction=system_instruction_content
        )

        processing_time = time.monotonic() - time.monotonic()  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ '{model_id}' –ø–æ–ª—É—á–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫.")
        final_text = response.text  # Quick accessor –∏–∑ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–≤–µ—Ç–∞

        if final_text and not final_text.startswith("‚ö†Ô∏è"):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            try:
                history_to_update = chat_histories.get(chat_id, []).copy()
                history_to_update.append({'role': 'user', 'parts': [{'text': user_message}]})
                history_to_update.append({'role': 'model', 'parts': [{'text': final_text}]})
                chat_histories[chat_id] = history_to_update
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–π: {len(chat_histories[chat_id])}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        elif final_text and final_text.startswith("‚ö†Ô∏è"):
            logger.warning("–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É, –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            final_text = None

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å—Å—ã–ª–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞)
        reply_markup = None
        if final_text:
            max_length = 4096
            bot_response = final_text if len(final_text) <= max_length else final_text[:max_length - 3] + "..."
            try:
                await update.message.reply_text(bot_response, reply_to_message_id=message_id, reply_markup=reply_markup)
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({len(bot_response)} —Å–∏–º–≤.).")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ Telegram: {e}")
        elif not final_text:
            await update.message.reply_text("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫. ü§∑", reply_to_message_id=message_id)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. ü§Ø", reply_to_message_id=message_id)
        except Exception as e_reply:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e_reply}")

# --- –í–ï–ë-–°–ï–†–í–ï–† –ò –ó–ê–ü–£–°–ö ---
async def handle_ping(request: aiohttp.web.Request) -> aiohttp.web.Response:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω HTTP –ø–∏–Ω–≥ –æ—Ç {request.remote}")
    return aiohttp.web.Response(text="OK", status=200)

async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç Application –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return aiohttp.web.Response(status=500, text="Internal Server Error")
    if request.method != "POST":
        return aiohttp.web.Response(status=405, text="Method Not Allowed")
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        asyncio.create_task(application.process_update(update))
        return aiohttp.web.Response(status=200, text="OK")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return aiohttp.web.Response(status=500, text="Internal Server Error")

async def run_web_server(port: int, stop_event: asyncio.Event, application: Application):
    app = aiohttp.web.Application()
    app['bot_app'] = application
    app.router.add_get('/', handle_ping)
    webhook_path = f"/{secrets.token_urlsafe(32)}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    runner = aiohttp.web.AppRunner(app)
    await runner.setup()
    site = aiohttp.web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}, –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞: {webhook_path}")
    await stop_event.wait()
    await runner.cleanup()

async def setup_bot_and_server(stop_event: asyncio.Event):
    application = Application.builder().token(TELEGRAM_BOT_TOKEN)\
        .connect_timeout(40).read_timeout(40).pool_timeout(60).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    port = int(os.environ.get("PORT", 8080))
    await application.initialize()
    webhook_path = f"/{secrets.token_urlsafe(32)}"
    webhook_url = urljoin(WEBHOOK_HOST, webhook_path)
    try:
        await application.bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise
    web_server_coro = run_web_server(port, stop_event, application)
    return application, web_server_coro

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    stop_event = asyncio.Event()
    try:
        application, web_server_coro = loop.run_until_complete(setup_bot_and_server(stop_event))
        web_server_task = loop.create_task(web_server_coro)
        for s in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(s, lambda s=s: loop.create_task(stop_event.set()))
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        loop.run_forever()
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ!")
    finally:
        loop.run_until_complete(application.shutdown())
        loop.close()
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")


