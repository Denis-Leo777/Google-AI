# –û–°–ù–û–í–ê: main.py v13.6
# –ò–ó–ú–ï–ù–Ø–ï–ú–ê–Ø –§–£–ù–ö–¶–ò–Ø: generate_response
# –ü–†–ò–ß–ò–ù–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ RESOURCE_EXHAUSTED –¥–ª—è –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.

async def generate_response(client: genai.Client, request_contents: list, context: ContextTypes.DEFAULT_TYPE, tools: list, system_instruction_override: str = None) -> types.GenerateContentResponse | str:
    chat_id = context.chat_data.get('id', 'Unknown')
    
    if system_instruction_override:
        final_system_instruction = system_instruction_override
    else:
        try:
            final_system_instruction = SYSTEM_INSTRUCTION.format(current_time=get_current_time_str())
        except KeyError:
            logger.warning("–í system_prompt.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {current_time}. –î–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞.")
            final_system_instruction = SYSTEM_INSTRUCTION

    config = types.GenerateContentConfig(
        safety_settings=SAFETY_SETTINGS, 
        tools=tools,
        system_instruction=types.Content(parts=[types.Part(text=final_system_instruction)]),
        temperature=1.0,
        thinking_config=types.ThinkingConfig(thinking_budget=24576)
    )
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            response = await client.aio.models.generate_content(
                model=MODEL_NAME,
                contents=request_contents,
                config=config
            )
            if response and response.candidates and response.candidates[0].content and response.candidates[0].content.parts:
                logger.info(f"ChatID: {chat_id} | –û—Ç–≤–µ—Ç –æ—Ç Gemini API –ø–æ–ª—É—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}).")
                return response
            
            logger.warning(f"ChatID: {chat_id} | –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}). –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º.")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)

        except genai_errors.APIError as e:
            logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ Google API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}", exc_info=False)
            is_retryable = hasattr(e, 'http_status') and 500 <= e.http_status < 600
            
            if is_retryable and attempt < max_retries - 1:
                delay = 2 ** (attempt + 1)
                logger.warning(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
                await asyncio.sleep(delay)
                continue
            else:
                error_text = str(e).lower()
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
                if "resource_exhausted" in error_text:
                     return "‚è≥ <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É, —è –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∏–ª–∞—Å—å."
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
                if "input token count" in error_text and "exceeds the maximum" in error_text:
                    return "ü§Ø <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è!</b>\n–ö–∞–∂–µ—Ç—Å—è, –º—ã –∑–∞–±–æ–ª—Ç–∞–ª–∏—Å—å, –∏ —è —É–∂–µ –Ω–µ –º–æ–≥—É —É–¥–µ—Ä–∂–∞—Ç—å –≤ –≥–æ–ª–æ–≤–µ –≤–µ—Å—å –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                if "permission denied" in error_text:
                    return "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É.</b>\n–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Google (—Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è 48 —á–∞—Å–æ–≤) –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ."
                return f"‚ùå <b>–û—à–∏–±–∫–∞ Google API:</b>\n<code>{html.escape(str(e))}</code>"
        
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}", exc_info=True)
            return f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:</b>\n<code>{html.escape(str(e))}</code>"
    
    logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
    return "–Ø –Ω–µ —Å–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
