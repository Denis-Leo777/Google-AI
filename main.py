# --- START OF REALLY x11 FULL CORRECTED main.py ---

import logging
import os
import asyncio
# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢
import google.genai as genai
import time
import random
# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å types –∏–∑ google.genai
try:
    from google.genai import types as genai_types
    # logger —Ç—É—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É print
    print("INFO: –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω types –∏–∑ google.genai")
except ImportError:
    print("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å types –∏–∑ google.genai.")
    class DummyTypes: pass
    genai_types = DummyTypes()
except NameError: # –ï—Å–ª–∏ logger –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    print("!!! –ù–ï –£–î–ê–õ–û–°–¨ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å types –∏–∑ google.genai (NameError).")
    class DummyTypes: pass
    genai_types = DummyTypes()


from typing import Optional, Dict, Union, Any, Tuple, List
import urllib.parse

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º logger

# –ü–µ—á–∞—Ç—å –≤–µ—Ä—Å–∏–∏
try: logger.info(f"!!!!!!!!!! –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è google-genai: {genai.__version__} !!!!!!!!!!")
except Exception as e: logger.error(f"!!!!!!!!!! –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ google-genai: {e} !!!!!!!!!!")

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
try: from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
except ImportError: logger.warning("google.api_core.exceptions –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); ResourceExhausted=Exception; GoogleAPIError=Exception; FailedPrecondition=Exception

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Gemini —Ç–∏–ø—ã –¥–ª—è Struct
try: from google.protobuf.struct_pb2 import Struct
except ImportError: logger.warning("google.protobuf –Ω–µ –Ω–∞–π–¥–µ–Ω."); Struct = dict

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    '‚ö° Flash 2.0': 'models/gemini-2.0-flash-001',
    '‚ú® Pro 2.5': 'models/gemini-2.5-pro-exp-03-25',
    'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)': 'imagen-3.0-generate-002',
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash 2.0'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–°–¢–†–û–ï–ù–ù–û–ì–û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search ---
google_search_tool = None; search_tool_type_used = None
try:
    if hasattr(genai_types, 'GoogleSearchRetrieval'): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ 1.5 —Å—Ç–∏–ª—å
         google_search_retrieval_config = genai_types.GoogleSearchRetrieval()
         google_search_tool = genai_types.Tool(google_search_retrieval=google_search_retrieval_config)
         search_tool_type_used = "GoogleSearchRetrieval (v1.5)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    elif hasattr(genai_types, 'GoogleSearch'): # –ü–æ—Ç–æ–º 2.0 —Å—Ç–∏–ª—å
         google_search_config = genai_types.GoogleSearch()
         google_search_tool = genai_types.Tool(google_search=google_search_config)
         search_tool_type_used = "GoogleSearch (v2.0+)"
         logger.info(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{search_tool_type_used}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    else: logger.error("!!! –ö–ª–∞—Å—Å—ã GoogleSearch/GoogleSearchRetrieval –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ genai_types.")
except Exception as e: logger.exception(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞: {e}")

# --- –°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –∏ –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ï–ô ---
LOADED_MODELS_ANY: Dict[str, Any] = {}; gemini_client = None
try:
    gemini_client = genai.Client(); logger.info("–ö–ª–∏–µ–Ω—Ç google.genai —Å–æ–∑–¥–∞–Ω.")
    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ –∫–æ–Ω—Å–ø–µ–∫—Ç, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–∞—Å—Å—É –≤–æ–ø—Ä–æ—Å–æ–≤, –∏–ª–∏ –¥—Ä—É–≥–∞—è, —Ç—Ä–µ–±—É—é—â–∞—è –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç–∞. "
        "–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
        "–î–∞–≤–∞–π —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º, –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—Ü–µ–Ω–∫—É. "
        "–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏, –±–µ–∑ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, - –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ. "
        "–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ –æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, —à—É—Ç–∫–∏ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Ç–µ–º–∞—Ö, –∏—Ä–æ–Ω–∏—è –∏ —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è, "
        "—Ç–æ–Ω–∫–∏–µ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –Ω–∞–º—ë–∫–∏, –ø–æ—Å—Ç-–º–æ–¥–µ—Ä–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, "
        "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –ø–∞—Ä–æ–¥–∏–∏ –Ω–∞ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞ –∞—Ñ–æ—Ä–∏–∑–º—ã, –∏–≥—Ä–∞ —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª–∞ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–∞, –∏—Ä–æ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º. "
        "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã: –∏–∑–±–µ–≥–∞–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–ª–∏–∑–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤; –≤–∫–ª—é—á–∞–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π; "
        "–ø—Ä–∏–º–µ–Ω—è–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–∏; –Ω–µ –¥–æ–ø—É—Å–∫–∞–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò; –≤–∞—Ä—å–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, "
        "–∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π; –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã –∏ —Ñ–∏–≥—É—Ä—ã —Ä–µ—á–∏; "
        "–∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–¥—è–º; –≤—Å—Ç–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ; –¥–æ–±–∞–≤–ª—è–π –æ—Å—Ç—Ä–æ—É–º–∏–µ. "
        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª–∏—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–±–æ—Ä—ã'), "
        "–ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, "
        "–¢–´ –û–ë–Ø–ó–ê–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç google_search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–ê–ú–û–ô –ê–ö–¢–£–ê–õ–¨–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ò–ó –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–• –û–ü–ò–°–ê–ù–ò–ô –°–¢–†–ê–ù–ò–¶. "
        "–ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ google_search –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    )
    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower(): logger.warning(f"'{alias}' –ø—Ä–æ–ø—É—â–µ–Ω–∞."); continue
        current_tools = None; model_search_type = None
        if google_search_tool:
             if '1.5' in model_id and search_tool_type_used == "GoogleSearchRetrieval (v1.5)":
                  current_tools = [google_search_tool]; model_search_type = search_tool_type_used
             elif ('2.0' in model_id or '2.5' in model_id) and search_tool_type_used == "GoogleSearch (v2.0+)":
                  # –î–ª—è 2.x –º–æ–¥–µ–ª–µ–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å GoogleSearch, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å Retrieval
                  if hasattr(genai_types, 'GoogleSearchRetrieval'):
                      current_tools = [genai_types.Tool(google_search_retrieval=genai_types.GoogleSearchRetrieval())]
                      model_search_type = "GSR (v1.5 For 2.x)"
                      logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º GoogleSearchRetrieval –¥–ª—è –º–æ–¥–µ–ª–∏ 2.x '{alias}'")
                  else:
                       logger.warning(f"GoogleSearch –Ω–µ –Ω–∞–π–¥–µ–Ω, GoogleSearchRetrieval —Ç–æ–∂–µ. –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è '{alias}'.")

             else: logger.warning(f"–ù–µ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è '{alias}'.")
        try:
            model = gemini_client.get_generative_model(model=model_id, system_instruction=system_instruction_text, tools=current_tools)
            LOADED_MODELS_ANY[alias] = model
            logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ({model_id}) [Search: {'Enabled ('+model_search_type+')' if current_tools else 'Disabled'}] –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e: logger.error(f"!!! –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ '{alias}': {e}")
    if not LOADED_MODELS_ANY: raise RuntimeError("–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π!")
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS_ANY:
        try: DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS_ANY)); logger.warning(f"–î–µ—Ñ–æ–ª—Ç: {DEFAULT_MODEL_ALIAS}")
        except StopIteration: raise RuntimeError("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π.")
except Exception as e: logger.exception("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!"); exit(...)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}; chat_histories: Dict[int, Any] = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def extract_response_text(response) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã."""
    try: return response.text
    except ValueError:
        logger.warning("ValueError –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ text"); block_reason = getattr(response.prompt_feedback, 'block_reason', None) if hasattr(response, 'prompt_feedback') else None; block_reason_exists = hasattr(genai_types, 'BlockReason') if 'genai_types' in globals() else False;
        if block_reason and block_reason_exists and block_reason != genai_types.BlockReason.BLOCK_REASON_UNSPECIFIED: logger.warning(f"–ë–ª–æ–∫: {block_reason}")
        return None
    except AttributeError:
        logger.warning("–ù–µ—Ç .text, –ø—Ä–æ–±—É–µ–º parts.")
        try:
            if response.candidates and response.candidates[0].content.parts: parts_text = "".join(p.text for p in response.candidates[0].content.parts if hasattr(p, 'text')); return parts_text if parts_text else None
            else: logger.warning("–ù–µ—Ç parts."); return None
        except Exception as e_inner: logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e_inner}"); return None

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if chat_id in user_selected_model:
        del user_selected_model[chat_id] # –û—Ç—Å—Ç—É–ø
    if chat_id in chat_histories:
        del chat_histories[chat_id] # –û—Ç—Å—Ç—É–ø
    # –õ–æ–≥–∏—Ä—É–µ–º –ü–û–°–õ–ï –ø–æ–ø—ã—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏, –∏—Å—Ç–æ—Ä–∏—è) –¥–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start") # –û—Ç—Å—Ç—É–ø

    default_model_display_name = DEFAULT_MODEL_ALIAS
    search_status = f"–≤–∫–ª—é—á–µ–Ω ({search_tool_type_used})" if google_search_tool else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø - Gemini –±–æ—Ç.\n"
        f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model_display_name}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏.\n"
        f"üîç –ü–æ–∏—Å–∫ Google {search_status}.",
        reply_to_message_id=update.message.message_id
    )
    logger.info(f"/start –æ—Ç {user.id}")

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id; current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS); keyboard = []; imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
    for alias in LOADED_MODELS_ANY.keys():
        keyboard.append([InlineKeyboardButton(f"‚úÖ {alias}" if alias == current_alias else alias, callback_data=alias)]) # –û—Ç—Å—Ç—É–ø
    if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS_ANY:
        keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞)", callback_data="imagen_info")]) # –û—Ç—Å—Ç—É–ø
    reply_markup = InlineKeyboardMarkup(keyboard); await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer(); selected_alias = query.data; chat_id = query.message.chat_id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias == "imagen_info": await context.bot.send_message(chat_id=chat_id, text="Imagen –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return
    if selected_alias not in LOADED_MODELS_ANY: await query.edit_message_text(text="–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return
    if selected_alias != current_alias:
        user_selected_model[chat_id] = selected_alias; logger.info(f"{chat_id} —Å–º–µ–Ω–∏–ª –Ω–∞ '{selected_alias}'")
        if chat_id in chat_histories: del chat_histories[chat_id]; logger.info(f"–ò—Å—Ç–æ—Ä–∏—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞.")
        keyboard = []; imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
        for alias in LOADED_MODELS_ANY.keys():
            keyboard.append([InlineKeyboardButton(f"‚úÖ {alias}" if alias == selected_alias else alias, callback_data=alias)]) # –û—Ç—Å—Ç—É–ø
        if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS_ANY:
            keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞)", callback_data="imagen_info")]) # –û—Ç—Å—Ç—É–ø
        reply_markup = InlineKeyboardMarkup(keyboard); await query.edit_message_text(text=f"‚úÖ –ú–æ–¥–µ–ª—å: *{selected_alias}*\n‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        try:
            await query.edit_message_reply_markup(reply_markup=query.message.reply_markup) # –û—Ç—Å—Ç—É–ø
        except Exception as e:
            logger.warning(f"–ù–µ —Ä–µ–¥. —Ä–∞–∑–º–µ—Ç–∫—É {chat_id}: {e}") # –û—Ç—Å—Ç—É–ø
            await context.bot.send_message(chat_id=chat_id, text=f"–ú–æ–¥–µ–ª—å *{selected_alias}* —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.", parse_mode=ParseMode.MARKDOWN) # –û—Ç—Å—Ç—É–ø

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id; logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{user_message[:50]}...'")
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS); selected_model_object = LOADED_MODELS_ANY.get(selected_alias)
    if not selected_model_object: logger.error(...); await update.message.reply_text("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
    final_text: Optional[str] = None; search_suggestions: List[str] = []; error_message: Optional[str] = None
    try:
        if chat_id not in chat_histories: chat_histories[chat_id] = selected_model_object.start_chat(history=[]); logger.info(...)
        current_chat_session = chat_histories[chat_id]; logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å {selected_alias} (–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)")
        await context.bot.send_chat_action(...)
        response = await current_chat_session.send_message_async(content=user_message)
        logger.info(f"[{selected_alias}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        final_text = extract_response_text(response)
        if final_text is None: raise ValueError(...)
        if response.candidates and hasattr(response.candidates[0], 'grounding_metadata') and response.candidates[0].grounding_metadata:
             metadata = response.candidates[0].grounding_metadata
             if hasattr(metadata, 'web_search_queries') and metadata.web_search_queries: search_suggestions = list(metadata.web_search_queries); logger.info(...)
             else: logger.info(...)
        else: logger.info(...)
    except ResourceExhausted as e_limit:
        logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –∫–≤–æ—Ç–∞: {e_limit}") # –û—Ç—Å—Ç—É–ø
        error_message = f"üòî '{selected_alias}' –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. /model"
    except FailedPrecondition as e_precondition:
        logger.error(f"–ú–æ–¥–µ–ª—å '{selected_alias}' FailedPrecondition: {e_precondition}. –°–±—Ä–æ—Å.") # –û—Ç—Å—Ç—É–ø
        error_message = f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è '{selected_alias}' —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ."
        if chat_id in chat_histories:
            del chat_histories[chat_id]
    except ValueError as e_blocked:
        logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {e_blocked}") # –û—Ç—Å—Ç—É–ø
        error_message = f"‚ö†Ô∏è {e_blocked}"
    except (GoogleAPIError, Exception) as e_other:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ–ª—å—é '{selected_alias}': {e_other}") # –û—Ç—Å—Ç—É–ø
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª—å—é '{selected_alias}': {e_other}"
    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    reply_markup = None
    if search_suggestions:
        keyboard = [] # –û—Ç—Å—Ç—É–ø
        for suggestion in search_suggestions: search_url = f"..."; keyboard.append(...) # –û—Ç—Å—Ç—É–ø
        if keyboard: reply_markup = InlineKeyboardMarkup(keyboard); logger.info(...)
    if final_text:
        bot_response = final_text[:4090] # –û—Ç—Å—Ç—É–ø
        try: await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id, reply_markup=reply_markup); logger.info(...)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}") # –û—Ç—Å—Ç—É–ø
            try: await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.", reply_to_message_id=update.message.message_id)
            except Exception: pass
    elif error_message:
        try: await update.message.reply_text(error_message, reply_to_message_id=update.message.message_id); logger.info(...)
        except Exception as e: logger.error(...)
    else:
        logger.warning(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –æ—à–∏–±–∫–∏ –¥–ª—è {chat_id}.") # –û—Ç—Å—Ç—É–ø
        if "–ò—Å—Ç–æ—Ä–∏—è" not in (error_message or "") and "–û—Ç–≤–µ—Ç" not in (error_message or ""):
             try: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.", reply_to_message_id=update.message.message_id)
             except Exception: pass

# --- main ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not LOADED_MODELS_ANY: logger.critical("–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"); return
    if not google_search_tool: logger.warning(f"–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–∏–ø: {search_tool_type_used}).")
    else: logger.info(f"–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–∏–ø: {search_tool_type_used}).")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

# --- END OF REALLY x11 FULL CORRECTED main.py ---
