import logging
 import os
 import asyncio
 import signal
 from urllib.parse import urljoin
 import base64
 import io
 import time
 
 import aiohttp
 import aiohttp.web
 import pytesseract
 from PIL import Image
 from bs4 import BeautifulSoup
 
 from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
 from telegram.constants import ChatAction
 from telegram.ext import (
     Application,
     CommandHandler,
     MessageHandler,
     CallbackQueryHandler,
     ContextTypes,
     filters
 )
 import google.generativeai as genai
 
 # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
 logger = logging.getLogger(__name__)
 
 # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
 GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
 WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
 GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')
 
 for var, name in [
     (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
     (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
     (WEBHOOK_HOST, "WEBHOOK_HOST"),
     (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
 ]:
     if not var:
         logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
         exit(1)
 
 # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Google –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI
 genai.configure(api_key=GOOGLE_API_KEY)
 
 AVAILABLE_MODELS = {
     'gemini-2.5-pro-exp-03-25': '2.5 Pro',
     'gemini-2.0-flash': '2.0 Flash',
     'gemini-2.0-flash-exp-image-generation': 'Image Gen'
 }
 DEFAULT_MODEL = 'gemini-2.5-pro-exp-03-25'
 
 user_selected_model = {}
 user_search_enabled = {}
 user_temperature = {}
 
 MAX_CONTEXT_CHARS = 95000
 
 system_instruction_text = (
     "–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
     "–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
     "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
     "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
     "–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
     "–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
     "–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
     "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
     "–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
 )
 
 # –§—É–Ω–∫—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ Google –ø–æ–∏—Å–∫–∞ (—Å–∫—Ä–µ–π–ø–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
 async def free_google_search(query: str) -> str:
     headers = {
         'User-Agent': (
             'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
             'AppleWebKit/537.36 (KHTML, like Gecko) '
             'Chrome/98.0.4758.102 Safari/537.36'
         )
     }
     search_url = f"https://www.google.com/search?q={query}"
     logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º Google –ø–æ–∏—Å–∫: {search_url}")
     try:
         async with aiohttp.ClientSession() as session:
             async with session.get(search_url, headers=headers) as response:
                 html = await response.text()
                 soup = BeautifulSoup(html, 'lxml')
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä html.parser
                 soup = BeautifulSoup(html, 'html.parser')
                 snippet = soup.find('div', class_='BNeawe')
                 if snippet:
                     result = snippet.get_text().strip()
                     logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}")
                     return result
                 else:
                     logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                     return "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
     except Exception as e:
         logger.exception("–û—à–∏–±–∫–∞ –≤–æ free_google_search")
         return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."
 
 # –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
 async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
     chat_id = update.effective_chat.id
     user_selected_model[chat_id] = DEFAULT_MODEL
     user_search_enabled[chat_id] = True
     user_temperature[chat_id] = 1.0
     await update.message.reply_text(
         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª—å—é –ò–ò –æ—Ç Google - Gemini 2.5 Pro —Å Google-–ø–æ–∏—Å–∫–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —é–º–æ—Ä–æ–º) –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
         "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 'Image Gen',"
         "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."
         "–ö–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞: t.me/denisobovsyom"
     )
 
 async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
     context.chat_data['history'] = [{"role": "system", "parts": [{"text": system_instruction_text}]}]
     context.chat_data['history'] = [{"role": "user", "parts": [{"text": system_instruction_text}]}]
     await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")
 
 async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
     try:
         temp = float(context.args[0])
         if not (0 <= temp <= 2):
             raise ValueError
         user_temperature[update.effective_chat.id] = temp
         await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
     except:
         await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0")
 
 async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
     user_search_enabled[update.effective_chat.id] = True
     await update.message.reply_text("üîç Google-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á—ë–Ω")
 
 async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
     user_search_enabled[update.effective_chat.id] = False
     await update.message.reply_text("üîá Google-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω")
 
 async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
     chat_id = update.effective_chat.id
     current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
     keyboard = [
         [InlineKeyboardButton(f"{'‚úÖ ' if m == current_model else ''}{name}", callback_data=m)]
         for m, name in AVAILABLE_MODELS.items()
     ]
     await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
 
 async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
     query = update.callback_query
     await query.answer()
     chat_id = query.message.chat_id
     selected = query.data
     if selected in AVAILABLE_MODELS:
         user_selected_model[chat_id] = selected
         await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {AVAILABLE_MODELS[selected]}")
     else:
         await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
 
 async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
     chat_id = update.effective_chat.id
     user_message = update.message.text.strip()
     await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
 
     model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
     temperature = user_temperature.get(chat_id, 1.0)
     use_search = user_search_enabled.get(chat_id, True)
 
     logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, –ü–æ–∏—Å–∫: {use_search}")
 
     # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –µ—â—ë –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å —Ä–æ–ª—å—é user
     chat_history = context.chat_data.setdefault("history", [])
     if not any(msg.get("role") == "system" for msg in chat_history):
         chat_history.insert(0, {"role": "system", "parts": [{"text": system_instruction_text}]})
     if not any(msg.get("role") == "user" for msg in chat_history):
         chat_history.insert(0, {"role": "user", "parts": [{"text": system_instruction_text}]})
     chat_history.append({"role": "user", "parts": [{"text": user_message}]})
 
     # –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –ø–æ–∏—Å–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Google –ø–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
     if use_search:
         search_result = await free_google_search(user_message)
         chat_history.append({"role": "system", "parts": [{"text": f"Google –ø–æ–∏—Å–∫: {search_result}"}]})
         chat_history.append({"role": "user", "parts": [{"text": f"Google –ø–æ–∏—Å–∫: {search_result}"}]})
 
     # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history)
     logger.info(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤")
     
     while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1:
         if chat_history[1].get("role") == "system":
             chat_history.pop(2)
         else:
             chat_history.pop(1)
         chat_history.pop(1)
         total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history)
 
     try:
         logger.info("–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –º–æ–¥–µ–ª–∏. –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: " + str(chat_history))
         # –ü—Ä–∏–≤–æ–¥–∏–º —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏—é –∫ —Ç—Ä–µ–±—É–µ–º—ã–º —Ä–æ–ª—è–º: —Ç–µ–ø–µ—Ä—å –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ "user" –∏ "model"
         adjusted_history = []
         for msg in chat_history:
             new_msg = msg.copy()
             if new_msg.get("role") not in ["user", "model"]:
                 new_msg["role"] = "user"
             adjusted_history.append(new_msg)
         model = genai.GenerativeModel(
             model_id,
             safety_settings=[],
             generation_config={"temperature": temperature}
         )
         response = model.generate_content(chat_history)
         response = model.generate_content(adjusted_history)
         logger.info("–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: " + str(response))
         reply = response.text or "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
         chat_history.append({"role": "model", "parts": [{"text": reply}]})
     except Exception as e:
         logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
         reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."
 
     await update.message.reply_text(reply)
 
 async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
     chat_id = update.effective_chat.id
     photo_file = await update.message.photo[-1].get_file()
     file_bytes = await photo_file.download_as_bytearray()
     try:
         image = Image.open(io.BytesIO(file_bytes))
         extracted_text = pytesseract.image_to_string(image)
         if extracted_text.strip():
             user_prompt = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç: {extracted_text} –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ."
             update.message.text = user_prompt
             await handle_message(update, context)
             return
     except Exception as e:
         logger.warning("OCR –Ω–µ —É–¥–∞–ª–æ—Å—å: %s", e)
     b64_data = base64.b64encode(file_bytes).decode()
     prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
     parts = [
         {"text": prompt},
         {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}}
     ]
     model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
     temperature = user_temperature.get(chat_id, 1.0)
     try:
         model = genai.GenerativeModel(
             model_id,
             safety_settings=[],
             generation_config={"temperature": temperature}
         )
         response = model.generate_content([{"role": "user", "parts": parts}])
         reply = response.text or "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
     except Exception as e:
         logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
         reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
     await update.message.reply_text(reply)
 
 async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
     chat_id = update.effective_chat.id
     doc = await update.message.document.get_file()
     file_bytes = await doc.download_as_bytearray()
     try:
         text = file_bytes.decode("utf-8")
     except UnicodeDecodeError:
         text = file_bytes.decode("latin-1", errors="ignore")
     truncated = text[:15000]
     user_prompt = f"–í–æ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: {truncated} –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º?"
     update.message.text = user_prompt
     await handle_message(update, context)
 
 async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
     application = request.app.get('bot_app')
     try:
         data = await request.json()
         update = Update.de_json(data, application.bot)
         await application.process_update(update)
         return aiohttp.web.Response(text="OK", status=200)
     except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
         return aiohttp.web.Response(status=500, text="Internal error")
 
 async def run_web_server(application: Application, stop_event: asyncio.Event):
     app = aiohttp.web.Application()
     app['bot_app'] = application
     app.router.add_get('/', lambda request: aiohttp.web.Response(text="OK"))
     app.router.add_post(f"/{GEMINI_WEBHOOK_PATH}", handle_telegram_webhook)
     runner = aiohttp.web.AppRunner(app)
     await runner.setup()
     port = int(os.getenv("PORT", "10000"))
     site = aiohttp.web.TCPSite(runner, "0.0.0.0", port)
     await site.start()
     logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
     await stop_event.wait()
 
 async def setup_bot_and_server(stop_event: asyncio.Event):
     application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
     application.add_handler(CommandHandler("start", start))
     application.add_handler(CommandHandler("model", model_command))
     application.add_handler(CommandHandler("clear", clear_history))
     application.add_handler(CommandHandler("temp", set_temperature))
     application.add_handler(CommandHandler("search_on", enable_search))
     application.add_handler(CommandHandler("search_off", disable_search))
     application.add_handler(CallbackQueryHandler(select_model_callback))
     application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
     application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
     application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
     await application.initialize()
     webhook_url = urljoin(WEBHOOK_HOST, GEMINI_WEBHOOK_PATH)
     await application.bot.set_webhook(webhook_url, drop_pending_updates=True)
     return application, run_web_server(application, stop_event)
 
 if __name__ == '__main__':
     loop = asyncio.new_event_loop()
     asyncio.set_event_loop(loop)
     stop_event = asyncio.Event()
     application = None
     try:
         application, web_server_task = loop.run_until_complete(setup_bot_and_server(stop_event))
         for s in (signal.SIGINT, signal.SIGTERM):
             loop.add_signal_handler(s, lambda: stop_event.set())
         loop.run_until_complete(web_server_task)
     except Exception as e:
         logger.exception("–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
     finally:
         if application:
             loop.run_until_complete(application.shutdown())
         loop.close()
         logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
