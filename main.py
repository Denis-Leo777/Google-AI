# --- START OF REALLY TRULY HONESTLY FULL CORRECTED main.py (Fixed ALL SyntaxErrors) ---

import logging
import os
import asyncio
import google.generativeai as genai
import time
import random
from typing import Optional, Dict, Union, Any, Tuple

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
from google.api_core.exceptions import ResourceExhausted, GoogleAPIError, FailedPrecondition
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ü–æ–∏—Å–∫–∞ –∏ –ü–∞—Ä—Å–∏–Ω–≥–∞
import httpx
from bs4 import BeautifulSoup
try:
    from googlesearch import search as google_search_sync
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ googlesearch-python –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...")
    google_search_sync = None
else:
    if not callable(google_search_sync):
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º googlesearch...")
        google_search_sync = None

# Gemini Function Calling —Ç–∏–ø—ã
from google.protobuf.struct_pb2 import Struct

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
if not TELEGRAM_BOT_TOKEN: exit("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not GOOGLE_API_KEY: exit("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô ---
AVAILABLE_MODELS = {
    '‚ö° Flash': 'gemini-2.0-flash-001',
    'üß† Pro Exp': 'gemini-2.5-pro-exp-03-25',
    'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)': 'imagen-3.0-generate-002',
}
DEFAULT_MODEL_ALIAS = '‚ö° Flash'

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Google Search ---
google_search_tool = None
if google_search_sync:
    google_search_func = genai.protos.FunctionDeclaration(
        name="google_search",
        description="–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ–≥–æ–¥—ã, –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü.",
        parameters=genai.protos.Schema(
            type=genai.protos.Type.OBJECT,
            properties={"query": genai.protos.Schema(type=genai.protos.Type.STRING, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")},
            required=["query"]
        )
    )
    google_search_tool = genai.protos.Tool(function_declarations=[google_search_func])
    logger.info("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –¥–ª—è Gemini –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
else:
    logger.warning("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Google Search –ù–ï –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω...")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–æ–¥–µ–ª–µ–π Gemini ---
LOADED_MODELS: Dict[str, genai.GenerativeModel] = {}
gemini_tools = [google_search_tool] if google_search_tool else None
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2000 –∑–Ω–∞–∫–æ–≤... "
        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏. ... "
        "–ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ google_search –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    ) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–¥–µ—Å—å
    for alias, model_id in AVAILABLE_MODELS.items():
        if 'imagen' in model_id.lower(): logger.warning(...); continue
        try:
            model = genai.GenerativeModel( model_id, generation_config={"temperature": 0.8 if 'Flash' in alias else 1, ...}, system_instruction=system_instruction_text, tools=gemini_tools)
            LOADED_MODELS[alias] = model; logger.info(f"–ú–æ–¥–µ–ª—å '{alias}' ... –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e: logger.error(f"!!! –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ '{alias}': {e}")
    if not LOADED_MODELS: raise RuntimeError("–ù–∏ –æ–¥–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    if DEFAULT_MODEL_ALIAS not in LOADED_MODELS:
        try: DEFAULT_MODEL_ALIAS = next(iter(LOADED_MODELS)); logger.warning(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL_ALIAS}")
        except StopIteration: raise RuntimeError("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
except GoogleAPIError as e: logger.exception(...); exit(...)
except Exception as e: logger.exception(...); exit(...)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_selected_model: Dict[int, str] = {}
chat_histories: Dict[int, Any] = {}

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ Google (—Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º) ---
async def fetch_and_parse(...) -> Tuple[Optional[str], Optional[str]]: ... # –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å
async def perform_google_search(...) -> str: ... # –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞ Gemini ---
async def process_gemini_chat_turn(...) -> str: ... # –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user; chat_id = update.effective_chat.id
    if chat_id in user_selected_model: del user_selected_model[chat_id]
    if chat_id in chat_histories: del chat_histories[chat_id]
    logger.info(f"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {chat_id} –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
    default_model_display_name = DEFAULT_MODEL_ALIAS
    search_status = "–≤–∫–ª—é—á–µ–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)" if google_search_tool else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø - Gemini –±–æ—Ç.\n"
        f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model_display_name}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏.\n"
        f"üîç –ü–æ–∏—Å–∫ Google {search_status}.",
        reply_to_message_id=update.message.message_id
    )
    logger.info(f"/start –æ—Ç {user.id}")

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    keyboard = []
    for alias in LOADED_MODELS.keys():
        text = f"‚úÖ {alias}" if alias == current_alias else alias
        keyboard.append([InlineKeyboardButton(text, callback_data=alias)])
    imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
    if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS:
         keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞)", callback_data="imagen_info")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_alias}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    selected_alias = query.data
    chat_id = query.message.chat_id
    current_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    if selected_alias == "imagen_info":
        await context.bot.send_message(chat_id=chat_id, text="–ú–æ–¥–µ–ª—å Imagen –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —á–∞—Ç–∞.")
        return
    if selected_alias not in LOADED_MODELS:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    if selected_alias != current_alias:
        user_selected_model[chat_id] = selected_alias
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ '{selected_alias}'")
        if chat_id in chat_histories:
            del chat_histories[chat_id]
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞.")
        keyboard = []
        for alias in LOADED_MODELS.keys():
            text = f"‚úÖ {alias}" if alias == selected_alias else alias
            keyboard.append([InlineKeyboardButton(text, callback_data=alias)])
        imagen_alias = 'üñºÔ∏è Imagen 3 (–ö–∞—Ä—Ç–∏–Ω–∫–∏!)'
        if imagen_alias in AVAILABLE_MODELS and imagen_alias not in LOADED_MODELS:
             keyboard.append([InlineKeyboardButton(f"{imagen_alias} (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞)", callback_data="imagen_info")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{selected_alias}*\n‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        try: await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
        except: await context.bot.send_message(chat_id=chat_id, text=f"–ú–æ–¥–µ–ª—å *{selected_alias}* —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.", parse_mode=ParseMode.MARKDOWN)

async def test_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = " ".join(context.args)
    chat_id = update.effective_chat.id
    if not query: await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /testsearch"); return
    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {chat_id}: '{query}'")
    await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: '{query}'...")
    try:
        search_result = await perform_google_search(query)
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {chat_id} –≤–µ—Ä–Ω—É–ª: {search_result[:200]}...")
        await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n{search_result[:4000]}", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è {chat_id}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø handle_message
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text; user = update.effective_user; chat_id = update.effective_chat.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{user_message[:50]}...'")
    selected_alias = user_selected_model.get(chat_id, DEFAULT_MODEL_ALIAS)
    selected_model_object = LOADED_MODELS.get(selected_alias)
    if not selected_model_object:
        logger.error(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å '{selected_alias}' –¥–ª—è {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        selected_alias = DEFAULT_MODEL_ALIAS; selected_model_object = LOADED_MODELS.get(DEFAULT_MODEL_ALIAS)
        if not selected_model_object: await update.message.reply_text("–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); return
        else: await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å {selected_alias}"); user_selected_model[chat_id] = selected_alias
    final_text: Optional[str] = None; error_message: Optional[str] = None
    try:
        if chat_id not in chat_histories: chat_histories[chat_id] = selected_model_object.start_chat(history=[]); logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç {chat_id} —Å '{selected_alias}'")
        current_chat_session = chat_histories[chat_id]; logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å –º–æ–¥–µ–ª—å—é: {selected_alias}")
        final_text = await process_gemini_chat_turn(current_chat_session, selected_alias, user_message, context, chat_id)
    except ResourceExhausted as e_limit: logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –∫–≤–æ—Ç–∞: {e_limit}"); error_message = f"üòî –ú–æ–¥–µ–ª—å '{selected_alias}' –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. /model"
    except FailedPrecondition as e_precondition:
        logger.error(f"–ú–æ–¥–µ–ª—å '{selected_alias}' FailedPrecondition: {e_precondition}. –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏.")
        error_message = f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—å—é '{selected_alias}' —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π. –Ø –µ–µ —Å–±—Ä–æ—Å–∏–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        if chat_id in chat_histories:
            del chat_histories[chat_id] # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    except ValueError as e_blocked: logger.warning(f"–ú–æ–¥–µ–ª—å '{selected_alias}' –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {e_blocked}"); error_message = f"‚ö†Ô∏è {e_blocked}"
    except (GoogleAPIError, Exception) as e_other: logger.exception(f"–û—à–∏–±–∫–∞ '{selected_alias}': {e_other}"); error_message = f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ '{selected_alias}': {e_other}"
    if final_text:
        bot_response = final_text[:4090]
        try:
            await update.message.reply_text(bot_response, reply_to_message_id=update.message.message_id)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç '{selected_alias}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user.id}")
        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –û–¢–ü–†–ê–í–ö–ò –û–®–ò–ë–ö–ò
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            try:
                await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç AI.", reply_to_message_id=update.message.message_id) # –ù–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            except Exception:
                pass # –ù–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    elif error_message:
        try:
            await update.message.reply_text(error_message, reply_to_message_id=update.message.message_id)
            logger.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {error_message[:100]}...")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É '{error_message[:100]}...': {e}")
    else:
        logger.warning(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –æ—à–∏–±–∫–∏ –¥–ª—è {chat_id}.")
        if "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞" not in (error_message or "") and "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏" not in (error_message or "") :
            try: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_to_message_id=update.message.message_id)
            except Exception: pass

# --- main ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not LOADED_MODELS: logger.critical("–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"); return
    if not google_search_sync: logger.warning("–ó–∞–ø—É—Å–∫ –ë–ï–ó –ø–æ–∏—Å–∫–∞ Google.")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...");
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("testsearch", test_search))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()

# --- END OF REALLY TRULY HONESTLY FULL CORRECTED main.py ---
