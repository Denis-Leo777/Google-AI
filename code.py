# --- START OF FILE main.py ---

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main.py:
# - –î–æ–±–∞–≤–ª–µ–Ω Google Custom Search API –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
# - DuckDuckGo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ DDG: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ddgs.text() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ asyncio.to_thread()
# - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–∏—Å–∫–æ–º –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
# - –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
# - –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

import logging
import os
import asyncio # –ù—É–∂–Ω–æ –¥–ª—è asyncio.to_thread
import signal
from urllib.parse import urljoin, urlencode # –î–æ–±–∞–≤–ª–µ–Ω urlencode
import base64
import pytesseract
from PIL import Image
import io
import pprint
import json # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Google

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º aiohttp –¥–ª—è Google Search =====
import aiohttp
# ===========================================================
import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import google.generativeai as genai
# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç DDGS =====
from duckduckgo_search import DDGS # –û–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å
from google.generativeai.types import HarmCategory, HarmBlockThreshold
# ============================================

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY') # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Gemini –∏ Google Search
# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Search Engine ID =====
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID')
# ============================================================
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')

for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (GOOGLE_CSE_ID, "GOOGLE_CSE_ID"), # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é =====
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

# –ú–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    'gemini-2.0-flash-thinking-exp-01-21': '2.0 Flash Thinking exp.',
    'gemini-2.5-pro-exp-03-25': '2.5 Pro exp.',
    'gemini-2.0-flash-001': '2.0 Flash',
}
DEFAULT_MODEL = 'gemini-2.0-flash-thinking-exp-01-21'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_enabled = {}
user_selected_model = {}
user_temperature = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_CONTEXT_CHARS = 95000
MAX_OUTPUT_TOKENS = 3000
DDG_MAX_RESULTS = 20 # –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å, —Ç.–∫. —ç—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
GOOGLE_SEARCH_MAX_RESULTS = 20 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Google

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è =====
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
# ===== –ù–û–í–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò (–î–æ–±–∞–≤–ª–µ–Ω–æ) =====
"–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —è–≤–Ω–æ —Å–∞–º —Ñ–∞–∫—Ç –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–∞—Å—Ç—å —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π. –ó–∞–±—É–¥—å —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '–°—É–¥—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞...', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç...' –∏–ª–∏ '–Ø –Ω–∞—à—ë–ª –≤ —Å–µ—Ç–∏...'. –í–µ–¥–∏ —Å–µ–±—è —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è."
"–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏ –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏. –ù–µ —Ç–µ—Ä—è–π –Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."
# ===========================
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)
# ===================================================

SAFETY_SETTINGS_BLOCK_NONE = [
    {
        "category": HarmCategory.HARM_CATEGORY_HARASSMENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
]

# –ö–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_selected_model[chat_id] = DEFAULT_MODEL
    user_search_enabled[chat_id] = True
    user_temperature[chat_id] = 1.0
    default_model_name = AVAILABLE_MODELS.get(DEFAULT_MODEL, DEFAULT_MODEL)
    start_message = (
        f"GEMINI **{default_model_name}**"
        f"\n + –ø–æ–∏—Å–∫ Google/DDG, —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR) –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤" # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        "\n/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"
        "\n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        "\n/search_on /search_off ‚Äî –≤–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫" # –î–æ–±–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        "\n/temp 1.0 ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0-2)" # –î–æ–±–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    )
    await update.message.reply_text(start_message, parse_mode='Markdown')

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['history'] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        temp = float(context.args[0])
        if not (0 <= temp <= 2):
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 2")
        user_temperature[chat_id] = temp
        await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
    except (IndexError, ValueError) as e:
        error_msg = f"‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0 ({e})" if isinstance(e, ValueError) else "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0"
        await update.message.reply_text(error_msg)

async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = True
    await update.message.reply_text("üîç –ü–æ–∏—Å–∫ Google/DDG –≤–∫–ª—é—á—ë–Ω.")

async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = False
    await update.message.reply_text("üîá –ü–æ–∏—Å–∫ Google/DDG –æ—Ç–∫–ª—é—á—ë–Ω.")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    keyboard = []
    for m, name in AVAILABLE_MODELS.items():
         button_text = f"{'‚úÖ ' if m == current_model else ''}{name}"
         keyboard.append([InlineKeyboardButton(button_text, callback_data=m)])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    selected = query.data
    if selected in AVAILABLE_MODELS:
        user_selected_model[chat_id] = selected
        model_name = AVAILABLE_MODELS[selected]
        reply_text = f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{model_name}**"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if query.message.reply_markup:
            try:
                 await query.edit_message_text(reply_text, parse_mode='Markdown')
            except Exception as e:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                 await context.bot.send_message(chat_id, reply_text, parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id, reply_text, parse_mode='Markdown')

    else:
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, —Ç–æ–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if query.message.reply_markup:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        else:
             # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
             await context.bot.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")


# ===== –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ Google (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
async def perform_google_search(query: str, api_key: str, cse_id: str, num_results: int) -> list[str] | None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Custom Search API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤."""
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        'key': api_key,
        'cx': cse_id,
        'q': query,
        'num': num_results,
        'lr': 'lang_ru', # –ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        'gl': 'ru'      # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –†–æ—Å—Å–∏–∏
    }
    encoded_params = urlencode(params)
    full_url = f"{search_url}?{encoded_params}"
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ Google Search API: {search_url}?key=...&cx=...&q={query}&num={num_results}&lr=lang_ru&gl=ru")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ClientSession, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –≤ context, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        session = context.bot_data.get('aiohttp_session')
        if not session:
            session = aiohttp.ClientSession()
            context.bot_data['aiohttp_session'] = session # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        async with session.get(full_url, timeout=10) as response: # –î–æ–±–∞–≤–∏–ª —Ç–∞–π–º–∞—É—Ç
            if response.status == 200:
                data = await response.json()
                items = data.get('items', [])
                # –ë–µ—Ä–µ–º —Å–Ω–∏–ø–ø–µ—Ç –∏–ª–∏ title, –µ—Å–ª–∏ —Å–Ω–∏–ø–ø–µ—Ç–∞ –Ω–µ—Ç
                snippets = [item.get('snippet', item.get('title', ''))
                            for item in items if item.get('snippet') or item.get('title')]
                if snippets:
                    logger.info(f"Google Search: –ù–∞–π–¥–µ–Ω–æ {len(snippets)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query[:50]}...'.")
                    return snippets
                else:
                    logger.info(f"Google Search: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤/–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è '{query[:50]}...'.")
                    return None
            elif response.status == 429:
                logger.warning(f"Google Search: –û—à–∏–±–∫–∞ 429 - –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –¥–ª—è '{query[:50]}...'!")
                return None
            elif response.status == 403:
                 logger.error(f"Google Search: –û—à–∏–±–∫–∞ 403 - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è '{query[:50]}...'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–µ–Ω –ª–∏ Custom Search API.")
                 return None
            else:
                error_text = await response.text()
                logger.error(f"Google Search: –û—à–∏–±–∫–∞ API –¥–ª—è '{query[:50]}...' - –°—Ç–∞—Ç—É—Å {response.status}, –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                return None
    except aiohttp.ClientConnectorError as e:
        logger.error(f"Google Search: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è '{query[:50]}...' - {e}")
        return None
    except aiohttp.ClientError as e:
        logger.error(f"Google Search: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (aiohttp) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è '{query[:50]}...' - {e}")
        return None
    except asyncio.TimeoutError:
         logger.warning(f"Google Search: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è '{query[:50]}...'")
         return None
    except json.JSONDecodeError as e:
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π JSON
        try:
            error_text_json = await response.text()
            logger.error(f"Google Search: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{query[:50]}...' - {e}. –û—Ç–≤–µ—Ç: {error_text_json[:200]}...")
        except Exception:
             logger.error(f"Google Search: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{query[:50]}...' - {e}")
        return None
    except Exception as e:
        logger.error(f"Google Search: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è '{query[:50]}...' - {e}", exc_info=True)
        return None
# ===============================================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    original_user_message = update.message.text.strip() if update.message.text else ""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ '—Ñ–µ–π–∫–æ–≤—ã–π' –∞–ø–¥–µ–π—Ç –∏–∑ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞
    if not original_user_message and hasattr(update, 'message') and hasattr(update.message, 'text') and update.message.text:
        original_user_message = update.message.text.strip()

    if not original_user_message:
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)
    use_search = user_search_enabled.get(chat_id, True)

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ =====
    search_context_snippets = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤
    final_user_prompt = original_user_message # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    search_provider = None # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –∫–∞–∫–æ–π –ø–æ–∏—Å–∫ —Å—Ä–∞–±–æ—Ç–∞–ª
    search_log_msg = "–ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞

    if use_search:
        search_log_msg = "–ü–æ–∏—Å–∫ Google/DDG –≤–∫–ª—é—á–µ–Ω"
        logger.info(f"ChatID: {chat_id} | {search_log_msg}. –ó–∞–ø—Ä–æ—Å: '{original_user_message[:50]}...'")

        # --- –ü–æ–ø—ã—Ç–∫–∞ Google Search ---
        google_results = await perform_google_search(
            original_user_message, GOOGLE_API_KEY, GOOGLE_CSE_ID, GOOGLE_SEARCH_MAX_RESULTS
        )

        if google_results:
            search_provider = "Google"
            search_context_snippets = google_results # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
            search_log_msg += f" (Google: {len(search_context_snippets)} —Ä–µ–∑.)"
            logger.info(f"ChatID: {chat_id} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google: {len(search_context_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
        else:
            search_log_msg += " (Google: –Ω–µ—Ç —Ä–µ–∑.)"
            logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ Google –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞. –ü—Ä–æ–±—É–µ–º DuckDuckGo...")
            # --- –ü–æ–ø—ã—Ç–∫–∞ DuckDuckGo (–µ—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª) ---
            try:
                ddgs = DDGS()
                logger.debug(f"ChatID: {chat_id} | –ó–∞–ø—Ä–æ—Å –∫ DDGS().text('{original_user_message}', region='ru-ru', max_results={DDG_MAX_RESULTS}) —á–µ—Ä–µ–∑ asyncio.to_thread")
                results_ddg = await asyncio.to_thread(
                    ddgs.text,
                    original_user_message,
                    region='ru-ru',
                    max_results=DDG_MAX_RESULTS,
                    timeout=10 # –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è DDG
                )
                logger.debug(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG:\n{pprint.pformat(results_ddg)}")

                if results_ddg:
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ body, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    ddg_snippets = [r.get('body', '') for r in results_ddg if r.get('body')]
                    if ddg_snippets:
                        search_provider = "DuckDuckGo"
                        search_context_snippets = ddg_snippets
                        search_log_msg += f" (DDG: {len(search_context_snippets)} —Ä–µ–∑.)"
                        logger.info(f"ChatID: {chat_id} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG: {len(search_context_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.")
                    else:
                        search_log_msg += " (DDG: —Ä–µ–∑. –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
                        logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–∞ (body).")
                else:
                    search_log_msg += " (DDG: –Ω–µ—Ç —Ä–µ–∑.)"
                    logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            except TimeoutError:
                 logger.warning(f"ChatID: {chat_id} | –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo.")
                 search_log_msg += " (DDG: —Ç–∞–π–º–∞—É—Ç)"
            except Exception as e_ddg:
                logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo: {e_ddg}", exc_info=True)
                search_log_msg += " (DDG: –æ—à–∏–±–∫–∞)"
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø–æ–∏—Å–∫–∞ ---

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–Ω–∏–ø–ø–µ—Ç—ã –∏–∑ –õ–Æ–ë–û–ì–û –ø–æ–∏—Å–∫–∞
        if search_context_snippets:
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            search_context = "\n".join([f"- {s}" for s in search_context_snippets]) # –î–æ–±–∞–≤–∏–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –º–æ–¥–µ–ª—å—é
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Ö–∏—Ç—Ä–µ–µ: —Å–Ω–∞—á–∞–ª–∞ –¥–æ–ø. –∏–Ω—Ñ–∞, –ø–æ—Ç–æ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å
            final_user_prompt = (
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ (–∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–µ —Å—Å—ã–ª–∞—è—Å—å):\n{search_context}\n\n"
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"{original_user_message}\""
            )
        # –ï—Å–ª–∏ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –Ω–µ—Ç, final_user_prompt –æ—Å—Ç–∞–µ—Ç—Å—è original_user_message

    # ===== –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
    logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, {search_log_msg}")
    logger.debug(f"ChatID: {chat_id} | –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ):\n{final_user_prompt}")
    # ==================================

    chat_history = context.chat_data.setdefault("history", [])
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_history.append({"role": "user", "parts": [{"text": original_user_message}]})

    # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, –Ω–æ —É—Ç–æ—á–Ω–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
    removed_count = 0
    while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1:
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É USER+MODEL, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
        if len(chat_history) >= 2:
            chat_history.pop(0) # user
            chat_history.pop(0) # model
            removed_count += 2
        else: # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (user), —É–¥–∞–ª—è–µ–º –µ–≥–æ
            chat_history.pop(0)
            removed_count += 1
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
    if removed_count > 0:
        logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–æ {removed_count} —Å–æ–æ–±—â–µ–Ω–∏–π. –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(chat_history)}, —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ–ª–∏, –∑–∞–º–µ–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    history_for_model = list(chat_history[:-1]) # –ë–µ—Ä–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ) –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history_for_model.append({"role": "user", "parts": [{"text": final_user_prompt}]}) # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –±–µ–∑)

    current_system_instruction = system_instruction_text
    tools = []
    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=current_system_instruction
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º history_for_model –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        response = model.generate_content(history_for_model)

        reply = response.text
        if not reply:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º .name –¥–ª—è enum)
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason_enum = feedback.block_reason if feedback else None
                block_reason = block_reason_enum.name if block_reason_enum else 'N/A'

                finish_reason_enum = candidates_info[0].finish_reason if candidates_info else None
                finish_reason_val = finish_reason_enum.name if finish_reason_enum else 'N/A'

                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])

                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason_enum and block_reason_enum != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason})"
                elif finish_reason_enum and finish_reason_enum != genai.types.FinishReason.STOP: # –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–µ —à—Ç–∞—Ç–Ω–æ
                    reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
                else: # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—è—Å–Ω–∞ –∏–ª–∏ —à—Ç–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    reply = f"ü§ñ –ú–æ–¥–µ–ª—å –¥–∞–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
            except AttributeError as e_attr:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError: {e_attr}).")
                 reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
            except Exception as e_inner:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}", exc_info=True)
                reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –û–°–ù–û–í–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é (chat_history)
        if reply:
             chat_history.append({"role": "model", "parts": [{"text": reply}]})

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é {model_id}")
        error_message = str(e)
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏." # Default message
        try:
            if hasattr(genai, 'types'):
                if isinstance(e, genai.types.BlockedPromptException):
                     reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif isinstance(e, genai.types.StopCandidateException):
                     reply = f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif "400" in error_message and "API key not valid" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
                elif "Deadline Exceeded" in error_message or "504" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
                elif "User location is not supported for accessing this model" in error_message:
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}."
                else:
                     reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"
            else:
                 # Fallback if genai.types is not available
                 logger.warning("genai.types –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.")
                 if "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                      reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                 # ... (other checks)
                 else:
                      reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"

        except AttributeError:
             # Fallback for unexpected AttributeErrors during error handling
             logger.warning("AttributeError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ genai.")
             reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"

    if reply:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        MAX_MESSAGE_LENGTH = 4096
        reply_chunks = [reply[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(reply), MAX_MESSAGE_LENGTH)]
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_to_reply = update.message
        for chunk in reply_chunks:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_to_reply = await message_to_reply.reply_text(chunk)
            except Exception as e_reply:
                logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e_reply}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç.")
                try:
                     # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ), –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º –≤ —á–∞—Ç
                     message_to_reply = await context.bot.send_message(chat_id=chat_id, text=chunk)
                except Exception as e_send:
                     logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {e_send}")
                     # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ –¥–∞–∂–µ –≤ —á–∞—Ç –Ω–µ —à–ª–µ—Ç—Å—è
                     break

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ =====
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tesseract_available = False
    try:
        pytesseract.pytesseract.get_tesseract_version()
        tesseract_available = True
        logger.info(f"Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—É—Ç—å: {pytesseract.pytesseract.tesseract_cmd}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Tesseract: {e}. OCR –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ tesseract –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫

    if not update.message.photo:
        logger.warning(f"ChatID: {chat_id} | –í handle_photo –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
    try:
        photo_file = await update.message.photo[-1].get_file()
        file_bytes = await photo_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    user_caption = update.message.caption if update.message.caption else ""

    if tesseract_available:
        try:
            image = Image.open(io.BytesIO(file_bytes))
            extracted_text = pytesseract.image_to_string(image, lang='rus+eng')
            if extracted_text and extracted_text.strip():
                logger.info(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (OCR)")
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OCR ---
                ocr_context = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n```\n{extracted_text.strip()}\n```"
                if user_caption:
                    user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: \"{user_caption}\". {ocr_context}\n–ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –Ω—ë–º?"
                else:
                    user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ. {ocr_context}\n–ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –Ω—ë–º?"
                # -----------------------------------------

                # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" update –¥–ª—è handle_message
                fake_message = type('obj', (object,), {
                    'text': user_prompt,
                    'reply_text': update.message.reply_text,
                    'chat_id': chat_id
                 })
                fake_update = type('obj', (object,), {
                    'effective_chat': update.effective_chat,
                    'message': fake_message
                })

                await handle_message(fake_update, context)
                return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            else:
                 logger.info(f"ChatID: {chat_id} | OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

        except pytesseract.TesseractNotFoundError:
             logger.error("Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å. OCR –æ—Ç–∫–ª—é—á–µ–Ω.")
             tesseract_available = False
        except Exception as e:
            logger.warning(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ OCR: {e}", exc_info=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ OCR –≤—ã–∫–ª—é—á–µ–Ω/–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
    logger.info(f"ChatID: {chat_id} | –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑/–ø–æ—Å–ª–µ OCR)")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    MAX_IMAGE_BYTES = 4 * 1024 * 1024 # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç Gemini
    if len(file_bytes) > MAX_IMAGE_BYTES:
        logger.warning(f"ChatID: {chat_id} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({len(file_bytes)} –±–∞–π—Ç) –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è API.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∂–∞—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å

    b64_data = base64.b64encode(file_bytes).decode()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø–µ—Ä–µ–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —á–∞—Å—Ç—å "–¥–∏–∞–ª–æ–≥–∞" ---
    # –í–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?", –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if user_caption:
         prompt_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: \"{user_caption}\". –û–ø–∏—à–∏, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –∫–∞–∫ —ç—Ç–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)."
    else:
         prompt_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏. –û–ø–∏—à–∏, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
    parts = [
        {"text": prompt_text},
        {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}}
    ]
    # -------------------------------------------------------------------------------

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ vision-–º–æ–¥–µ–ª—å (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if 'flash' not in model_id and 'pro' not in model_id and 'vision' not in model_id:
         vision_models = [m for m in AVAILABLE_MODELS if 'flash' in m or 'pro' in m or 'vision' in m]
         if vision_models:
             original_model_name = AVAILABLE_MODELS.get(model_id, model_id)
             model_id = vision_models[0]
             new_model_name = AVAILABLE_MODELS.get(model_id, model_id)
             logger.warning(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å {original_model_name} –Ω–µ vision. –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é {new_model_name}.")
             # –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
             # await context.bot.send_message(chat_id=chat_id, text=f"‚ÑπÔ∏è –í–∞—à–∞ –º–æ–¥–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é {new_model_name}.")
         else:
             logger.error(f"ChatID: {chat_id} | –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö vision –º–æ–¥–µ–ª–µ–π.")
             await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
             return

    temperature = user_temperature.get(chat_id, 1.0)
    logger.info(f"ChatID: {chat_id} | –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}")
    tools = []
    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        model = genai.GenerativeModel(
            model_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π model_id (–º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=system_instruction_text
        )
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è vision
        response = model.generate_content([{"role": "user", "parts": parts}])
        reply = response.text

        if not reply:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason_enum = feedback.block_reason if feedback else None
                block_reason = block_reason_enum.name if block_reason_enum else 'N/A'
                finish_reason_enum = candidates_info[0].finish_reason if candidates_info else None
                finish_reason_val = finish_reason_enum.name if finish_reason_enum else 'N/A'
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])

                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason_enum and block_reason_enum != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason})"
                elif finish_reason_enum and finish_reason_enum != genai.types.FinishReason.STOP:
                    reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
                else:
                    reply = f"ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)."

            except AttributeError as e_attr:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (—Ñ–æ—Ç–æ), –æ—à–∏–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞: {e_attr}.")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            except Exception as e_inner:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (—Ñ–æ—Ç–æ), –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ: {e_inner}", exc_info=True)
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        error_message = str(e)
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." # Default
        try:
            if hasattr(genai, 'types'):
                 # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ BlockedPromptException, StopCandidateException, 429, 400) ...
                if isinstance(e, genai.types.BlockedPromptException):
                     reply = f"‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif isinstance(e, genai.types.StopCandidateException):
                     reply = f"‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif "429" in error_message and ("quota" in error_message or "Resource has been exhausted" in error_message):
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif "400" in error_message and "API key not valid" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
                elif "400" in error_message and ("image" in error_message.lower() or "input" in error_message.lower()):
                     # –ë–æ–ª–µ–µ –æ–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º/–≤–≤–æ–¥–æ–º
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∞–∫–æ–π –≤–≤–æ–¥ ({error_message[:100]}...)."
                elif "Deadline Exceeded" in error_message or "504" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
                elif "User location is not supported" in error_message:
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}."
                else:
                     reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"
            else:
                 # Fallback
                 # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ 429, 400) ...
                 reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"
        except AttributeError:
            logger.warning("AttributeError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ genai (—Ñ–æ—Ç–æ).")
            reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"

    if reply:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        MAX_MESSAGE_LENGTH = 4096
        reply_chunks = [reply[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(reply), MAX_MESSAGE_LENGTH)]
        message_to_reply = update.message
        for chunk in reply_chunks:
            try:
                message_to_reply = await message_to_reply.reply_text(chunk)
            except Exception as e_reply:
                logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ: {e_reply}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç.")
                try:
                     message_to_reply = await context.bot.send_message(chat_id=chat_id, text=chunk)
                except Exception as e_send:
                     logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –≤ —á–∞—Ç: {e_send}")
                     break

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ =====
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not update.message.document:
        logger.warning(f"ChatID: {chat_id} | –í handle_document –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    doc = update.message.document
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    allowed_mime_prefixes = ('text/', 'application/json', 'application/xml', 'application/csv', 'application/x-python', 'application/x-sh', 'application/javascript')
    # application/octet-stream –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ–º —É–≥–æ–¥–Ω–æ, –Ω–æ —á–∞—Å—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ç–∏–ø–∞
    allowed_mime_types = ('application/octet-stream',)

    is_allowed_prefix = any(doc.mime_type.startswith(prefix) for prefix in allowed_mime_prefixes) if doc.mime_type else False
    is_allowed_type = doc.mime_type in allowed_mime_types if doc.mime_type else False

    if not (is_allowed_prefix or is_allowed_type):
        mime_type_str = f"`{doc.mime_type}`" if doc.mime_type else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—Ç–∏–ø–∞ .txt, .py, .json, .csv –∏ —Ç.–ø.). –í–∞—à —Ç–∏–ø: {mime_type_str}")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {doc.file_name} (MIME: {doc.mime_type})")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    MAX_FILE_SIZE_MB = 10
    if doc.file_size and doc.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª '{doc.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> {MAX_FILE_SIZE_MB} MB).")
        logger.warning(f"ChatID: {chat_id} | –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {doc.file_name} ({doc.file_size / (1024*1024):.2f} MB)")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
    try:
        doc_file = await doc.get_file()
        file_bytes = await doc_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{doc.file_name}': {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    text = None
    detected_encoding = None
    encodings_to_try = ['utf-8', 'latin-1', 'cp1251']
    for encoding in encodings_to_try:
        try:
            text = file_bytes.decode(encoding)
            detected_encoding = encoding
            logger.info(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {encoding}.")
            break
        except UnicodeDecodeError:
            logger.debug(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' –Ω–µ –≤ {encoding}.")
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è '{doc.file_name}' –∫–∞–∫ {encoding}: {e}")

    if text is None:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å '{doc.file_name}' –Ω–∏ –æ–¥–Ω–æ–π –∏–∑: {encodings_to_try}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8.")
        return

    # –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    MAX_FILE_CHARS = MAX_CONTEXT_CHARS // 3 # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
    truncated = text
    warning_msg = ""
    if len(text) > MAX_FILE_CHARS:
        truncated = text[:MAX_FILE_CHARS]
        warning_msg = f"\n\n(‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤)"
        logger.warning(f"ChatID: {chat_id} | –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ '{doc.file_name}' –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤.")

    user_caption = update.message.caption if update.message.caption else ""
    file_name = doc.file_name or "—Ñ–∞–π–ª"
    encoding_info = f"(–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ {detected_encoding})" if detected_encoding else ""

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    file_context = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_name}' {encoding_info}:\n```\n{truncated}\n```{warning_msg}"
    if user_caption:
        user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª '{file_name}' —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: \"{user_caption}\". {file_context}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    else:
        user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª '{file_name}'. {file_context}\n–ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ?"
    # -----------------------------------------------

    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∞–ø–¥–µ–π—Ç –¥–ª—è handle_message (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    fake_message = type('obj', (object,), {
        'text': user_prompt,
        'reply_text': update.message.reply_text,
        'chat_id': chat_id
     })
    fake_update = type('obj', (object,), {
        'effective_chat': update.effective_chat,
        'message': fake_message
    })
    await handle_message(fake_update, context)
# ======================================


# --- –§—É–Ω–∫—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞ (–±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ---
async def setup_bot_and_server(stop_event: asyncio.Event):
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    aiohttp_session = aiohttp.ClientSession()
    application.bot_data['aiohttp_session'] = aiohttp_session

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("temp", set_temperature))
    application.add_handler(CommandHandler("search_on", enable_search))
    application.add_handler(CommandHandler("search_off", disable_search))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏ handle_document
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, f"/{GEMINI_WEBHOOK_PATH}")
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    await application.bot.set_webhook(webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    return application, run_web_server(application, stop_event)


async def run_web_server(application: Application, stop_event: asyncio.Event):
    app = aiohttp.web.Application()
    async def health_check(request):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if 'bot_app' in request.app and request.app['bot_app']:
            return aiohttp.web.Response(text="OK")
        else:
             return aiohttp.web.Response(text="Error: Bot not configured", status=503)

    app.router.add_get('/', health_check)

    app['bot_app'] = application
    webhook_path = f"/{GEMINI_WEBHOOK_PATH}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    logger.info(f"–í–µ–±—Ö—É–∫ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø—É—Ç–∏: {webhook_path}")

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ö–æ—Å—Ç 0.0.0.0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Docker/–≤–Ω–µ—à–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    host = "0.0.0.0"
    site = aiohttp.web.TCPSite(runner, host, port)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}")
        # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await stop_event.wait()
        logger.info("–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º.")
    except asyncio.CancelledError:
        logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    finally:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (cleanup)...")
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiohttp!")
        return aiohttp.web.Response(status=500, text="Internal Server Error: Bot application not configured")

    try:
        data = await request.json()
        # logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}") # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
        update = Update.de_json(data, application.bot)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º—É
        asyncio.create_task(application.process_update(update))
        return aiohttp.web.Response(text="OK", status=200)
    except json.JSONDecodeError as e:
         body = await request.text()
         logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Telegram: {e}. –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body[:500]}...")
         return aiohttp.web.Response(text="Bad Request", status=400)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        # –û—Ç–≤–µ—á–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –Ω–µ –¥–æ–ª–±–∏–ª –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        return aiohttp.web.Response(text="OK", status=200)


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('httpcore').setLevel(logging.WARNING)
    logging.getLogger('google.api_core').setLevel(logging.WARNING)
    logging.getLogger('google.generativeai').setLevel(logging.INFO) # –û—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è Gemini
    logging.getLogger('duckduckgo_search').setLevel(logging.INFO)
    logging.getLogger('PIL').setLevel(logging.INFO)
    logging.getLogger('aiohttp.access').setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞ aiohttp

    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler():
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT/SIGTERM, –Ω–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        if not stop_event.is_set():
            stop_event.set()

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, signal_handler)
        except NotImplementedError:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {sig} (–≤–æ–∑–º–æ–∂–Ω–æ, Windows).")

    application = None
    web_server_task = None
    aiohttp_session_local = None # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Å—Å–∏–∏

    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        application, web_server_coro = await setup_bot_and_server(stop_event)
        web_server_task = asyncio.create_task(web_server_coro)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        if 'aiohttp_session' in application.bot_data:
            aiohttp_session_local = application.bot_data['aiohttp_session']

        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")
        await stop_event.wait() # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

    except asyncio.CancelledError:
        logger.info("–ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ main –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.", exc_info=True)
    finally:
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —à—Ç–∞—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª)
        if not stop_event.is_set():
            stop_event.set()

        # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if web_server_task and not web_server_task.done():
             logger.info("–û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
             try:
                 # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                 await asyncio.wait_for(web_server_task, timeout=15.0)
                 logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
             except asyncio.TimeoutError:
                 logger.warning("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫, –æ—Ç–º–µ–Ω—è—é...")
                 web_server_task.cancel()
                 try: await web_server_task
                 except asyncio.CancelledError: logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                 except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
             except asyncio.CancelledError:
                  logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)

        # 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        if application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ (shutdown)...")
            try:
                 await application.shutdown()
                 logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ application.shutdown(): {e}", exc_info=True)
        else:
            logger.warning("–û–±—ä–µ–∫—Ç application –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

        # 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp
        if aiohttp_session_local and not aiohttp_session_local.closed:
             logger.info("–ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é aiohttp...")
             await aiohttp_session_local.close()
             logger.info("–°–µ—Å—Å–∏—è aiohttp –∑–∞–∫—Ä—ã—Ç–∞.")

        # 5. –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        if tasks:
            logger.info(f"–û—Ç–º–µ–Ω—è—é {len(tasks)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
            [task.cancel() for task in tasks]
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
                logger.info("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
            except asyncio.CancelledError:
                logger.info("–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á: {e}", exc_info=True)

        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ.", exc_info=True)

# --- END OF FILE main.py ---